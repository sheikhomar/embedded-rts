// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getNeuron3_HH_
#define _getNeuron3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getNeuron3 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > agg_result_weights_V_address0;
    sc_out< sc_logic > agg_result_weights_V_ce0;
    sc_out< sc_logic > agg_result_weights_V_we0;
    sc_out< sc_lv<64> > agg_result_weights_V_d0;
    sc_out< sc_lv<1> > agg_result_activation;
    sc_out< sc_logic > agg_result_activation_ap_vld;
    sc_out< sc_lv<2> > weights_V_address0;
    sc_out< sc_logic > weights_V_ce0;
    sc_in< sc_lv<64> > weights_V_q0;
    sc_in< sc_lv<1> > activation;


    // Module declarations
    getNeuron3(sc_module_name name);
    SC_HAS_PROCESS(getNeuron3);

    ~getNeuron3();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_V_fu_86_p2;
    sc_signal< sc_lv<3> > i_V_reg_100;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > tmp_1_fu_92_p1;
    sc_signal< sc_lv<32> > tmp_1_reg_105;
    sc_signal< sc_lv<1> > tmp_fu_80_p2;
    sc_signal< sc_lv<3> > p_012_0_i_i_reg_69;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_activation();
    void thread_agg_result_activation_ap_vld();
    void thread_agg_result_weights_V_address0();
    void thread_agg_result_weights_V_ce0();
    void thread_agg_result_weights_V_d0();
    void thread_agg_result_weights_V_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_V_fu_86_p2();
    void thread_tmp_1_fu_92_p1();
    void thread_tmp_fu_80_p2();
    void thread_weights_V_address0();
    void thread_weights_V_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
