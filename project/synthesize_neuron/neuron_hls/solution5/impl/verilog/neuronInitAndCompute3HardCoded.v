// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="neuronInitAndCompute3HardCoded,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=16,HLS_SYN_FF=1360,HLS_SYN_LUT=884}" *)

module neuronInitAndCompute3HardCoded (
        ap_clk,
        ap_rst_n,
        s_axi_neuron_hard_io_AWVALID,
        s_axi_neuron_hard_io_AWREADY,
        s_axi_neuron_hard_io_AWADDR,
        s_axi_neuron_hard_io_WVALID,
        s_axi_neuron_hard_io_WREADY,
        s_axi_neuron_hard_io_WDATA,
        s_axi_neuron_hard_io_WSTRB,
        s_axi_neuron_hard_io_ARVALID,
        s_axi_neuron_hard_io_ARREADY,
        s_axi_neuron_hard_io_ARADDR,
        s_axi_neuron_hard_io_RVALID,
        s_axi_neuron_hard_io_RREADY,
        s_axi_neuron_hard_io_RDATA,
        s_axi_neuron_hard_io_RRESP,
        s_axi_neuron_hard_io_BVALID,
        s_axi_neuron_hard_io_BREADY,
        s_axi_neuron_hard_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;
parameter    C_S_AXI_NEURON_HARD_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_NEURON_HARD_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_neuron_hard_io_AWVALID;
output   s_axi_neuron_hard_io_AWREADY;
input  [C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH - 1:0] s_axi_neuron_hard_io_AWADDR;
input   s_axi_neuron_hard_io_WVALID;
output   s_axi_neuron_hard_io_WREADY;
input  [C_S_AXI_NEURON_HARD_IO_DATA_WIDTH - 1:0] s_axi_neuron_hard_io_WDATA;
input  [C_S_AXI_NEURON_HARD_IO_WSTRB_WIDTH - 1:0] s_axi_neuron_hard_io_WSTRB;
input   s_axi_neuron_hard_io_ARVALID;
output   s_axi_neuron_hard_io_ARREADY;
input  [C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH - 1:0] s_axi_neuron_hard_io_ARADDR;
output   s_axi_neuron_hard_io_RVALID;
input   s_axi_neuron_hard_io_RREADY;
output  [C_S_AXI_NEURON_HARD_IO_DATA_WIDTH - 1:0] s_axi_neuron_hard_io_RDATA;
output  [1:0] s_axi_neuron_hard_io_RRESP;
output   s_axi_neuron_hard_io_BVALID;
input   s_axi_neuron_hard_io_BREADY;
output  [1:0] s_axi_neuron_hard_io_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [1:0] inputData_V_address0;
reg    inputData_V_ce0;
wire   [63:0] inputData_V_q0;
wire   [63:0] output_V;
reg    output_V_ap_vld;
reg   [63:0] p_Val2_s_reg_101;
reg   [2:0] p_i_i_reg_113;
wire   [0:0] exitcond_fu_124_p2;
reg   [0:0] exitcond_reg_247;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_247;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_247;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_247;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_247;
reg   [0:0] ap_reg_pp0_iter5_exitcond_reg_247;
reg   [0:0] ap_reg_pp0_iter6_exitcond_reg_247;
wire   [1:0] tmp_3_fu_130_p1;
reg   [1:0] tmp_3_reg_251;
wire   [2:0] i_V_fu_145_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [46:0] self_weights_V_load_s_fu_175_p3;
reg   [46:0] self_weights_V_load_s_reg_267;
reg  signed [63:0] inputData_V_load_reg_272;
wire   [110:0] grp_fu_189_p2;
reg   [110:0] p_Val2_1_reg_287;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] tmp_8_i_i_cast_fu_140_p1;
wire    ap_block_pp0_stage0_flag00000000;
wire    ap_CS_fsm_state10;
wire   [1:0] tmp_8_i_i_fu_134_p2;
wire   [0:0] sel_tmp2_fu_156_p2;
wire   [0:0] sel_tmp_fu_151_p2;
wire   [0:0] tmp_fu_169_p2;
wire   [46:0] sel_tmp1_fu_161_p3;
wire   [46:0] grp_fu_189_p1;
wire  signed [111:0] tmp_2_i_i_cast_fu_203_p1;
wire   [111:0] tmp_1_i_i_fu_195_p3;
wire   [111:0] p_Val2_2_fu_206_p2;
wire   [0:0] tmp_2_fu_226_p3;
wire   [62:0] tmp_1_fu_222_p1;
wire   [62:0] p_Val2_4_fu_234_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [110:0] grp_fu_189_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_NEURON_HARD_IO_DATA_WIDTH ))
neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U(
    .AWVALID(s_axi_neuron_hard_io_AWVALID),
    .AWREADY(s_axi_neuron_hard_io_AWREADY),
    .AWADDR(s_axi_neuron_hard_io_AWADDR),
    .WVALID(s_axi_neuron_hard_io_WVALID),
    .WREADY(s_axi_neuron_hard_io_WREADY),
    .WDATA(s_axi_neuron_hard_io_WDATA),
    .WSTRB(s_axi_neuron_hard_io_WSTRB),
    .ARVALID(s_axi_neuron_hard_io_ARVALID),
    .ARREADY(s_axi_neuron_hard_io_ARREADY),
    .ARADDR(s_axi_neuron_hard_io_ARADDR),
    .RVALID(s_axi_neuron_hard_io_RVALID),
    .RREADY(s_axi_neuron_hard_io_RREADY),
    .RDATA(s_axi_neuron_hard_io_RDATA),
    .RRESP(s_axi_neuron_hard_io_RRESP),
    .BVALID(s_axi_neuron_hard_io_BVALID),
    .BREADY(s_axi_neuron_hard_io_BREADY),
    .BRESP(s_axi_neuron_hard_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputData_V_address0(inputData_V_address0),
    .inputData_V_ce0(inputData_V_ce0),
    .inputData_V_q0(inputData_V_q0),
    .output_V(output_V),
    .output_V_ap_vld(output_V_ap_vld)
);

neuronInitAndCompbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 111 ))
neuronInitAndCompbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(inputData_V_load_reg_272),
    .din1(grp_fu_189_p1),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_reg_pp0_iter6_exitcond_reg_247 == 1'd0))) begin
        p_Val2_s_reg_101 <= {{p_Val2_2_fu_206_p2[111:48]}};
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_101 <= 64'd281474976710656;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_fu_124_p2 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        p_i_i_reg_113 <= i_V_fu_145_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_i_i_reg_113 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_247 <= exitcond_reg_247;
        exitcond_reg_247 <= exitcond_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_reg_247 <= ap_reg_pp0_iter1_exitcond_reg_247;
        ap_reg_pp0_iter3_exitcond_reg_247 <= ap_reg_pp0_iter2_exitcond_reg_247;
        ap_reg_pp0_iter4_exitcond_reg_247 <= ap_reg_pp0_iter3_exitcond_reg_247;
        ap_reg_pp0_iter5_exitcond_reg_247 <= ap_reg_pp0_iter4_exitcond_reg_247;
        ap_reg_pp0_iter6_exitcond_reg_247 <= ap_reg_pp0_iter5_exitcond_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_reg_247 == 1'd0))) begin
        inputData_V_load_reg_272 <= inputData_V_q0;
        self_weights_V_load_s_reg_267 <= self_weights_V_load_s_fu_175_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter5_exitcond_reg_247 == 1'd0))) begin
        p_Val2_1_reg_287 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_fu_124_p2 == 1'd0))) begin
        tmp_3_reg_251 <= tmp_3_fu_130_p1;
    end
end

always @ (*) begin
    if ((exitcond_fu_124_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        inputData_V_ce0 = 1'b1;
    end else begin
        inputData_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_ap_vld = 1'b1;
    end else begin
        output_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter7) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_124_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter7) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_124_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_124_p2 = ((p_i_i_reg_113 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_189_p1 = grp_fu_189_p10;

assign grp_fu_189_p10 = self_weights_V_load_s_reg_267;

assign i_V_fu_145_p2 = (3'd1 + p_i_i_reg_113);

assign inputData_V_address0 = tmp_8_i_i_cast_fu_140_p1;

assign output_V = p_Val2_4_fu_234_p3;

assign p_Val2_2_fu_206_p2 = ($signed(tmp_2_i_i_cast_fu_203_p1) + $signed(tmp_1_i_i_fu_195_p3));

assign p_Val2_4_fu_234_p3 = ((tmp_2_fu_226_p3[0:0] === 1'b1) ? 63'd0 : tmp_1_fu_222_p1);

assign sel_tmp1_fu_161_p3 = ((sel_tmp2_fu_156_p2[0:0] === 1'b1) ? 47'd56294995342131 : 47'd84442493013196);

assign sel_tmp2_fu_156_p2 = ((tmp_3_reg_251 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp_fu_151_p2 = ((tmp_3_reg_251 == 2'd2) ? 1'b1 : 1'b0);

assign self_weights_V_load_s_fu_175_p3 = ((tmp_fu_169_p2[0:0] === 1'b1) ? sel_tmp1_fu_161_p3 : 47'd112589990684262);

assign tmp_1_fu_222_p1 = p_Val2_s_reg_101[62:0];

assign tmp_1_i_i_fu_195_p3 = {{p_Val2_s_reg_101}, {48'd0}};

assign tmp_2_fu_226_p3 = p_Val2_s_reg_101[32'd63];

assign tmp_2_i_i_cast_fu_203_p1 = $signed(p_Val2_1_reg_287);

assign tmp_3_fu_130_p1 = p_i_i_reg_113[1:0];

assign tmp_8_i_i_cast_fu_140_p1 = tmp_8_i_i_fu_134_p2;

assign tmp_8_i_i_fu_134_p2 = ($signed(2'd3) + $signed(tmp_3_fu_130_p1));

assign tmp_fu_169_p2 = (sel_tmp2_fu_156_p2 | sel_tmp_fu_151_p2);

endmodule //neuronInitAndCompute3HardCoded
