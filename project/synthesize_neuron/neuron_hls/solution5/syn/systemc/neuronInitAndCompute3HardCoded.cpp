// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "neuronInitAndCompute3HardCoded.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic neuronInitAndCompute3HardCoded::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic neuronInitAndCompute3HardCoded::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> neuronInitAndCompute3HardCoded::ap_ST_fsm_state1 = "1";
const sc_lv<3> neuronInitAndCompute3HardCoded::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> neuronInitAndCompute3HardCoded::ap_ST_fsm_state10 = "100";
const sc_lv<32> neuronInitAndCompute3HardCoded::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool neuronInitAndCompute3HardCoded::ap_const_boolean_1 = true;
const int neuronInitAndCompute3HardCoded::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> neuronInitAndCompute3HardCoded::ap_const_lv32_1 = "1";
const bool neuronInitAndCompute3HardCoded::ap_const_boolean_0 = false;
const sc_lv<1> neuronInitAndCompute3HardCoded::ap_const_lv1_0 = "0";
const sc_lv<1> neuronInitAndCompute3HardCoded::ap_const_lv1_1 = "1";
const sc_lv<64> neuronInitAndCompute3HardCoded::ap_const_lv64_1000000000000 = "1000000000000000000000000000000000000000000000000";
const sc_lv<3> neuronInitAndCompute3HardCoded::ap_const_lv3_1 = "1";
const sc_lv<32> neuronInitAndCompute3HardCoded::ap_const_lv32_2 = "10";
const sc_lv<3> neuronInitAndCompute3HardCoded::ap_const_lv3_4 = "100";
const sc_lv<2> neuronInitAndCompute3HardCoded::ap_const_lv2_3 = "11";
const sc_lv<2> neuronInitAndCompute3HardCoded::ap_const_lv2_2 = "10";
const sc_lv<2> neuronInitAndCompute3HardCoded::ap_const_lv2_1 = "1";
const sc_lv<47> neuronInitAndCompute3HardCoded::ap_const_lv47_333333333333 = "1100110011001100110011001100110011001100110011";
const sc_lv<47> neuronInitAndCompute3HardCoded::ap_const_lv47_4CCCCCCCCCCC = "10011001100110011001100110011001100110011001100";
const sc_lv<47> neuronInitAndCompute3HardCoded::ap_const_lv47_666666666666 = "11001100110011001100110011001100110011001100110";
const sc_lv<48> neuronInitAndCompute3HardCoded::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<32> neuronInitAndCompute3HardCoded::ap_const_lv32_30 = "110000";
const sc_lv<32> neuronInitAndCompute3HardCoded::ap_const_lv32_6F = "1101111";
const sc_lv<32> neuronInitAndCompute3HardCoded::ap_const_lv32_3F = "111111";
const sc_lv<63> neuronInitAndCompute3HardCoded::ap_const_lv63_0 = "000000000000000000000000000000000000000000000000000000000000000";

neuronInitAndCompute3HardCoded::neuronInitAndCompute3HardCoded(sc_module_name name) : sc_module(name), mVcdFile(0) {
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U = new neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi<C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH,C_S_AXI_NEURON_HARD_IO_DATA_WIDTH>("neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U");
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->AWVALID(s_axi_neuron_hard_io_AWVALID);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->AWREADY(s_axi_neuron_hard_io_AWREADY);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->AWADDR(s_axi_neuron_hard_io_AWADDR);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->WVALID(s_axi_neuron_hard_io_WVALID);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->WREADY(s_axi_neuron_hard_io_WREADY);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->WDATA(s_axi_neuron_hard_io_WDATA);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->WSTRB(s_axi_neuron_hard_io_WSTRB);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ARVALID(s_axi_neuron_hard_io_ARVALID);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ARREADY(s_axi_neuron_hard_io_ARREADY);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ARADDR(s_axi_neuron_hard_io_ARADDR);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->RVALID(s_axi_neuron_hard_io_RVALID);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->RREADY(s_axi_neuron_hard_io_RREADY);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->RDATA(s_axi_neuron_hard_io_RDATA);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->RRESP(s_axi_neuron_hard_io_RRESP);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->BVALID(s_axi_neuron_hard_io_BVALID);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->BREADY(s_axi_neuron_hard_io_BREADY);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->BRESP(s_axi_neuron_hard_io_BRESP);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ACLK(ap_clk);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ARESET(ap_rst_n_inv);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ACLK_EN(ap_var_for_const0);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ap_start(ap_start);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->interrupt(interrupt);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ap_ready(ap_ready);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ap_done(ap_done);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->ap_idle(ap_idle);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->inputData_V_address0(inputData_V_address0);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->inputData_V_ce0(inputData_V_ce0);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->inputData_V_q0(inputData_V_q0);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->output_V(output_V);
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U->output_V_ap_vld(output_V_ap_vld);
    neuronInitAndCompbkb_U0 = new neuronInitAndCompbkb<1,5,64,47,111>("neuronInitAndCompbkb_U0");
    neuronInitAndCompbkb_U0->clk(ap_clk);
    neuronInitAndCompbkb_U0->reset(ap_rst_n_inv);
    neuronInitAndCompbkb_U0->din0(inputData_V_load_reg_272);
    neuronInitAndCompbkb_U0->din1(grp_fu_189_p1);
    neuronInitAndCompbkb_U0->ce(ap_var_for_const0);
    neuronInitAndCompbkb_U0->dout(grp_fu_189_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_fu_124_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_124_p2);
    sensitive << ( p_i_i_reg_113 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_189_p1);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( grp_fu_189_p10 );

    SC_METHOD(thread_grp_fu_189_p10);
    sensitive << ( self_weights_V_load_s_reg_267 );

    SC_METHOD(thread_i_V_fu_145_p2);
    sensitive << ( p_i_i_reg_113 );

    SC_METHOD(thread_inputData_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_8_i_i_cast_fu_140_p1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_inputData_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_output_V);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( p_Val2_4_fu_234_p3 );

    SC_METHOD(thread_output_V_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_p_Val2_2_fu_206_p2);
    sensitive << ( tmp_2_i_i_cast_fu_203_p1 );
    sensitive << ( tmp_1_i_i_fu_195_p3 );

    SC_METHOD(thread_p_Val2_4_fu_234_p3);
    sensitive << ( tmp_2_fu_226_p3 );
    sensitive << ( tmp_1_fu_222_p1 );

    SC_METHOD(thread_sel_tmp1_fu_161_p3);
    sensitive << ( sel_tmp2_fu_156_p2 );

    SC_METHOD(thread_sel_tmp2_fu_156_p2);
    sensitive << ( exitcond_reg_247 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( tmp_3_reg_251 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sel_tmp_fu_151_p2);
    sensitive << ( exitcond_reg_247 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( tmp_3_reg_251 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_self_weights_V_load_s_fu_175_p3);
    sensitive << ( tmp_fu_169_p2 );
    sensitive << ( sel_tmp1_fu_161_p3 );

    SC_METHOD(thread_tmp_1_fu_222_p1);
    sensitive << ( p_Val2_s_reg_101 );

    SC_METHOD(thread_tmp_1_i_i_fu_195_p3);
    sensitive << ( p_Val2_s_reg_101 );

    SC_METHOD(thread_tmp_2_fu_226_p3);
    sensitive << ( p_Val2_s_reg_101 );

    SC_METHOD(thread_tmp_2_i_i_cast_fu_203_p1);
    sensitive << ( p_Val2_1_reg_287 );

    SC_METHOD(thread_tmp_3_fu_130_p1);
    sensitive << ( p_i_i_reg_113 );

    SC_METHOD(thread_tmp_8_i_i_cast_fu_140_p1);
    sensitive << ( tmp_8_i_i_fu_134_p2 );

    SC_METHOD(thread_tmp_8_i_i_fu_134_p2);
    sensitive << ( tmp_3_fu_130_p1 );

    SC_METHOD(thread_tmp_fu_169_p2);
    sensitive << ( sel_tmp2_fu_156_p2 );
    sensitive << ( sel_tmp_fu_151_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "neuronInitAndCompute3HardCoded_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_AWVALID, "(port)s_axi_neuron_hard_io_AWVALID");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_AWREADY, "(port)s_axi_neuron_hard_io_AWREADY");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_AWADDR, "(port)s_axi_neuron_hard_io_AWADDR");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_WVALID, "(port)s_axi_neuron_hard_io_WVALID");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_WREADY, "(port)s_axi_neuron_hard_io_WREADY");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_WDATA, "(port)s_axi_neuron_hard_io_WDATA");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_WSTRB, "(port)s_axi_neuron_hard_io_WSTRB");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_ARVALID, "(port)s_axi_neuron_hard_io_ARVALID");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_ARREADY, "(port)s_axi_neuron_hard_io_ARREADY");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_ARADDR, "(port)s_axi_neuron_hard_io_ARADDR");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_RVALID, "(port)s_axi_neuron_hard_io_RVALID");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_RREADY, "(port)s_axi_neuron_hard_io_RREADY");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_RDATA, "(port)s_axi_neuron_hard_io_RDATA");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_RRESP, "(port)s_axi_neuron_hard_io_RRESP");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_BVALID, "(port)s_axi_neuron_hard_io_BVALID");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_BREADY, "(port)s_axi_neuron_hard_io_BREADY");
    sc_trace(mVcdFile, s_axi_neuron_hard_io_BRESP, "(port)s_axi_neuron_hard_io_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inputData_V_address0, "inputData_V_address0");
    sc_trace(mVcdFile, inputData_V_ce0, "inputData_V_ce0");
    sc_trace(mVcdFile, inputData_V_q0, "inputData_V_q0");
    sc_trace(mVcdFile, output_V, "output_V");
    sc_trace(mVcdFile, output_V_ap_vld, "output_V_ap_vld");
    sc_trace(mVcdFile, p_Val2_s_reg_101, "p_Val2_s_reg_101");
    sc_trace(mVcdFile, p_i_i_reg_113, "p_i_i_reg_113");
    sc_trace(mVcdFile, exitcond_fu_124_p2, "exitcond_fu_124_p2");
    sc_trace(mVcdFile, exitcond_reg_247, "exitcond_reg_247");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_reg_247, "ap_reg_pp0_iter1_exitcond_reg_247");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_exitcond_reg_247, "ap_reg_pp0_iter2_exitcond_reg_247");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_exitcond_reg_247, "ap_reg_pp0_iter3_exitcond_reg_247");
    sc_trace(mVcdFile, ap_reg_pp0_iter4_exitcond_reg_247, "ap_reg_pp0_iter4_exitcond_reg_247");
    sc_trace(mVcdFile, ap_reg_pp0_iter5_exitcond_reg_247, "ap_reg_pp0_iter5_exitcond_reg_247");
    sc_trace(mVcdFile, ap_reg_pp0_iter6_exitcond_reg_247, "ap_reg_pp0_iter6_exitcond_reg_247");
    sc_trace(mVcdFile, tmp_3_fu_130_p1, "tmp_3_fu_130_p1");
    sc_trace(mVcdFile, tmp_3_reg_251, "tmp_3_reg_251");
    sc_trace(mVcdFile, i_V_fu_145_p2, "i_V_fu_145_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, self_weights_V_load_s_fu_175_p3, "self_weights_V_load_s_fu_175_p3");
    sc_trace(mVcdFile, self_weights_V_load_s_reg_267, "self_weights_V_load_s_reg_267");
    sc_trace(mVcdFile, inputData_V_load_reg_272, "inputData_V_load_reg_272");
    sc_trace(mVcdFile, grp_fu_189_p2, "grp_fu_189_p2");
    sc_trace(mVcdFile, p_Val2_1_reg_287, "p_Val2_1_reg_287");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, tmp_8_i_i_cast_fu_140_p1, "tmp_8_i_i_cast_fu_140_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_8_i_i_fu_134_p2, "tmp_8_i_i_fu_134_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_156_p2, "sel_tmp2_fu_156_p2");
    sc_trace(mVcdFile, sel_tmp_fu_151_p2, "sel_tmp_fu_151_p2");
    sc_trace(mVcdFile, tmp_fu_169_p2, "tmp_fu_169_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_161_p3, "sel_tmp1_fu_161_p3");
    sc_trace(mVcdFile, grp_fu_189_p1, "grp_fu_189_p1");
    sc_trace(mVcdFile, tmp_2_i_i_cast_fu_203_p1, "tmp_2_i_i_cast_fu_203_p1");
    sc_trace(mVcdFile, tmp_1_i_i_fu_195_p3, "tmp_1_i_i_fu_195_p3");
    sc_trace(mVcdFile, p_Val2_2_fu_206_p2, "p_Val2_2_fu_206_p2");
    sc_trace(mVcdFile, tmp_2_fu_226_p3, "tmp_2_fu_226_p3");
    sc_trace(mVcdFile, tmp_1_fu_222_p1, "tmp_1_fu_222_p1");
    sc_trace(mVcdFile, p_Val2_4_fu_234_p3, "p_Val2_4_fu_234_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_189_p10, "grp_fu_189_p10");
#endif

    }
    mHdltvinHandle.open("neuronInitAndCompute3HardCoded.hdltvin.dat");
    mHdltvoutHandle.open("neuronInitAndCompute3HardCoded.hdltvout.dat");
}

neuronInitAndCompute3HardCoded::~neuronInitAndCompute3HardCoded() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U;
    delete neuronInitAndCompbkb_U0;
}

void neuronInitAndCompute3HardCoded::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void neuronInitAndCompute3HardCoded::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter7 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_reg_pp0_iter6_exitcond_reg_247.read(), ap_const_lv1_0))) {
        p_Val2_s_reg_101 = p_Val2_2_fu_206_p2.read().range(111, 48);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_s_reg_101 = ap_const_lv64_1000000000000;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_fu_124_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        p_i_i_reg_113 = i_V_fu_145_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_i_i_reg_113 = ap_const_lv3_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_reg_247 = exitcond_reg_247.read();
        exitcond_reg_247 = exitcond_fu_124_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) {
        ap_reg_pp0_iter2_exitcond_reg_247 = ap_reg_pp0_iter1_exitcond_reg_247.read();
        ap_reg_pp0_iter3_exitcond_reg_247 = ap_reg_pp0_iter2_exitcond_reg_247.read();
        ap_reg_pp0_iter4_exitcond_reg_247 = ap_reg_pp0_iter3_exitcond_reg_247.read();
        ap_reg_pp0_iter5_exitcond_reg_247 = ap_reg_pp0_iter4_exitcond_reg_247.read();
        ap_reg_pp0_iter6_exitcond_reg_247 = ap_reg_pp0_iter5_exitcond_reg_247.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_reg_247.read(), ap_const_lv1_0))) {
        inputData_V_load_reg_272 = inputData_V_q0.read();
        self_weights_V_load_s_reg_267 = self_weights_V_load_s_fu_175_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reg_pp0_iter5_exitcond_reg_247.read(), ap_const_lv1_0))) {
        p_Val2_1_reg_287 = grp_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_124_p2.read(), ap_const_lv1_0))) {
        tmp_3_reg_251 = tmp_3_fu_130_p1.read();
    }
}

void neuronInitAndCompute3HardCoded::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void neuronInitAndCompute3HardCoded::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void neuronInitAndCompute3HardCoded::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[2];
}

void neuronInitAndCompute3HardCoded::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_fu_124_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void neuronInitAndCompute3HardCoded::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void neuronInitAndCompute3HardCoded::thread_exitcond_fu_124_p2() {
    exitcond_fu_124_p2 = (!p_i_i_reg_113.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(p_i_i_reg_113.read() == ap_const_lv3_4);
}

void neuronInitAndCompute3HardCoded::thread_grp_fu_189_p1() {
    grp_fu_189_p1 =  (sc_lv<47>) (grp_fu_189_p10.read());
}

void neuronInitAndCompute3HardCoded::thread_grp_fu_189_p10() {
    grp_fu_189_p10 = esl_zext<111,47>(self_weights_V_load_s_reg_267.read());
}

void neuronInitAndCompute3HardCoded::thread_i_V_fu_145_p2() {
    i_V_fu_145_p2 = (!ap_const_lv3_1.is_01() || !p_i_i_reg_113.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(p_i_i_reg_113.read()));
}

void neuronInitAndCompute3HardCoded::thread_inputData_V_address0() {
    inputData_V_address0 =  (sc_lv<2>) (tmp_8_i_i_cast_fu_140_p1.read());
}

void neuronInitAndCompute3HardCoded::thread_inputData_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        inputData_V_ce0 = ap_const_logic_1;
    } else {
        inputData_V_ce0 = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_output_V() {
    output_V = esl_zext<64,63>(p_Val2_4_fu_234_p3.read());
}

void neuronInitAndCompute3HardCoded::thread_output_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        output_V_ap_vld = ap_const_logic_1;
    } else {
        output_V_ap_vld = ap_const_logic_0;
    }
}

void neuronInitAndCompute3HardCoded::thread_p_Val2_2_fu_206_p2() {
    p_Val2_2_fu_206_p2 = (!tmp_2_i_i_cast_fu_203_p1.read().is_01() || !tmp_1_i_i_fu_195_p3.read().is_01())? sc_lv<112>(): (sc_bigint<112>(tmp_2_i_i_cast_fu_203_p1.read()) + sc_biguint<112>(tmp_1_i_i_fu_195_p3.read()));
}

void neuronInitAndCompute3HardCoded::thread_p_Val2_4_fu_234_p3() {
    p_Val2_4_fu_234_p3 = (!tmp_2_fu_226_p3.read()[0].is_01())? sc_lv<63>(): ((tmp_2_fu_226_p3.read()[0].to_bool())? ap_const_lv63_0: tmp_1_fu_222_p1.read());
}

void neuronInitAndCompute3HardCoded::thread_sel_tmp1_fu_161_p3() {
    sel_tmp1_fu_161_p3 = (!sel_tmp2_fu_156_p2.read()[0].is_01())? sc_lv<47>(): ((sel_tmp2_fu_156_p2.read()[0].to_bool())? ap_const_lv47_333333333333: ap_const_lv47_4CCCCCCCCCCC);
}

void neuronInitAndCompute3HardCoded::thread_sel_tmp2_fu_156_p2() {
    sel_tmp2_fu_156_p2 = (!tmp_3_reg_251.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_reg_251.read() == ap_const_lv2_1);
}

void neuronInitAndCompute3HardCoded::thread_sel_tmp_fu_151_p2() {
    sel_tmp_fu_151_p2 = (!tmp_3_reg_251.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_reg_251.read() == ap_const_lv2_2);
}

void neuronInitAndCompute3HardCoded::thread_self_weights_V_load_s_fu_175_p3() {
    self_weights_V_load_s_fu_175_p3 = (!tmp_fu_169_p2.read()[0].is_01())? sc_lv<47>(): ((tmp_fu_169_p2.read()[0].to_bool())? sel_tmp1_fu_161_p3.read(): ap_const_lv47_666666666666);
}

void neuronInitAndCompute3HardCoded::thread_tmp_1_fu_222_p1() {
    tmp_1_fu_222_p1 = p_Val2_s_reg_101.read().range(63-1, 0);
}

void neuronInitAndCompute3HardCoded::thread_tmp_1_i_i_fu_195_p3() {
    tmp_1_i_i_fu_195_p3 = esl_concat<64,48>(p_Val2_s_reg_101.read(), ap_const_lv48_0);
}

void neuronInitAndCompute3HardCoded::thread_tmp_2_fu_226_p3() {
    tmp_2_fu_226_p3 = p_Val2_s_reg_101.read().range(63, 63);
}

void neuronInitAndCompute3HardCoded::thread_tmp_2_i_i_cast_fu_203_p1() {
    tmp_2_i_i_cast_fu_203_p1 = esl_sext<112,111>(p_Val2_1_reg_287.read());
}

void neuronInitAndCompute3HardCoded::thread_tmp_3_fu_130_p1() {
    tmp_3_fu_130_p1 = p_i_i_reg_113.read().range(2-1, 0);
}

void neuronInitAndCompute3HardCoded::thread_tmp_8_i_i_cast_fu_140_p1() {
    tmp_8_i_i_cast_fu_140_p1 = esl_zext<32,2>(tmp_8_i_i_fu_134_p2.read());
}

void neuronInitAndCompute3HardCoded::thread_tmp_8_i_i_fu_134_p2() {
    tmp_8_i_i_fu_134_p2 = (!ap_const_lv2_3.is_01() || !tmp_3_fu_130_p1.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(tmp_3_fu_130_p1.read()));
}

void neuronInitAndCompute3HardCoded::thread_tmp_fu_169_p2() {
    tmp_fu_169_p2 = (sel_tmp2_fu_156_p2.read() | sel_tmp_fu_151_p2.read());
}

void neuronInitAndCompute3HardCoded::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_124_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_fu_124_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void neuronInitAndCompute3HardCoded::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_AWVALID\" :  \"" << s_axi_neuron_hard_io_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_neuron_hard_io_AWREADY\" :  \"" << s_axi_neuron_hard_io_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_AWADDR\" :  \"" << s_axi_neuron_hard_io_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_WVALID\" :  \"" << s_axi_neuron_hard_io_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_WREADY\" :  \"" << s_axi_neuron_hard_io_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_WDATA\" :  \"" << s_axi_neuron_hard_io_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_WSTRB\" :  \"" << s_axi_neuron_hard_io_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_ARVALID\" :  \"" << s_axi_neuron_hard_io_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_ARREADY\" :  \"" << s_axi_neuron_hard_io_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_ARADDR\" :  \"" << s_axi_neuron_hard_io_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_RVALID\" :  \"" << s_axi_neuron_hard_io_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_RREADY\" :  \"" << s_axi_neuron_hard_io_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_RDATA\" :  \"" << s_axi_neuron_hard_io_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_RRESP\" :  \"" << s_axi_neuron_hard_io_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_BVALID\" :  \"" << s_axi_neuron_hard_io_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_neuron_hard_io_BREADY\" :  \"" << s_axi_neuron_hard_io_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_neuron_hard_io_BRESP\" :  \"" << s_axi_neuron_hard_io_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

