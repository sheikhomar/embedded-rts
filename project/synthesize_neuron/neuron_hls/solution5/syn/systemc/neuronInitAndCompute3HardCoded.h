// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _neuronInitAndCompute3HardCoded_HH_
#define _neuronInitAndCompute3HardCoded_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "neuronInitAndCompbkb.h"
#include "neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_NEURON_HARD_IO_DATA_WIDTH = 32>
struct neuronInitAndCompute3HardCoded : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_neuron_hard_io_AWVALID;
    sc_out< sc_logic > s_axi_neuron_hard_io_AWREADY;
    sc_in< sc_uint<C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH> > s_axi_neuron_hard_io_AWADDR;
    sc_in< sc_logic > s_axi_neuron_hard_io_WVALID;
    sc_out< sc_logic > s_axi_neuron_hard_io_WREADY;
    sc_in< sc_uint<C_S_AXI_NEURON_HARD_IO_DATA_WIDTH> > s_axi_neuron_hard_io_WDATA;
    sc_in< sc_uint<C_S_AXI_NEURON_HARD_IO_DATA_WIDTH/8> > s_axi_neuron_hard_io_WSTRB;
    sc_in< sc_logic > s_axi_neuron_hard_io_ARVALID;
    sc_out< sc_logic > s_axi_neuron_hard_io_ARREADY;
    sc_in< sc_uint<C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH> > s_axi_neuron_hard_io_ARADDR;
    sc_out< sc_logic > s_axi_neuron_hard_io_RVALID;
    sc_in< sc_logic > s_axi_neuron_hard_io_RREADY;
    sc_out< sc_uint<C_S_AXI_NEURON_HARD_IO_DATA_WIDTH> > s_axi_neuron_hard_io_RDATA;
    sc_out< sc_lv<2> > s_axi_neuron_hard_io_RRESP;
    sc_out< sc_logic > s_axi_neuron_hard_io_BVALID;
    sc_in< sc_logic > s_axi_neuron_hard_io_BREADY;
    sc_out< sc_lv<2> > s_axi_neuron_hard_io_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    neuronInitAndCompute3HardCoded(sc_module_name name);
    SC_HAS_PROCESS(neuronInitAndCompute3HardCoded);

    ~neuronInitAndCompute3HardCoded();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi<C_S_AXI_NEURON_HARD_IO_ADDR_WIDTH,C_S_AXI_NEURON_HARD_IO_DATA_WIDTH>* neuronInitAndCompute3HardCoded_neuron_hard_io_s_axi_U;
    neuronInitAndCompbkb<1,5,64,47,111>* neuronInitAndCompbkb_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<2> > inputData_V_address0;
    sc_signal< sc_logic > inputData_V_ce0;
    sc_signal< sc_lv<64> > inputData_V_q0;
    sc_signal< sc_lv<64> > output_V;
    sc_signal< sc_logic > output_V_ap_vld;
    sc_signal< sc_lv<64> > p_Val2_s_reg_101;
    sc_signal< sc_lv<3> > p_i_i_reg_113;
    sc_signal< sc_lv<1> > exitcond_fu_124_p2;
    sc_signal< sc_lv<1> > exitcond_reg_247;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_reg_247;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_reg_247;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_reg_247;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter4_exitcond_reg_247;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter5_exitcond_reg_247;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter6_exitcond_reg_247;
    sc_signal< sc_lv<2> > tmp_3_fu_130_p1;
    sc_signal< sc_lv<2> > tmp_3_reg_251;
    sc_signal< sc_lv<3> > i_V_fu_145_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<47> > self_weights_V_load_s_fu_175_p3;
    sc_signal< sc_lv<47> > self_weights_V_load_s_reg_267;
    sc_signal< sc_lv<64> > inputData_V_load_reg_272;
    sc_signal< sc_lv<111> > grp_fu_189_p2;
    sc_signal< sc_lv<111> > p_Val2_1_reg_287;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_lv<32> > tmp_8_i_i_cast_fu_140_p1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<2> > tmp_8_i_i_fu_134_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_156_p2;
    sc_signal< sc_lv<1> > sel_tmp_fu_151_p2;
    sc_signal< sc_lv<1> > tmp_fu_169_p2;
    sc_signal< sc_lv<47> > sel_tmp1_fu_161_p3;
    sc_signal< sc_lv<47> > grp_fu_189_p1;
    sc_signal< sc_lv<112> > tmp_2_i_i_cast_fu_203_p1;
    sc_signal< sc_lv<112> > tmp_1_i_i_fu_195_p3;
    sc_signal< sc_lv<112> > p_Val2_2_fu_206_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_226_p3;
    sc_signal< sc_lv<63> > tmp_1_fu_222_p1;
    sc_signal< sc_lv<63> > p_Val2_4_fu_234_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<111> > grp_fu_189_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_1000000000000;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<47> ap_const_lv47_333333333333;
    static const sc_lv<47> ap_const_lv47_4CCCCCCCCCCC;
    static const sc_lv<47> ap_const_lv47_666666666666;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_6F;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<63> ap_const_lv63_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond_fu_124_p2();
    void thread_grp_fu_189_p1();
    void thread_grp_fu_189_p10();
    void thread_i_V_fu_145_p2();
    void thread_inputData_V_address0();
    void thread_inputData_V_ce0();
    void thread_output_V();
    void thread_output_V_ap_vld();
    void thread_p_Val2_2_fu_206_p2();
    void thread_p_Val2_4_fu_234_p3();
    void thread_sel_tmp1_fu_161_p3();
    void thread_sel_tmp2_fu_156_p2();
    void thread_sel_tmp_fu_151_p2();
    void thread_self_weights_V_load_s_fu_175_p3();
    void thread_tmp_1_fu_222_p1();
    void thread_tmp_1_i_i_fu_195_p3();
    void thread_tmp_2_fu_226_p3();
    void thread_tmp_2_i_i_cast_fu_203_p1();
    void thread_tmp_3_fu_130_p1();
    void thread_tmp_8_i_i_cast_fu_140_p1();
    void thread_tmp_8_i_i_fu_134_p2();
    void thread_tmp_fu_169_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
