// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _neuronInitAndCompute3_HH_
#define _neuronInitAndCompute3_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "neuronInitAndCompbkb.h"
#include "neuronInitAndCompute3_neuron_io_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_NEURON_IO_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_NEURON_IO_DATA_WIDTH = 32>
struct neuronInitAndCompute3 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_neuron_io_AWVALID;
    sc_out< sc_logic > s_axi_neuron_io_AWREADY;
    sc_in< sc_uint<C_S_AXI_NEURON_IO_ADDR_WIDTH> > s_axi_neuron_io_AWADDR;
    sc_in< sc_logic > s_axi_neuron_io_WVALID;
    sc_out< sc_logic > s_axi_neuron_io_WREADY;
    sc_in< sc_uint<C_S_AXI_NEURON_IO_DATA_WIDTH> > s_axi_neuron_io_WDATA;
    sc_in< sc_uint<C_S_AXI_NEURON_IO_DATA_WIDTH/8> > s_axi_neuron_io_WSTRB;
    sc_in< sc_logic > s_axi_neuron_io_ARVALID;
    sc_out< sc_logic > s_axi_neuron_io_ARREADY;
    sc_in< sc_uint<C_S_AXI_NEURON_IO_ADDR_WIDTH> > s_axi_neuron_io_ARADDR;
    sc_out< sc_logic > s_axi_neuron_io_RVALID;
    sc_in< sc_logic > s_axi_neuron_io_RREADY;
    sc_out< sc_uint<C_S_AXI_NEURON_IO_DATA_WIDTH> > s_axi_neuron_io_RDATA;
    sc_out< sc_lv<2> > s_axi_neuron_io_RRESP;
    sc_out< sc_logic > s_axi_neuron_io_BVALID;
    sc_in< sc_logic > s_axi_neuron_io_BREADY;
    sc_out< sc_lv<2> > s_axi_neuron_io_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    neuronInitAndCompute3(sc_module_name name);
    SC_HAS_PROCESS(neuronInitAndCompute3);

    ~neuronInitAndCompute3();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    neuronInitAndCompute3_neuron_io_s_axi<C_S_AXI_NEURON_IO_ADDR_WIDTH,C_S_AXI_NEURON_IO_DATA_WIDTH>* neuronInitAndCompute3_neuron_io_s_axi_U;
    neuronInitAndCompbkb<1,5,64,64,112>* neuronInitAndCompbkb_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<2> > weights_V_address0;
    sc_signal< sc_logic > weights_V_ce0;
    sc_signal< sc_lv<64> > weights_V_q0;
    sc_signal< sc_lv<2> > inputData_V_address0;
    sc_signal< sc_logic > inputData_V_ce0;
    sc_signal< sc_lv<64> > inputData_V_q0;
    sc_signal< sc_lv<64> > output_V;
    sc_signal< sc_logic > output_V_ap_vld;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_125_p2;
    sc_signal< sc_lv<3> > i_V_fu_151_p2;
    sc_signal< sc_lv<3> > i_V_reg_240;
    sc_signal< sc_lv<64> > weights_V_load_reg_245;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > inputData_V_load_reg_250;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<112> > grp_fu_188_p2;
    sc_signal< sc_lv<112> > p_Val2_1_reg_265;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<64> > p_Val2_s_reg_104;
    sc_signal< sc_lv<3> > p_i_i_reg_114;
    sc_signal< sc_lv<32> > tmp_7_i_i_fu_131_p1;
    sc_signal< sc_lv<32> > tmp_8_i_i_cast_fu_146_p1;
    sc_signal< sc_lv<2> > tmp_2_fu_136_p1;
    sc_signal< sc_lv<2> > tmp_8_i_i_fu_140_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_161_p3;
    sc_signal< sc_lv<63> > tmp_fu_157_p1;
    sc_signal< sc_lv<63> > p_Val2_4_fu_169_p3;
    sc_signal< sc_lv<112> > tmp_1_i_i_fu_194_p3;
    sc_signal< sc_lv<112> > p_Val2_2_fu_202_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<63> ap_const_lv63_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_6F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_exitcond_fu_125_p2();
    void thread_i_V_fu_151_p2();
    void thread_inputData_V_address0();
    void thread_inputData_V_ce0();
    void thread_output_V();
    void thread_output_V_ap_vld();
    void thread_p_Val2_2_fu_202_p2();
    void thread_p_Val2_4_fu_169_p3();
    void thread_tmp_1_fu_161_p3();
    void thread_tmp_1_i_i_fu_194_p3();
    void thread_tmp_2_fu_136_p1();
    void thread_tmp_7_i_i_fu_131_p1();
    void thread_tmp_8_i_i_cast_fu_146_p1();
    void thread_tmp_8_i_i_fu_140_p2();
    void thread_tmp_fu_157_p1();
    void thread_weights_V_address0();
    void thread_weights_V_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
