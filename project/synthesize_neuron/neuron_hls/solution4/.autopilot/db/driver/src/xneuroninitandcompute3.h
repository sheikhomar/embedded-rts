// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XNEURONINITANDCOMPUTE3_H
#define XNEURONINITANDCOMPUTE3_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xneuroninitandcompute3_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Neuron_io_BaseAddress;
} XNeuroninitandcompute3_Config;
#endif

typedef struct {
    u32 Neuron_io_BaseAddress;
    u32 IsReady;
} XNeuroninitandcompute3;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XNeuroninitandcompute3_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XNeuroninitandcompute3_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XNeuroninitandcompute3_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XNeuroninitandcompute3_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XNeuroninitandcompute3_Initialize(XNeuroninitandcompute3 *InstancePtr, u16 DeviceId);
XNeuroninitandcompute3_Config* XNeuroninitandcompute3_LookupConfig(u16 DeviceId);
int XNeuroninitandcompute3_CfgInitialize(XNeuroninitandcompute3 *InstancePtr, XNeuroninitandcompute3_Config *ConfigPtr);
#else
int XNeuroninitandcompute3_Initialize(XNeuroninitandcompute3 *InstancePtr, const char* InstanceName);
int XNeuroninitandcompute3_Release(XNeuroninitandcompute3 *InstancePtr);
#endif

void XNeuroninitandcompute3_Start(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_IsDone(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_IsIdle(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_IsReady(XNeuroninitandcompute3 *InstancePtr);
void XNeuroninitandcompute3_EnableAutoRestart(XNeuroninitandcompute3 *InstancePtr);
void XNeuroninitandcompute3_DisableAutoRestart(XNeuroninitandcompute3 *InstancePtr);

u64 XNeuroninitandcompute3_Get_output_V(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_output_V_vld(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_weights_V_BaseAddress(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_weights_V_HighAddress(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_weights_V_TotalBytes(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_weights_V_BitWidth(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_weights_V_Depth(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Write_weights_V_Words(XNeuroninitandcompute3 *InstancePtr, int offset, int *data, int length);
u32 XNeuroninitandcompute3_Read_weights_V_Words(XNeuroninitandcompute3 *InstancePtr, int offset, int *data, int length);
u32 XNeuroninitandcompute3_Write_weights_V_Bytes(XNeuroninitandcompute3 *InstancePtr, int offset, char *data, int length);
u32 XNeuroninitandcompute3_Read_weights_V_Bytes(XNeuroninitandcompute3 *InstancePtr, int offset, char *data, int length);
u32 XNeuroninitandcompute3_Get_inputData_V_BaseAddress(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_inputData_V_HighAddress(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_inputData_V_TotalBytes(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_inputData_V_BitWidth(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Get_inputData_V_Depth(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_Write_inputData_V_Words(XNeuroninitandcompute3 *InstancePtr, int offset, int *data, int length);
u32 XNeuroninitandcompute3_Read_inputData_V_Words(XNeuroninitandcompute3 *InstancePtr, int offset, int *data, int length);
u32 XNeuroninitandcompute3_Write_inputData_V_Bytes(XNeuroninitandcompute3 *InstancePtr, int offset, char *data, int length);
u32 XNeuroninitandcompute3_Read_inputData_V_Bytes(XNeuroninitandcompute3 *InstancePtr, int offset, char *data, int length);

void XNeuroninitandcompute3_InterruptGlobalEnable(XNeuroninitandcompute3 *InstancePtr);
void XNeuroninitandcompute3_InterruptGlobalDisable(XNeuroninitandcompute3 *InstancePtr);
void XNeuroninitandcompute3_InterruptEnable(XNeuroninitandcompute3 *InstancePtr, u32 Mask);
void XNeuroninitandcompute3_InterruptDisable(XNeuroninitandcompute3 *InstancePtr, u32 Mask);
void XNeuroninitandcompute3_InterruptClear(XNeuroninitandcompute3 *InstancePtr, u32 Mask);
u32 XNeuroninitandcompute3_InterruptGetEnabled(XNeuroninitandcompute3 *InstancePtr);
u32 XNeuroninitandcompute3_InterruptGetStatus(XNeuroninitandcompute3 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
