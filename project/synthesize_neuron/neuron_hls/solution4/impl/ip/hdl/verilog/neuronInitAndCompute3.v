// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="neuronInitAndCompute3,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=16,HLS_SYN_FF=1393,HLS_SYN_LUT=856}" *)

module neuronInitAndCompute3 (
        ap_clk,
        ap_rst_n,
        s_axi_neuron_io_AWVALID,
        s_axi_neuron_io_AWREADY,
        s_axi_neuron_io_AWADDR,
        s_axi_neuron_io_WVALID,
        s_axi_neuron_io_WREADY,
        s_axi_neuron_io_WDATA,
        s_axi_neuron_io_WSTRB,
        s_axi_neuron_io_ARVALID,
        s_axi_neuron_io_ARREADY,
        s_axi_neuron_io_ARADDR,
        s_axi_neuron_io_RVALID,
        s_axi_neuron_io_RREADY,
        s_axi_neuron_io_RDATA,
        s_axi_neuron_io_RRESP,
        s_axi_neuron_io_BVALID,
        s_axi_neuron_io_BREADY,
        s_axi_neuron_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_NEURON_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_NEURON_IO_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_NEURON_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_neuron_io_AWVALID;
output   s_axi_neuron_io_AWREADY;
input  [C_S_AXI_NEURON_IO_ADDR_WIDTH - 1:0] s_axi_neuron_io_AWADDR;
input   s_axi_neuron_io_WVALID;
output   s_axi_neuron_io_WREADY;
input  [C_S_AXI_NEURON_IO_DATA_WIDTH - 1:0] s_axi_neuron_io_WDATA;
input  [C_S_AXI_NEURON_IO_WSTRB_WIDTH - 1:0] s_axi_neuron_io_WSTRB;
input   s_axi_neuron_io_ARVALID;
output   s_axi_neuron_io_ARREADY;
input  [C_S_AXI_NEURON_IO_ADDR_WIDTH - 1:0] s_axi_neuron_io_ARADDR;
output   s_axi_neuron_io_RVALID;
input   s_axi_neuron_io_RREADY;
output  [C_S_AXI_NEURON_IO_DATA_WIDTH - 1:0] s_axi_neuron_io_RDATA;
output  [1:0] s_axi_neuron_io_RRESP;
output   s_axi_neuron_io_BVALID;
input   s_axi_neuron_io_BREADY;
output  [1:0] s_axi_neuron_io_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [1:0] weights_V_address0;
reg    weights_V_ce0;
wire   [63:0] weights_V_q0;
wire   [1:0] inputData_V_address0;
reg    inputData_V_ce0;
wire   [63:0] inputData_V_q0;
wire   [63:0] output_V;
reg    output_V_ap_vld;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_125_p2;
wire   [2:0] i_V_fu_151_p2;
reg   [2:0] i_V_reg_240;
reg  signed [63:0] weights_V_load_reg_245;
wire    ap_CS_fsm_state4;
reg  signed [63:0] inputData_V_load_reg_250;
wire    ap_CS_fsm_state5;
wire   [111:0] grp_fu_188_p2;
reg   [111:0] p_Val2_1_reg_265;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [63:0] p_Val2_s_reg_104;
reg   [2:0] p_i_i_reg_114;
wire   [31:0] tmp_7_i_i_fu_131_p1;
wire   [31:0] tmp_8_i_i_cast_fu_146_p1;
wire   [1:0] tmp_2_fu_136_p1;
wire   [1:0] tmp_8_i_i_fu_140_p2;
wire   [0:0] tmp_1_fu_161_p3;
wire   [62:0] tmp_fu_157_p1;
wire   [62:0] p_Val2_4_fu_169_p3;
wire   [111:0] tmp_1_i_i_fu_194_p3;
wire   [111:0] p_Val2_2_fu_202_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

neuronInitAndCompute3_neuron_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_NEURON_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_NEURON_IO_DATA_WIDTH ))
neuronInitAndCompute3_neuron_io_s_axi_U(
    .AWVALID(s_axi_neuron_io_AWVALID),
    .AWREADY(s_axi_neuron_io_AWREADY),
    .AWADDR(s_axi_neuron_io_AWADDR),
    .WVALID(s_axi_neuron_io_WVALID),
    .WREADY(s_axi_neuron_io_WREADY),
    .WDATA(s_axi_neuron_io_WDATA),
    .WSTRB(s_axi_neuron_io_WSTRB),
    .ARVALID(s_axi_neuron_io_ARVALID),
    .ARREADY(s_axi_neuron_io_ARREADY),
    .ARADDR(s_axi_neuron_io_ARADDR),
    .RVALID(s_axi_neuron_io_RVALID),
    .RREADY(s_axi_neuron_io_RREADY),
    .RDATA(s_axi_neuron_io_RDATA),
    .RRESP(s_axi_neuron_io_RRESP),
    .BVALID(s_axi_neuron_io_BVALID),
    .BREADY(s_axi_neuron_io_BREADY),
    .BRESP(s_axi_neuron_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .weights_V_address0(weights_V_address0),
    .weights_V_ce0(weights_V_ce0),
    .weights_V_q0(weights_V_q0),
    .inputData_V_address0(inputData_V_address0),
    .inputData_V_ce0(inputData_V_ce0),
    .inputData_V_q0(inputData_V_q0),
    .output_V(output_V),
    .output_V_ap_vld(output_V_ap_vld)
);

neuronInitAndCompbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 112 ))
neuronInitAndCompbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(inputData_V_load_reg_250),
    .din1(weights_V_load_reg_245),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_s_reg_104 <= {{p_Val2_2_fu_202_p2[111:48]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_Val2_s_reg_104 <= weights_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_i_i_reg_114 <= i_V_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_i_i_reg_114 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_125_p2 == 1'd0))) begin
        i_V_reg_240 <= i_V_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inputData_V_load_reg_250 <= inputData_V_q0;
        weights_V_load_reg_245 <= weights_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_1_reg_265 <= grp_fu_188_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_125_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_125_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputData_V_ce0 = 1'b1;
    end else begin
        inputData_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_125_p2 == 1'd1))) begin
        output_V_ap_vld = 1'b1;
    end else begin
        output_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights_V_address0 = tmp_7_i_i_fu_131_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weights_V_address0 = 32'd0;
    end else begin
        weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        weights_V_ce0 = 1'b1;
    end else begin
        weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_125_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_125_p2 = ((p_i_i_reg_114 == 3'd4) ? 1'b1 : 1'b0);

assign i_V_fu_151_p2 = (3'd1 + p_i_i_reg_114);

assign inputData_V_address0 = tmp_8_i_i_cast_fu_146_p1;

assign output_V = p_Val2_4_fu_169_p3;

assign p_Val2_2_fu_202_p2 = (tmp_1_i_i_fu_194_p3 + p_Val2_1_reg_265);

assign p_Val2_4_fu_169_p3 = ((tmp_1_fu_161_p3[0:0] === 1'b1) ? 63'd0 : tmp_fu_157_p1);

assign tmp_1_fu_161_p3 = p_Val2_s_reg_104[32'd63];

assign tmp_1_i_i_fu_194_p3 = {{p_Val2_s_reg_104}, {48'd0}};

assign tmp_2_fu_136_p1 = p_i_i_reg_114[1:0];

assign tmp_7_i_i_fu_131_p1 = p_i_i_reg_114;

assign tmp_8_i_i_cast_fu_146_p1 = tmp_8_i_i_fu_140_p2;

assign tmp_8_i_i_fu_140_p2 = ($signed(2'd3) + $signed(tmp_2_fu_136_p1));

assign tmp_fu_157_p1 = p_Val2_s_reg_104[62:0];

endmodule //neuronInitAndCompute3
