-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neuronInitAndCompute3 is
generic (
    C_S_AXI_NEURON_IO_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_NEURON_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_neuron_io_AWVALID : IN STD_LOGIC;
    s_axi_neuron_io_AWREADY : OUT STD_LOGIC;
    s_axi_neuron_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_NEURON_IO_ADDR_WIDTH-1 downto 0);
    s_axi_neuron_io_WVALID : IN STD_LOGIC;
    s_axi_neuron_io_WREADY : OUT STD_LOGIC;
    s_axi_neuron_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_NEURON_IO_DATA_WIDTH-1 downto 0);
    s_axi_neuron_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_NEURON_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_neuron_io_ARVALID : IN STD_LOGIC;
    s_axi_neuron_io_ARREADY : OUT STD_LOGIC;
    s_axi_neuron_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_NEURON_IO_ADDR_WIDTH-1 downto 0);
    s_axi_neuron_io_RVALID : OUT STD_LOGIC;
    s_axi_neuron_io_RREADY : IN STD_LOGIC;
    s_axi_neuron_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_NEURON_IO_DATA_WIDTH-1 downto 0);
    s_axi_neuron_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_neuron_io_BVALID : OUT STD_LOGIC;
    s_axi_neuron_io_BREADY : IN STD_LOGIC;
    s_axi_neuron_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of neuronInitAndCompute3 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "neuronInitAndCompute3,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=16,HLS_SYN_FF=1393,HLS_SYN_LUT=856}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal weights_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_V_ce0 : STD_LOGIC;
    signal weights_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inputData_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal inputData_V_ce0 : STD_LOGIC;
    signal inputData_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V_ap_vld : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_151_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_240 : STD_LOGIC_VECTOR (2 downto 0);
    signal weights_V_load_reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal inputData_V_load_reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (111 downto 0);
    signal p_Val2_1_reg_265 : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_s_reg_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_i_i_reg_114 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_i_i_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_cast_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_136_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_i_i_fu_140_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_157_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_4_fu_169_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_i_i_fu_194_p3 : STD_LOGIC_VECTOR (111 downto 0);
    signal p_Val2_2_fu_202_p2 : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component neuronInitAndCompbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (111 downto 0) );
    end component;


    component neuronInitAndCompute3_neuron_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        weights_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        weights_V_ce0 : IN STD_LOGIC;
        weights_V_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        inputData_V_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        inputData_V_ce0 : IN STD_LOGIC;
        inputData_V_q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_V : IN STD_LOGIC_VECTOR (63 downto 0);
        output_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    neuronInitAndCompute3_neuron_io_s_axi_U : component neuronInitAndCompute3_neuron_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_NEURON_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_NEURON_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_neuron_io_AWVALID,
        AWREADY => s_axi_neuron_io_AWREADY,
        AWADDR => s_axi_neuron_io_AWADDR,
        WVALID => s_axi_neuron_io_WVALID,
        WREADY => s_axi_neuron_io_WREADY,
        WDATA => s_axi_neuron_io_WDATA,
        WSTRB => s_axi_neuron_io_WSTRB,
        ARVALID => s_axi_neuron_io_ARVALID,
        ARREADY => s_axi_neuron_io_ARREADY,
        ARADDR => s_axi_neuron_io_ARADDR,
        RVALID => s_axi_neuron_io_RVALID,
        RREADY => s_axi_neuron_io_RREADY,
        RDATA => s_axi_neuron_io_RDATA,
        RRESP => s_axi_neuron_io_RRESP,
        BVALID => s_axi_neuron_io_BVALID,
        BREADY => s_axi_neuron_io_BREADY,
        BRESP => s_axi_neuron_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        weights_V_address0 => weights_V_address0,
        weights_V_ce0 => weights_V_ce0,
        weights_V_q0 => weights_V_q0,
        inputData_V_address0 => inputData_V_address0,
        inputData_V_ce0 => inputData_V_ce0,
        inputData_V_q0 => inputData_V_q0,
        output_V => output_V,
        output_V_ap_vld => output_V_ap_vld);

    neuronInitAndCompbkb_U0 : component neuronInitAndCompbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 112)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => inputData_V_load_reg_250,
        din1 => weights_V_load_reg_245,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_s_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_s_reg_104 <= p_Val2_2_fu_202_p2(111 downto 48);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_s_reg_104 <= weights_V_q0;
            end if; 
        end if;
    end process;

    p_i_i_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_i_i_reg_114 <= i_V_reg_240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_i_i_reg_114 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_125_p2 = ap_const_lv1_0))) then
                i_V_reg_240 <= i_V_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                inputData_V_load_reg_250 <= inputData_V_q0;
                weights_V_load_reg_245 <= weights_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_1_reg_265 <= grp_fu_188_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_125_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_125_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_125_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_125_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_125_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_125_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_125_p2 <= "1" when (p_i_i_reg_114 = ap_const_lv3_4) else "0";
    i_V_fu_151_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(p_i_i_reg_114));
    inputData_V_address0 <= tmp_8_i_i_cast_fu_146_p1(2 - 1 downto 0);

    inputData_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inputData_V_ce0 <= ap_const_logic_1;
        else 
            inputData_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_169_p3),64));

    output_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_125_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_125_p2 = ap_const_lv1_1))) then 
            output_V_ap_vld <= ap_const_logic_1;
        else 
            output_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_2_fu_202_p2 <= std_logic_vector(unsigned(tmp_1_i_i_fu_194_p3) + unsigned(p_Val2_1_reg_265));
    p_Val2_4_fu_169_p3 <= 
        ap_const_lv63_0 when (tmp_1_fu_161_p3(0) = '1') else 
        tmp_fu_157_p1;
    tmp_1_fu_161_p3 <= p_Val2_s_reg_104(63 downto 63);
    tmp_1_i_i_fu_194_p3 <= (p_Val2_s_reg_104 & ap_const_lv48_0);
    tmp_2_fu_136_p1 <= p_i_i_reg_114(2 - 1 downto 0);
    tmp_7_i_i_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_i_i_reg_114),32));
    tmp_8_i_i_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_i_i_fu_140_p2),32));
    tmp_8_i_i_fu_140_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(tmp_2_fu_136_p1));
    tmp_fu_157_p1 <= p_Val2_s_reg_104(63 - 1 downto 0);

    weights_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_7_i_i_fu_131_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights_V_address0 <= tmp_7_i_i_fu_131_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weights_V_address0 <= ap_const_lv32_0(2 - 1 downto 0);
        else 
            weights_V_address0 <= "XX";
        end if; 
    end process;


    weights_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
