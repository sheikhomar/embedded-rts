-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hn_loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    o_0_i_i_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    o_0_i_i_empty_n : IN STD_LOGIC;
    o_0_i_i_read : OUT STD_LOGIC;
    inputData_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputData_ce0 : OUT STD_LOGIC;
    inputData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    o_0_i_i_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    o_0_i_i_out_full_n : IN STD_LOGIC;
    o_0_i_i_out_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hn_loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_311 : STD_LOGIC_VECTOR (9 downto 0) := "1100010001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inputToHiddenWeights_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_2_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_1_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_34_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_34_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_34_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_3_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_55_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_55_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_55_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_5_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_58_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_58_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_58_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_7_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_61_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_61_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_61_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_9_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_6_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_11_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_12_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_13_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_18_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_18_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_18_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_15_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_25_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_25_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_25_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_17_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_17_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_17_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_30_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_30_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_30_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_19_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_19_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_19_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_20_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_20_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_20_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_37_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_37_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_37_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_22_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_22_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_22_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_40_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_40_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_40_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_24_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_24_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_24_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_43_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_43_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_43_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_26_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_26_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_26_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_46_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_46_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_46_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_28_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_28_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_28_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_49_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_49_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_49_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_52_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_52_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_52_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputToHiddenWeights_31_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_31_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_31_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_0_i_i_blk_n : STD_LOGIC;
    signal o_0_i_i_out_blk_n : STD_LOGIC;
    signal i_0_i_i_i_i_reg_562 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_0_i_i_loc1_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_1_fu_592_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_729 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_i_i_i_i_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_i_i_i_i_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond2_i_i_i_i_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_649_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_903 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_655_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal inputData_load_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_i_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal i_0_i_i_i_i_phi_fu_566_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_5_i_i_i_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_i_i_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal sum_i_i_fu_638_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component digitRecognizer_fHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_fIfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_mJfO IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpubkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpucud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpudEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpueOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpufYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpug8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpujbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpukbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpulbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpumb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpupcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpurcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpusc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inputde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuvdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuwdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuzec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuCeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuDeQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hn_loop_proc_inpuGfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inputToHiddenWeights_2_U : component hn_loop_proc_inpubkb
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_2_address0,
        ce0 => inputToHiddenWeights_2_ce0,
        q0 => inputToHiddenWeights_2_q0);

    inputToHiddenWeights_1_U : component hn_loop_proc_inpucud
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_1_address0,
        ce0 => inputToHiddenWeights_1_ce0,
        q0 => inputToHiddenWeights_1_q0);

    inputToHiddenWeights_34_U : component hn_loop_proc_inpudEe
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_34_address0,
        ce0 => inputToHiddenWeights_34_ce0,
        q0 => inputToHiddenWeights_34_q0);

    inputToHiddenWeights_3_U : component hn_loop_proc_inpueOg
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_3_address0,
        ce0 => inputToHiddenWeights_3_ce0,
        q0 => inputToHiddenWeights_3_q0);

    inputToHiddenWeights_55_U : component hn_loop_proc_inpufYi
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_55_address0,
        ce0 => inputToHiddenWeights_55_ce0,
        q0 => inputToHiddenWeights_55_q0);

    inputToHiddenWeights_5_U : component hn_loop_proc_inpug8j
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_5_address0,
        ce0 => inputToHiddenWeights_5_ce0,
        q0 => inputToHiddenWeights_5_q0);

    inputToHiddenWeights_58_U : component hn_loop_proc_inpuhbi
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_58_address0,
        ce0 => inputToHiddenWeights_58_ce0,
        q0 => inputToHiddenWeights_58_q0);

    inputToHiddenWeights_7_U : component hn_loop_proc_inpuibs
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_7_address0,
        ce0 => inputToHiddenWeights_7_ce0,
        q0 => inputToHiddenWeights_7_q0);

    inputToHiddenWeights_61_U : component hn_loop_proc_inpujbC
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_61_address0,
        ce0 => inputToHiddenWeights_61_ce0,
        q0 => inputToHiddenWeights_61_q0);

    inputToHiddenWeights_9_U : component hn_loop_proc_inpukbM
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_9_address0,
        ce0 => inputToHiddenWeights_9_ce0,
        q0 => inputToHiddenWeights_9_q0);

    inputToHiddenWeights_6_U : component hn_loop_proc_inpulbW
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_6_address0,
        ce0 => inputToHiddenWeights_6_ce0,
        q0 => inputToHiddenWeights_6_q0);

    inputToHiddenWeights_11_U : component hn_loop_proc_inpumb6
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_11_address0,
        ce0 => inputToHiddenWeights_11_ce0,
        q0 => inputToHiddenWeights_11_q0);

    inputToHiddenWeights_12_U : component hn_loop_proc_inpuncg
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_12_address0,
        ce0 => inputToHiddenWeights_12_ce0,
        q0 => inputToHiddenWeights_12_q0);

    inputToHiddenWeights_13_U : component hn_loop_proc_inpuocq
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_13_address0,
        ce0 => inputToHiddenWeights_13_ce0,
        q0 => inputToHiddenWeights_13_q0);

    inputToHiddenWeights_18_U : component hn_loop_proc_inpupcA
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_18_address0,
        ce0 => inputToHiddenWeights_18_ce0,
        q0 => inputToHiddenWeights_18_q0);

    inputToHiddenWeights_15_U : component hn_loop_proc_inpuqcK
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_15_address0,
        ce0 => inputToHiddenWeights_15_ce0,
        q0 => inputToHiddenWeights_15_q0);

    inputToHiddenWeights_25_U : component hn_loop_proc_inpurcU
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_25_address0,
        ce0 => inputToHiddenWeights_25_ce0,
        q0 => inputToHiddenWeights_25_q0);

    inputToHiddenWeights_17_U : component hn_loop_proc_inpusc4
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_17_address0,
        ce0 => inputToHiddenWeights_17_ce0,
        q0 => inputToHiddenWeights_17_q0);

    inputToHiddenWeights_30_U : component hn_loop_proc_inputde
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_30_address0,
        ce0 => inputToHiddenWeights_30_ce0,
        q0 => inputToHiddenWeights_30_q0);

    inputToHiddenWeights_19_U : component hn_loop_proc_inpuudo
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_19_address0,
        ce0 => inputToHiddenWeights_19_ce0,
        q0 => inputToHiddenWeights_19_q0);

    inputToHiddenWeights_20_U : component hn_loop_proc_inpuvdy
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_20_address0,
        ce0 => inputToHiddenWeights_20_ce0,
        q0 => inputToHiddenWeights_20_q0);

    inputToHiddenWeights_37_U : component hn_loop_proc_inpuwdI
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_37_address0,
        ce0 => inputToHiddenWeights_37_ce0,
        q0 => inputToHiddenWeights_37_q0);

    inputToHiddenWeights_22_U : component hn_loop_proc_inpuxdS
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_22_address0,
        ce0 => inputToHiddenWeights_22_ce0,
        q0 => inputToHiddenWeights_22_q0);

    inputToHiddenWeights_40_U : component hn_loop_proc_inpuyd2
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_40_address0,
        ce0 => inputToHiddenWeights_40_ce0,
        q0 => inputToHiddenWeights_40_q0);

    inputToHiddenWeights_24_U : component hn_loop_proc_inpuzec
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_24_address0,
        ce0 => inputToHiddenWeights_24_ce0,
        q0 => inputToHiddenWeights_24_q0);

    inputToHiddenWeights_43_U : component hn_loop_proc_inpuAem
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_43_address0,
        ce0 => inputToHiddenWeights_43_ce0,
        q0 => inputToHiddenWeights_43_q0);

    inputToHiddenWeights_26_U : component hn_loop_proc_inpuBew
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_26_address0,
        ce0 => inputToHiddenWeights_26_ce0,
        q0 => inputToHiddenWeights_26_q0);

    inputToHiddenWeights_46_U : component hn_loop_proc_inpuCeG
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_46_address0,
        ce0 => inputToHiddenWeights_46_ce0,
        q0 => inputToHiddenWeights_46_q0);

    inputToHiddenWeights_28_U : component hn_loop_proc_inpuDeQ
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_28_address0,
        ce0 => inputToHiddenWeights_28_ce0,
        q0 => inputToHiddenWeights_28_q0);

    inputToHiddenWeights_49_U : component hn_loop_proc_inpuEe0
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_49_address0,
        ce0 => inputToHiddenWeights_49_ce0,
        q0 => inputToHiddenWeights_49_q0);

    inputToHiddenWeights_52_U : component hn_loop_proc_inpuFfa
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_52_address0,
        ce0 => inputToHiddenWeights_52_ce0,
        q0 => inputToHiddenWeights_52_q0);

    inputToHiddenWeights_31_U : component hn_loop_proc_inpuGfk
    generic map (
        DataWidth => 32,
        AddressRange => 785,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inputToHiddenWeights_31_address0,
        ce0 => inputToHiddenWeights_31_ce0,
        q0 => inputToHiddenWeights_31_q0);

    digitRecognizer_fHfu_U3 : component digitRecognizer_fHfu
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_0_i_i_loc1_reg_573,
        din1 => tmp_7_i_i_i_reg_918,
        ce => ap_const_logic_1,
        dout => grp_fu_583_p2);

    digitRecognizer_fIfE_U4 : component digitRecognizer_fIfE
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_908,
        din1 => inputData_load_reg_913,
        ce => ap_const_logic_1,
        dout => grp_fu_588_p2);

    digitRecognizer_mJfO_U5 : component digitRecognizer_mJfO
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din1 => inputToHiddenWeights_2_q0,
        din2 => inputToHiddenWeights_1_q0,
        din3 => inputToHiddenWeights_34_q0,
        din4 => inputToHiddenWeights_3_q0,
        din5 => inputToHiddenWeights_55_q0,
        din6 => inputToHiddenWeights_5_q0,
        din7 => inputToHiddenWeights_58_q0,
        din8 => inputToHiddenWeights_7_q0,
        din9 => inputToHiddenWeights_61_q0,
        din10 => inputToHiddenWeights_9_q0,
        din11 => inputToHiddenWeights_6_q0,
        din12 => inputToHiddenWeights_11_q0,
        din13 => inputToHiddenWeights_12_q0,
        din14 => inputToHiddenWeights_13_q0,
        din15 => inputToHiddenWeights_18_q0,
        din16 => inputToHiddenWeights_15_q0,
        din17 => inputToHiddenWeights_25_q0,
        din18 => inputToHiddenWeights_17_q0,
        din19 => inputToHiddenWeights_30_q0,
        din20 => inputToHiddenWeights_19_q0,
        din21 => inputToHiddenWeights_20_q0,
        din22 => inputToHiddenWeights_37_q0,
        din23 => inputToHiddenWeights_22_q0,
        din24 => inputToHiddenWeights_40_q0,
        din25 => inputToHiddenWeights_24_q0,
        din26 => inputToHiddenWeights_43_q0,
        din27 => inputToHiddenWeights_26_q0,
        din28 => inputToHiddenWeights_46_q0,
        din29 => inputToHiddenWeights_28_q0,
        din30 => inputToHiddenWeights_49_q0,
        din31 => inputToHiddenWeights_52_q0,
        din32 => inputToHiddenWeights_31_q0,
        din33 => tmp_1_reg_729,
        dout => tmp_fu_655_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_i_i_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond2_i_i_i_i_reg_734 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_0_i_i_i_i_reg_562 <= i_reg_903;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then 
                i_0_i_i_i_i_reg_562 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    sum_0_i_i_loc1_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_reg_pp0_iter1_exitcond2_i_i_i_i_reg_734 = ap_const_lv1_0))) then 
                sum_0_i_i_loc1_reg_573 <= grp_fu_583_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then 
                sum_0_i_i_loc1_reg_573 <= empty;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond2_i_i_i_i_reg_734 <= exitcond2_i_i_i_i_reg_734;
                exitcond2_i_i_i_i_reg_734 <= exitcond2_i_i_i_i_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond2_i_i_i_i_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_reg_903 <= i_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond2_i_i_i_i_reg_734 = ap_const_lv1_0))) then
                inputData_load_reg_913 <= inputData_q0;
                tmp_reg_908 <= tmp_fu_655_p34;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then
                tmp_1_reg_729 <= tmp_1_fu_592_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_i_i_i_reg_734 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                tmp_7_i_i_i_reg_918 <= grp_fu_588_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, o_0_i_i_empty_n, o_0_i_i_out_full_n, exitcond2_i_i_i_i_fu_596_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_i_i_i_i_fu_596_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_i_i_i_i_fu_596_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if (((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(8);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, o_0_i_i_empty_n, o_0_i_i_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n));
    end process;

        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond2_i_i_i_i_fu_596_p2)
    begin
        if ((exitcond2_i_i_i_i_fu_596_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= sum_0_i_i_loc1_reg_573;
    exitcond2_i_i_i_i_fu_596_p2 <= "1" when (i_0_i_i_i_i_phi_fu_566_p4 = ap_const_lv10_311) else "0";

    i_0_i_i_i_i_phi_fu_566_p4_assign_proc : process(i_0_i_i_i_i_reg_562, exitcond2_i_i_i_i_reg_734, ap_CS_fsm_pp0_stage0, i_reg_903, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond2_i_i_i_i_reg_734 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_0_i_i_i_i_phi_fu_566_p4 <= i_reg_903;
        else 
            i_0_i_i_i_i_phi_fu_566_p4 <= i_0_i_i_i_i_reg_562;
        end if; 
    end process;

    i_fu_649_p2 <= std_logic_vector(unsigned(i_0_i_i_i_i_phi_fu_566_p4) + unsigned(ap_const_lv10_1));
    inputData_address0 <= sum_cast_i_i_fu_644_p1(10 - 1 downto 0);

    inputData_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputData_ce0 <= ap_const_logic_1;
        else 
            inputData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_11_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_11_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_12_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_12_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_13_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_13_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_15_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_15_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_17_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_17_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_18_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_18_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_19_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_19_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_1_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_1_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_20_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_20_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_22_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_22_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_24_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_24_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_25_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_25_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_26_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_26_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_28_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_28_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_2_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_2_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_30_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_30_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_31_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_31_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_34_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_34_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_34_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_37_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_37_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_37_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_3_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_3_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_40_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_40_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_40_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_43_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_43_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_43_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_46_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_46_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_46_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_49_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_49_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_49_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_49_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_52_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_52_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_52_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_52_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_55_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_55_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_55_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_55_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_58_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_58_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_58_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_58_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_5_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_5_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_61_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_61_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_61_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_61_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_6_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_6_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_7_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_7_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputToHiddenWeights_9_address0 <= tmp_5_i_i_i_fu_602_p1(10 - 1 downto 0);

    inputToHiddenWeights_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            inputToHiddenWeights_9_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_0_i_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, o_0_i_i_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            o_0_i_i_blk_n <= o_0_i_i_empty_n;
        else 
            o_0_i_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    o_0_i_i_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, o_0_i_i_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            o_0_i_i_out_blk_n <= o_0_i_i_out_full_n;
        else 
            o_0_i_i_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_0_i_i_out_din <= o_0_i_i_dout;

    o_0_i_i_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, o_0_i_i_empty_n, o_0_i_i_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then 
            o_0_i_i_out_write <= ap_const_logic_1;
        else 
            o_0_i_i_out_write <= ap_const_logic_0;
        end if; 
    end process;


    o_0_i_i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, o_0_i_i_empty_n, o_0_i_i_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = o_0_i_i_empty_n) or (ap_const_logic_0 = o_0_i_i_out_full_n))))) then 
            o_0_i_i_read <= ap_const_logic_1;
        else 
            o_0_i_i_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_i_i_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_i_fu_638_p2),32));
    sum_i_i_fu_638_p2 <= std_logic_vector(unsigned(i_0_i_i_i_i_phi_fu_566_p4) + unsigned(ap_const_lv10_3FF));
    tmp_1_fu_592_p1 <= o_0_i_i_dout(5 - 1 downto 0);
    tmp_5_i_i_i_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_i_phi_fu_566_p4),32));
end behav;
