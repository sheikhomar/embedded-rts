-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop_ih_s is
port (
    o_0_i_i : IN STD_LOGIC_VECTOR (5 downto 0);
    inputData_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputData_ce0 : OUT STD_LOGIC;
    inputData_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    inputData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputData_we0 : OUT STD_LOGIC;
    hiddenOut_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hiddenOut_ce0 : OUT STD_LOGIC;
    hiddenOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hiddenOut_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hiddenOut_we0 : OUT STD_LOGIC;
    hiddenOut_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hiddenOut_ce1 : OUT STD_LOGIC;
    hiddenOut_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hiddenOut_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hiddenOut_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    o_0_i_i_ap_vld : IN STD_LOGIC;
    hiddenOut_full_n : IN STD_LOGIC;
    hiddenOut_write : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop_ih_s is 
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal aesl_mux_load_32_785_U0_ap_start : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_ap_done : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_ap_continue : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_ap_idle : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_ap_ready : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_p_channel : STD_LOGIC_VECTOR (31 downto 0);
    signal aesl_mux_load_32_785_U0_p_channel_ap_vld : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_o_0_i_i_channel_din : STD_LOGIC_VECTOR (5 downto 0);
    signal aesl_mux_load_32_785_U0_o_0_i_i_channel_write : STD_LOGIC;
    signal ap_channel_done_p_channel : STD_LOGIC;
    signal p_channel_full_n : STD_LOGIC;
    signal hn_loop_proc_U0_ap_start : STD_LOGIC;
    signal hn_loop_proc_U0_ap_done : STD_LOGIC;
    signal hn_loop_proc_U0_ap_continue : STD_LOGIC;
    signal hn_loop_proc_U0_ap_idle : STD_LOGIC;
    signal hn_loop_proc_U0_ap_ready : STD_LOGIC;
    signal hn_loop_proc_U0_o_0_i_i_read : STD_LOGIC;
    signal hn_loop_proc_U0_inputData_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal hn_loop_proc_U0_inputData_ce0 : STD_LOGIC;
    signal hn_loop_proc_U0_o_0_i_i_out_din : STD_LOGIC_VECTOR (5 downto 0);
    signal hn_loop_proc_U0_o_0_i_i_out_write : STD_LOGIC;
    signal hn_loop_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_sum_0_i_i_loc1_chann : STD_LOGIC;
    signal sum_0_i_i_loc1_chann_full_n : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_ap_start : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_ap_done : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_ap_continue : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_ap_idle : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_ap_ready : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_hiddenOut_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_nn_hls_src_digitRe_U0_hiddenOut_ce0 : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_hiddenOut_we0 : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_hiddenOut_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_nn_hls_src_digitRe_U0_o_0_i_i_read : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_hiddenOut_full_n : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_hiddenOut_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal p_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal p_channel_empty_n : STD_LOGIC;
    signal o_0_i_i_channel_full_n : STD_LOGIC;
    signal o_0_i_i_channel_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal o_0_i_i_channel_empty_n : STD_LOGIC;
    signal o_0_i_i_channel1_full_n : STD_LOGIC;
    signal o_0_i_i_channel1_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal o_0_i_i_channel1_empty_n : STD_LOGIC;
    signal sum_0_i_i_loc1_chann_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_0_i_i_loc1_chann_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_aesl_mux_load_32_785_U0_ap_ready : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_hn_loop_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_hn_loop_proc_U0_ap_ready : STD_LOGIC;
    signal hn_loop_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal aesl_mux_load_32_785_U0_start_full_n : STD_LOGIC;
    signal aesl_mux_load_32_785_U0_start_write : STD_LOGIC;
    signal hn_loop_proc_U0_start_full_n : STD_LOGIC;
    signal hn_loop_proc_U0_start_write : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_start_full_n : STD_LOGIC;
    signal p_nn_hls_src_digitRe_U0_start_write : STD_LOGIC;

    component aesl_mux_load_32_785 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_channel : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_channel_ap_vld : OUT STD_LOGIC;
        o_0_i_i : IN STD_LOGIC_VECTOR (5 downto 0);
        o_0_i_i_channel_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        o_0_i_i_channel_full_n : IN STD_LOGIC;
        o_0_i_i_channel_write : OUT STD_LOGIC );
    end component;


    component hn_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        o_0_i_i_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        o_0_i_i_empty_n : IN STD_LOGIC;
        o_0_i_i_read : OUT STD_LOGIC;
        inputData_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inputData_ce0 : OUT STD_LOGIC;
        inputData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        o_0_i_i_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        o_0_i_i_out_full_n : IN STD_LOGIC;
        o_0_i_i_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component p_nn_hls_src_digitRe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        hiddenOut_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hiddenOut_ce0 : OUT STD_LOGIC;
        hiddenOut_we0 : OUT STD_LOGIC;
        hiddenOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        o_0_i_i_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        o_0_i_i_empty_n : IN STD_LOGIC;
        o_0_i_i_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w6_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    aesl_mux_load_32_785_U0 : component aesl_mux_load_32_785
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => aesl_mux_load_32_785_U0_ap_start,
        ap_done => aesl_mux_load_32_785_U0_ap_done,
        ap_continue => aesl_mux_load_32_785_U0_ap_continue,
        ap_idle => aesl_mux_load_32_785_U0_ap_idle,
        ap_ready => aesl_mux_load_32_785_U0_ap_ready,
        p_channel => aesl_mux_load_32_785_U0_p_channel,
        p_channel_ap_vld => aesl_mux_load_32_785_U0_p_channel_ap_vld,
        o_0_i_i => o_0_i_i,
        o_0_i_i_channel_din => aesl_mux_load_32_785_U0_o_0_i_i_channel_din,
        o_0_i_i_channel_full_n => o_0_i_i_channel_full_n,
        o_0_i_i_channel_write => aesl_mux_load_32_785_U0_o_0_i_i_channel_write);

    hn_loop_proc_U0 : component hn_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => hn_loop_proc_U0_ap_start,
        ap_done => hn_loop_proc_U0_ap_done,
        ap_continue => hn_loop_proc_U0_ap_continue,
        ap_idle => hn_loop_proc_U0_ap_idle,
        ap_ready => hn_loop_proc_U0_ap_ready,
        empty => p_channel_dout,
        o_0_i_i_dout => o_0_i_i_channel_dout,
        o_0_i_i_empty_n => o_0_i_i_channel_empty_n,
        o_0_i_i_read => hn_loop_proc_U0_o_0_i_i_read,
        inputData_address0 => hn_loop_proc_U0_inputData_address0,
        inputData_ce0 => hn_loop_proc_U0_inputData_ce0,
        inputData_q0 => inputData_q0,
        o_0_i_i_out_din => hn_loop_proc_U0_o_0_i_i_out_din,
        o_0_i_i_out_full_n => o_0_i_i_channel1_full_n,
        o_0_i_i_out_write => hn_loop_proc_U0_o_0_i_i_out_write,
        ap_return => hn_loop_proc_U0_ap_return);

    p_nn_hls_src_digitRe_U0 : component p_nn_hls_src_digitRe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_nn_hls_src_digitRe_U0_ap_start,
        ap_done => p_nn_hls_src_digitRe_U0_ap_done,
        ap_continue => p_nn_hls_src_digitRe_U0_ap_continue,
        ap_idle => p_nn_hls_src_digitRe_U0_ap_idle,
        ap_ready => p_nn_hls_src_digitRe_U0_ap_ready,
        p_read => sum_0_i_i_loc1_chann_dout,
        hiddenOut_address0 => p_nn_hls_src_digitRe_U0_hiddenOut_address0,
        hiddenOut_ce0 => p_nn_hls_src_digitRe_U0_hiddenOut_ce0,
        hiddenOut_we0 => p_nn_hls_src_digitRe_U0_hiddenOut_we0,
        hiddenOut_d0 => p_nn_hls_src_digitRe_U0_hiddenOut_d0,
        o_0_i_i_dout => o_0_i_i_channel1_dout,
        o_0_i_i_empty_n => o_0_i_i_channel1_empty_n,
        o_0_i_i_read => p_nn_hls_src_digitRe_U0_o_0_i_i_read);

    p_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => aesl_mux_load_32_785_U0_p_channel,
        if_full_n => p_channel_full_n,
        if_write => aesl_mux_load_32_785_U0_ap_done,
        if_dout => p_channel_dout,
        if_empty_n => p_channel_empty_n,
        if_read => hn_loop_proc_U0_ap_ready);

    o_0_i_i_channel_U : component fifo_w6_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => aesl_mux_load_32_785_U0_o_0_i_i_channel_din,
        if_full_n => o_0_i_i_channel_full_n,
        if_write => aesl_mux_load_32_785_U0_o_0_i_i_channel_write,
        if_dout => o_0_i_i_channel_dout,
        if_empty_n => o_0_i_i_channel_empty_n,
        if_read => hn_loop_proc_U0_o_0_i_i_read);

    o_0_i_i_channel1_U : component fifo_w6_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hn_loop_proc_U0_o_0_i_i_out_din,
        if_full_n => o_0_i_i_channel1_full_n,
        if_write => hn_loop_proc_U0_o_0_i_i_out_write,
        if_dout => o_0_i_i_channel1_dout,
        if_empty_n => o_0_i_i_channel1_empty_n,
        if_read => p_nn_hls_src_digitRe_U0_o_0_i_i_read);

    sum_0_i_i_loc1_chann_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hn_loop_proc_U0_ap_return,
        if_full_n => sum_0_i_i_loc1_chann_full_n,
        if_write => hn_loop_proc_U0_ap_done,
        if_dout => sum_0_i_i_loc1_chann_dout,
        if_empty_n => sum_0_i_i_loc1_chann_empty_n,
        if_read => p_nn_hls_src_digitRe_U0_ap_ready);





    ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_sync_ready))) then 
                    ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready <= ap_sync_aesl_mux_load_32_785_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_hn_loop_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_hn_loop_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_sync_ready))) then 
                    ap_sync_reg_hn_loop_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_hn_loop_proc_U0_ap_ready <= ap_sync_hn_loop_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    aesl_mux_load_32_785_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = aesl_mux_load_32_785_U0_ap_ready) and (ap_const_logic_1 = ap_sync_ready))) then 
                aesl_mux_load_32_785_U0_ap_ready_count <= std_logic_vector(unsigned(aesl_mux_load_32_785_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((aesl_mux_load_32_785_U0_ap_ready = ap_const_logic_1) and (ap_const_logic_0 = ap_sync_ready))) then 
                aesl_mux_load_32_785_U0_ap_ready_count <= std_logic_vector(unsigned(aesl_mux_load_32_785_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    hn_loop_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sync_ready) and (ap_const_logic_0 = hn_loop_proc_U0_ap_ready))) then 
                hn_loop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(hn_loop_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_sync_ready) and (ap_const_logic_1 = hn_loop_proc_U0_ap_ready))) then 
                hn_loop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(hn_loop_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    aesl_mux_load_32_785_U0_ap_continue <= p_channel_full_n;
    aesl_mux_load_32_785_U0_ap_start <= (ap_start and (ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready xor ap_const_logic_1));
    aesl_mux_load_32_785_U0_start_full_n <= ap_const_logic_0;
    aesl_mux_load_32_785_U0_start_write <= ap_const_logic_0;
    ap_channel_done_p_channel <= aesl_mux_load_32_785_U0_ap_done;
    ap_channel_done_sum_0_i_i_loc1_chann <= hn_loop_proc_U0_ap_done;
    ap_done <= p_nn_hls_src_digitRe_U0_ap_done;
    ap_idle <= (aesl_mux_load_32_785_U0_ap_idle and hn_loop_proc_U0_ap_idle and p_nn_hls_src_digitRe_U0_ap_idle and (p_channel_empty_n xor ap_const_logic_1) and (sum_0_i_i_loc1_chann_empty_n xor ap_const_logic_1));
    ap_ready <= ap_sync_ready;
    ap_sync_aesl_mux_load_32_785_U0_ap_ready <= (aesl_mux_load_32_785_U0_ap_ready or ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= p_nn_hls_src_digitRe_U0_ap_done;
    ap_sync_hn_loop_proc_U0_ap_ready <= (hn_loop_proc_U0_ap_ready or ap_sync_reg_hn_loop_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_aesl_mux_load_32_785_U0_ap_ready and ap_sync_hn_loop_proc_U0_ap_ready);
    hiddenOut_address0 <= p_nn_hls_src_digitRe_U0_hiddenOut_address0;
    hiddenOut_address1 <= ap_const_lv5_0;
    hiddenOut_ce0 <= p_nn_hls_src_digitRe_U0_hiddenOut_ce0;
    hiddenOut_ce1 <= ap_const_logic_0;
    hiddenOut_d0 <= p_nn_hls_src_digitRe_U0_hiddenOut_d0;
    hiddenOut_d1 <= ap_const_lv32_0;
    hiddenOut_we0 <= p_nn_hls_src_digitRe_U0_hiddenOut_we0;
    hiddenOut_we1 <= ap_const_logic_0;
    hiddenOut_write <= p_nn_hls_src_digitRe_U0_hiddenOut_write;
    hn_loop_proc_U0_ap_continue <= sum_0_i_i_loc1_chann_full_n;
    hn_loop_proc_U0_ap_start <= (p_channel_empty_n and ap_start and (ap_sync_reg_hn_loop_proc_U0_ap_ready xor ap_const_logic_1));
    hn_loop_proc_U0_start_full_n <= ap_const_logic_0;
    hn_loop_proc_U0_start_write <= ap_const_logic_0;
    inputData_address0 <= hn_loop_proc_U0_inputData_address0;
    inputData_ce0 <= hn_loop_proc_U0_inputData_ce0;
    inputData_d0 <= ap_const_lv32_0;
    inputData_we0 <= ap_const_logic_0;
    p_nn_hls_src_digitRe_U0_ap_continue <= ap_continue;
    p_nn_hls_src_digitRe_U0_ap_start <= sum_0_i_i_loc1_chann_empty_n;
    p_nn_hls_src_digitRe_U0_hiddenOut_full_n <= hiddenOut_full_n;
    p_nn_hls_src_digitRe_U0_hiddenOut_write <= ap_const_logic_0;
    p_nn_hls_src_digitRe_U0_start_full_n <= ap_const_logic_0;
    p_nn_hls_src_digitRe_U0_start_write <= ap_const_logic_0;
end behav;
