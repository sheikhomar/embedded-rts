-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_nn_hls_src_digitRe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    hiddenOut_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hiddenOut_ce0 : OUT STD_LOGIC;
    hiddenOut_we0 : OUT STD_LOGIC;
    hiddenOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o_0_i_i_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    o_0_i_i_empty_n : IN STD_LOGIC;
    o_0_i_i_read : OUT STD_LOGIC );
end;


architecture behav of p_nn_hls_src_digitRe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_0_i_i_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal notlhs_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_136 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_141 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_fu_121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read_to_int_fu_74_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_78_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_88_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component digitRecognizer_fKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    digitRecognizer_fKfY_U42 : component digitRecognizer_fKfY
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => p_read,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_34_fu_68_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                notlhs_reg_131 <= notlhs_fu_92_p2;
                notrhs_reg_136 <= notrhs_fu_98_p2;
                tmp_34_reg_141 <= tmp_34_fu_68_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    hiddenOut_address0 <= tmp_i_i_fu_121_p1(5 - 1 downto 0);

    hiddenOut_ce0_assign_proc : process(o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then 
            hiddenOut_ce0 <= ap_const_logic_1;
        else 
            hiddenOut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hiddenOut_d0 <= 
        ap_const_lv32_0 when (tmp_35_fu_108_p2(0) = '1') else 
        p_read;

    hiddenOut_we0_assign_proc : process(o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then 
            hiddenOut_we0 <= ap_const_logic_1;
        else 
            hiddenOut_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_92_p2 <= "0" when (tmp_fu_78_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_98_p2 <= "1" when (tmp_2_fu_88_p1 = ap_const_lv23_0) else "0";

    o_0_i_i_blk_n_assign_proc : process(o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            o_0_i_i_blk_n <= o_0_i_i_empty_n;
        else 
            o_0_i_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    o_0_i_i_read_assign_proc : process(o_0_i_i_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (o_0_i_i_empty_n = ap_const_logic_1))) then 
            o_0_i_i_read <= ap_const_logic_1;
        else 
            o_0_i_i_read <= ap_const_logic_0;
        end if; 
    end process;

    p_read_to_int_fu_74_p1 <= p_read;
    tmp_2_fu_88_p1 <= p_read_to_int_fu_74_p1(23 - 1 downto 0);
    tmp_35_fu_108_p2 <= (tmp_s_fu_104_p2 and tmp_34_reg_141);
    tmp_fu_78_p4 <= p_read_to_int_fu_74_p1(30 downto 23);
    tmp_i_i_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_0_i_i_dout),32));
    tmp_s_fu_104_p2 <= (notrhs_reg_136 or notlhs_reg_131);
end behav;
