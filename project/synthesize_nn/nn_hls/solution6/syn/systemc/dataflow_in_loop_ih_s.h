// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dataflow_in_loop_ih_s_HH_
#define _dataflow_in_loop_ih_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "aesl_mux_load_32_785.h"
#include "hn_loop_proc.h"
#include "p_nn_hls_src_digitRe.h"
#include "fifo_w32_d2_A.h"
#include "fifo_w6_d1_A.h"

namespace ap_rtl {

struct dataflow_in_loop_ih_s : public sc_module {
    // Port declarations 26
    sc_in< sc_lv<6> > o_0_i_i;
    sc_out< sc_lv<10> > inputData_address0;
    sc_out< sc_logic > inputData_ce0;
    sc_out< sc_lv<32> > inputData_d0;
    sc_in< sc_lv<32> > inputData_q0;
    sc_out< sc_logic > inputData_we0;
    sc_out< sc_lv<5> > hiddenOut_address0;
    sc_out< sc_logic > hiddenOut_ce0;
    sc_out< sc_lv<32> > hiddenOut_d0;
    sc_in< sc_lv<32> > hiddenOut_q0;
    sc_out< sc_logic > hiddenOut_we0;
    sc_out< sc_lv<5> > hiddenOut_address1;
    sc_out< sc_logic > hiddenOut_ce1;
    sc_out< sc_lv<32> > hiddenOut_d1;
    sc_in< sc_lv<32> > hiddenOut_q1;
    sc_out< sc_logic > hiddenOut_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > o_0_i_i_ap_vld;
    sc_in< sc_logic > hiddenOut_full_n;
    sc_out< sc_logic > hiddenOut_write;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    dataflow_in_loop_ih_s(sc_module_name name);
    SC_HAS_PROCESS(dataflow_in_loop_ih_s);

    ~dataflow_in_loop_ih_s();

    sc_trace_file* mVcdFile;

    aesl_mux_load_32_785* aesl_mux_load_32_785_U0;
    hn_loop_proc* hn_loop_proc_U0;
    p_nn_hls_src_digitRe* p_nn_hls_src_digitRe_U0;
    fifo_w32_d2_A* p_channel_U;
    fifo_w6_d1_A* o_0_i_i_channel_U;
    fifo_w6_d1_A* o_0_i_i_channel1_U;
    fifo_w32_d2_A* sum_0_i_i_loc1_chann_U;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_ap_start;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_ap_done;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_ap_continue;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_ap_idle;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_ap_ready;
    sc_signal< sc_lv<32> > aesl_mux_load_32_785_U0_p_channel;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_p_channel_ap_vld;
    sc_signal< sc_lv<6> > aesl_mux_load_32_785_U0_o_0_i_i_channel_din;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_o_0_i_i_channel_write;
    sc_signal< sc_logic > ap_channel_done_p_channel;
    sc_signal< sc_logic > p_channel_full_n;
    sc_signal< sc_logic > hn_loop_proc_U0_ap_start;
    sc_signal< sc_logic > hn_loop_proc_U0_ap_done;
    sc_signal< sc_logic > hn_loop_proc_U0_ap_continue;
    sc_signal< sc_logic > hn_loop_proc_U0_ap_idle;
    sc_signal< sc_logic > hn_loop_proc_U0_ap_ready;
    sc_signal< sc_logic > hn_loop_proc_U0_o_0_i_i_read;
    sc_signal< sc_lv<10> > hn_loop_proc_U0_inputData_address0;
    sc_signal< sc_logic > hn_loop_proc_U0_inputData_ce0;
    sc_signal< sc_lv<6> > hn_loop_proc_U0_o_0_i_i_out_din;
    sc_signal< sc_logic > hn_loop_proc_U0_o_0_i_i_out_write;
    sc_signal< sc_lv<32> > hn_loop_proc_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_sum_0_i_i_loc1_chann;
    sc_signal< sc_logic > sum_0_i_i_loc1_chann_full_n;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_ap_start;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_ap_done;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_ap_continue;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_ap_idle;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_ap_ready;
    sc_signal< sc_lv<5> > p_nn_hls_src_digitRe_U0_hiddenOut_address0;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_hiddenOut_ce0;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_hiddenOut_we0;
    sc_signal< sc_lv<32> > p_nn_hls_src_digitRe_U0_hiddenOut_d0;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_o_0_i_i_read;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_hiddenOut_full_n;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_hiddenOut_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_lv<32> > p_channel_dout;
    sc_signal< sc_logic > p_channel_empty_n;
    sc_signal< sc_logic > o_0_i_i_channel_full_n;
    sc_signal< sc_lv<6> > o_0_i_i_channel_dout;
    sc_signal< sc_logic > o_0_i_i_channel_empty_n;
    sc_signal< sc_logic > o_0_i_i_channel1_full_n;
    sc_signal< sc_lv<6> > o_0_i_i_channel1_dout;
    sc_signal< sc_logic > o_0_i_i_channel1_empty_n;
    sc_signal< sc_lv<32> > sum_0_i_i_loc1_chann_dout;
    sc_signal< sc_logic > sum_0_i_i_loc1_chann_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_aesl_mux_load_32_785_U0_ap_ready;
    sc_signal< sc_lv<2> > aesl_mux_load_32_785_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_hn_loop_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_hn_loop_proc_U0_ap_ready;
    sc_signal< sc_lv<2> > hn_loop_proc_U0_ap_ready_count;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_start_full_n;
    sc_signal< sc_logic > aesl_mux_load_32_785_U0_start_write;
    sc_signal< sc_logic > hn_loop_proc_U0_start_full_n;
    sc_signal< sc_logic > hn_loop_proc_U0_start_write;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_start_full_n;
    sc_signal< sc_logic > p_nn_hls_src_digitRe_U0_start_write;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_aesl_mux_load_32_785_U0_ap_continue();
    void thread_aesl_mux_load_32_785_U0_ap_start();
    void thread_aesl_mux_load_32_785_U0_start_full_n();
    void thread_aesl_mux_load_32_785_U0_start_write();
    void thread_ap_channel_done_p_channel();
    void thread_ap_channel_done_sum_0_i_i_loc1_chann();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_aesl_mux_load_32_785_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_hn_loop_proc_U0_ap_ready();
    void thread_ap_sync_ready();
    void thread_hiddenOut_address0();
    void thread_hiddenOut_address1();
    void thread_hiddenOut_ce0();
    void thread_hiddenOut_ce1();
    void thread_hiddenOut_d0();
    void thread_hiddenOut_d1();
    void thread_hiddenOut_we0();
    void thread_hiddenOut_we1();
    void thread_hiddenOut_write();
    void thread_hn_loop_proc_U0_ap_continue();
    void thread_hn_loop_proc_U0_ap_start();
    void thread_hn_loop_proc_U0_start_full_n();
    void thread_hn_loop_proc_U0_start_write();
    void thread_inputData_address0();
    void thread_inputData_ce0();
    void thread_inputData_d0();
    void thread_inputData_we0();
    void thread_p_nn_hls_src_digitRe_U0_ap_continue();
    void thread_p_nn_hls_src_digitRe_U0_ap_start();
    void thread_p_nn_hls_src_digitRe_U0_hiddenOut_full_n();
    void thread_p_nn_hls_src_digitRe_U0_hiddenOut_write();
    void thread_p_nn_hls_src_digitRe_U0_start_full_n();
    void thread_p_nn_hls_src_digitRe_U0_start_write();
};

}

using namespace ap_rtl;

#endif
