// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ih_loop_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ih_loop_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ih_loop_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> ih_loop_proc::ap_ST_fsm_state1 = "1";
const sc_lv<3> ih_loop_proc::ap_ST_fsm_state2 = "10";
const sc_lv<3> ih_loop_proc::ap_ST_fsm_state3 = "100";
const sc_lv<32> ih_loop_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ih_loop_proc::ap_const_lv32_1 = "1";
const sc_lv<6> ih_loop_proc::ap_const_lv6_0 = "000000";
const sc_lv<32> ih_loop_proc::ap_const_lv32_2 = "10";
const sc_lv<1> ih_loop_proc::ap_const_lv1_0 = "0";
const sc_lv<6> ih_loop_proc::ap_const_lv6_20 = "100000";
const sc_lv<6> ih_loop_proc::ap_const_lv6_1 = "1";
const sc_lv<1> ih_loop_proc::ap_const_lv1_1 = "1";
const bool ih_loop_proc::ap_const_boolean_1 = true;

ih_loop_proc::ih_loop_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_dataflow_in_loop_ih_s_fu_104 = new dataflow_in_loop_ih_s("grp_dataflow_in_loop_ih_s_fu_104");
    grp_dataflow_in_loop_ih_s_fu_104->o_0_i_i(o_0_i_i_reg_92);
    grp_dataflow_in_loop_ih_s_fu_104->inputData_address0(grp_dataflow_in_loop_ih_s_fu_104_inputData_address0);
    grp_dataflow_in_loop_ih_s_fu_104->inputData_ce0(grp_dataflow_in_loop_ih_s_fu_104_inputData_ce0);
    grp_dataflow_in_loop_ih_s_fu_104->inputData_d0(grp_dataflow_in_loop_ih_s_fu_104_inputData_d0);
    grp_dataflow_in_loop_ih_s_fu_104->inputData_q0(inputData_q0);
    grp_dataflow_in_loop_ih_s_fu_104->inputData_we0(grp_dataflow_in_loop_ih_s_fu_104_inputData_we0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_address0(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_ce0(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_d0(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_q0(ap_var_for_const0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_we0(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_address1(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address1);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_ce1(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce1);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_d1(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d1);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_q1(ap_var_for_const0);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_we1(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we1);
    grp_dataflow_in_loop_ih_s_fu_104->ap_clk(ap_clk);
    grp_dataflow_in_loop_ih_s_fu_104->ap_rst(ap_rst);
    grp_dataflow_in_loop_ih_s_fu_104->o_0_i_i_ap_vld(ap_var_for_const1);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_full_n(ap_var_for_const2);
    grp_dataflow_in_loop_ih_s_fu_104->hiddenOut_write(grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_write);
    grp_dataflow_in_loop_ih_s_fu_104->ap_done(grp_dataflow_in_loop_ih_s_fu_104_ap_done);
    grp_dataflow_in_loop_ih_s_fu_104->ap_start(grp_dataflow_in_loop_ih_s_fu_104_ap_start);
    grp_dataflow_in_loop_ih_s_fu_104->ap_ready(grp_dataflow_in_loop_ih_s_fu_104_ap_ready);
    grp_dataflow_in_loop_ih_s_fu_104->ap_idle(grp_dataflow_in_loop_ih_s_fu_104_ap_idle);
    grp_dataflow_in_loop_ih_s_fu_104->ap_continue(grp_dataflow_in_loop_ih_s_fu_104_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_i_i_fu_178_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_i_i_fu_178_p2 );

    SC_METHOD(thread_ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_ap_ready );
    sensitive << ( ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready );

    SC_METHOD(thread_exitcond3_i_i_fu_178_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( o_0_i_i_reg_92 );

    SC_METHOD(thread_grp_dataflow_in_loop_ih_s_fu_104_ap_continue);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_ap_done );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_dataflow_in_loop_ih_s_fu_104_ap_start);
    sensitive << ( ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start );

    SC_METHOD(thread_hiddenOut_address0);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_hiddenOut_ce0);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_hiddenOut_d0);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_hiddenOut_we0);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inputData_address0);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_inputData_address0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_inputData_ce0);
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_inputData_ce0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_o_fu_184_p2);
    sensitive << ( o_0_i_i_reg_92 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_dataflow_in_loop_ih_s_fu_104_ap_done );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_i_i_fu_178_p2 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start = SC_LOGIC_0;
    ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ih_loop_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, hiddenOut_address0, "(port)hiddenOut_address0");
    sc_trace(mVcdFile, hiddenOut_ce0, "(port)hiddenOut_ce0");
    sc_trace(mVcdFile, hiddenOut_we0, "(port)hiddenOut_we0");
    sc_trace(mVcdFile, hiddenOut_d0, "(port)hiddenOut_d0");
    sc_trace(mVcdFile, inputData_address0, "(port)inputData_address0");
    sc_trace(mVcdFile, inputData_ce0, "(port)inputData_ce0");
    sc_trace(mVcdFile, inputData_q0, "(port)inputData_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, o_fu_184_p2, "o_fu_184_p2");
    sc_trace(mVcdFile, o_reg_193, "o_reg_193");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_inputData_address0, "grp_dataflow_in_loop_ih_s_fu_104_inputData_address0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_inputData_ce0, "grp_dataflow_in_loop_ih_s_fu_104_inputData_ce0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_inputData_d0, "grp_dataflow_in_loop_ih_s_fu_104_inputData_d0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_inputData_we0, "grp_dataflow_in_loop_ih_s_fu_104_inputData_we0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address0, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce0, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d0, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we0, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we0");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address1, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address1");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce1, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce1");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d1, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d1");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we1, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we1");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_write, "grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_write");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_ap_done, "grp_dataflow_in_loop_ih_s_fu_104_ap_done");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_ap_start, "grp_dataflow_in_loop_ih_s_fu_104_ap_start");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_ap_ready, "grp_dataflow_in_loop_ih_s_fu_104_ap_ready");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_ap_idle, "grp_dataflow_in_loop_ih_s_fu_104_ap_idle");
    sc_trace(mVcdFile, grp_dataflow_in_loop_ih_s_fu_104_ap_continue, "grp_dataflow_in_loop_ih_s_fu_104_ap_continue");
    sc_trace(mVcdFile, o_0_i_i_reg_92, "o_0_i_i_reg_92");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start, "ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start");
    sc_trace(mVcdFile, exitcond3_i_i_fu_178_p2, "exitcond3_i_i_fu_178_p2");
    sc_trace(mVcdFile, ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready, "ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready, "ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

ih_loop_proc::~ih_loop_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_dataflow_in_loop_ih_s_fu_104;
}

void ih_loop_proc::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void ih_loop_proc::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_0;
}

void ih_loop_proc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_0;
}

void ih_loop_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(exitcond3_i_i_fu_178_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
              esl_seteq<1,1,1>(exitcond3_i_i_fu_178_p2.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready.read())))) {
            ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dataflow_in_loop_ih_s_fu_104_ap_ready.read())) {
            ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(grp_dataflow_in_loop_ih_s_fu_104_ap_done.read(), ap_const_logic_1)) {
                ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dataflow_in_loop_ih_s_fu_104_ap_ready.read())) {
                ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_dataflow_in_loop_ih_s_fu_104_ap_done.read(), ap_const_logic_1))) {
        o_0_i_i_reg_92 = o_reg_193.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        o_0_i_i_reg_92 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        o_reg_193 = o_fu_184_p2.read();
    }
}

void ih_loop_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ih_loop_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ih_loop_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ih_loop_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void ih_loop_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_i_i_fu_178_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void ih_loop_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ih_loop_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_i_i_fu_178_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ih_loop_proc::thread_ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_ready.read())) {
        ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready = grp_dataflow_in_loop_ih_s_fu_104_ap_ready.read();
    } else {
        ap_sync_grp_dataflow_in_loop_ih_s_fu_104_ap_ready = ap_const_logic_1;
    }
}

void ih_loop_proc::thread_exitcond3_i_i_fu_178_p2() {
    exitcond3_i_i_fu_178_p2 = (!o_0_i_i_reg_92.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(o_0_i_i_reg_92.read() == ap_const_lv6_20);
}

void ih_loop_proc::thread_grp_dataflow_in_loop_ih_s_fu_104_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(grp_dataflow_in_loop_ih_s_fu_104_ap_done.read(), ap_const_logic_1))) {
        grp_dataflow_in_loop_ih_s_fu_104_ap_continue = ap_const_logic_1;
    } else {
        grp_dataflow_in_loop_ih_s_fu_104_ap_continue = ap_const_logic_0;
    }
}

void ih_loop_proc::thread_grp_dataflow_in_loop_ih_s_fu_104_ap_start() {
    grp_dataflow_in_loop_ih_s_fu_104_ap_start = ap_reg_grp_dataflow_in_loop_ih_s_fu_104_ap_start.read();
}

void ih_loop_proc::thread_hiddenOut_address0() {
    hiddenOut_address0 = grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_address0.read();
}

void ih_loop_proc::thread_hiddenOut_ce0() {
    hiddenOut_ce0 = grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_ce0.read();
}

void ih_loop_proc::thread_hiddenOut_d0() {
    hiddenOut_d0 = grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_d0.read();
}

void ih_loop_proc::thread_hiddenOut_we0() {
    hiddenOut_we0 = grp_dataflow_in_loop_ih_s_fu_104_hiddenOut_we0.read();
}

void ih_loop_proc::thread_inputData_address0() {
    inputData_address0 = grp_dataflow_in_loop_ih_s_fu_104_inputData_address0.read();
}

void ih_loop_proc::thread_inputData_ce0() {
    inputData_ce0 = grp_dataflow_in_loop_ih_s_fu_104_inputData_ce0.read();
}

void ih_loop_proc::thread_o_fu_184_p2() {
    o_fu_184_p2 = (!o_0_i_i_reg_92.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(o_0_i_i_reg_92.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void ih_loop_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_i_i_fu_178_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(grp_dataflow_in_loop_ih_s_fu_104_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

