// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _p_nn_hls_src_digitRe_HH_
#define _p_nn_hls_src_digitRe_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "digitRecognizer_fKfY.h"

namespace ap_rtl {

struct p_nn_hls_src_digitRe : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > p_read;
    sc_out< sc_lv<5> > hiddenOut_address0;
    sc_out< sc_logic > hiddenOut_ce0;
    sc_out< sc_logic > hiddenOut_we0;
    sc_out< sc_lv<32> > hiddenOut_d0;
    sc_in< sc_lv<6> > o_0_i_i_dout;
    sc_in< sc_logic > o_0_i_i_empty_n;
    sc_out< sc_logic > o_0_i_i_read;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    p_nn_hls_src_digitRe(sc_module_name name);
    SC_HAS_PROCESS(p_nn_hls_src_digitRe);

    ~p_nn_hls_src_digitRe();

    sc_trace_file* mVcdFile;

    digitRecognizer_fKfY<1,1,32,32,1>* digitRecognizer_fKfY_U42;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > o_0_i_i_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > notlhs_fu_92_p2;
    sc_signal< sc_lv<1> > notlhs_reg_131;
    sc_signal< sc_lv<1> > notrhs_fu_98_p2;
    sc_signal< sc_lv<1> > notrhs_reg_136;
    sc_signal< sc_lv<1> > tmp_34_fu_68_p2;
    sc_signal< sc_lv<1> > tmp_34_reg_141;
    sc_signal< sc_lv<32> > tmp_i_i_fu_121_p1;
    sc_signal< sc_lv<32> > p_read_to_int_fu_74_p1;
    sc_signal< sc_lv<8> > tmp_fu_78_p4;
    sc_signal< sc_lv<23> > tmp_2_fu_88_p1;
    sc_signal< sc_lv<1> > tmp_s_fu_104_p2;
    sc_signal< sc_lv<1> > tmp_35_fu_108_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_hiddenOut_address0();
    void thread_hiddenOut_ce0();
    void thread_hiddenOut_d0();
    void thread_hiddenOut_we0();
    void thread_notlhs_fu_92_p2();
    void thread_notrhs_fu_98_p2();
    void thread_o_0_i_i_blk_n();
    void thread_o_0_i_i_read();
    void thread_p_read_to_int_fu_74_p1();
    void thread_tmp_2_fu_88_p1();
    void thread_tmp_35_fu_108_p2();
    void thread_tmp_fu_78_p4();
    void thread_tmp_i_i_fu_121_p1();
    void thread_tmp_s_fu_104_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
