// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_nn_hls_src_digitRe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        hiddenOut_address0,
        hiddenOut_ce0,
        hiddenOut_we0,
        hiddenOut_d0,
        o_0_i_i_dout,
        o_0_i_i_empty_n,
        o_0_i_i_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [4:0] hiddenOut_address0;
output   hiddenOut_ce0;
output   hiddenOut_we0;
output  [31:0] hiddenOut_d0;
input  [5:0] o_0_i_i_dout;
input   o_0_i_i_empty_n;
output   o_0_i_i_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hiddenOut_ce0;
reg hiddenOut_we0;
reg o_0_i_i_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    o_0_i_i_blk_n;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
wire   [0:0] notlhs_fu_92_p2;
reg   [0:0] notlhs_reg_131;
wire   [0:0] notrhs_fu_98_p2;
reg   [0:0] notrhs_reg_136;
wire   [0:0] tmp_34_fu_68_p2;
reg   [0:0] tmp_34_reg_141;
wire   [31:0] tmp_i_i_fu_121_p1;
wire   [31:0] p_read_to_int_fu_74_p1;
wire   [7:0] tmp_fu_78_p4;
wire   [22:0] tmp_2_fu_88_p1;
wire   [0:0] tmp_s_fu_104_p2;
wire   [0:0] tmp_35_fu_108_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

digitRecognizer_fKfY #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
digitRecognizer_fKfY_U42(
    .din0(p_read),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_34_fu_68_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        notlhs_reg_131 <= notlhs_fu_92_p2;
        notrhs_reg_136 <= notrhs_fu_98_p2;
        tmp_34_reg_141 <= tmp_34_fu_68_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
        hiddenOut_ce0 = 1'b1;
    end else begin
        hiddenOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
        hiddenOut_we0 = 1'b1;
    end else begin
        hiddenOut_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_0_i_i_blk_n = o_0_i_i_empty_n;
    end else begin
        o_0_i_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
        o_0_i_i_read = 1'b1;
    end else begin
        o_0_i_i_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (o_0_i_i_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign hiddenOut_address0 = tmp_i_i_fu_121_p1;

assign hiddenOut_d0 = ((tmp_35_fu_108_p2[0:0] === 1'b1) ? 32'd0 : p_read);

assign notlhs_fu_92_p2 = ((tmp_fu_78_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_98_p2 = ((tmp_2_fu_88_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_read_to_int_fu_74_p1 = p_read;

assign tmp_2_fu_88_p1 = p_read_to_int_fu_74_p1[22:0];

assign tmp_35_fu_108_p2 = (tmp_s_fu_104_p2 & tmp_34_reg_141);

assign tmp_fu_78_p4 = {{p_read_to_int_fu_74_p1[30:23]}};

assign tmp_i_i_fu_121_p1 = o_0_i_i_dout;

assign tmp_s_fu_104_p2 = (notrhs_reg_136 | notlhs_reg_131);

endmodule //p_nn_hls_src_digitRe
