// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dataflow_in_loop_ih_s (
        o_0_i_i,
        inputData_address0,
        inputData_ce0,
        inputData_d0,
        inputData_q0,
        inputData_we0,
        hiddenOut_address0,
        hiddenOut_ce0,
        hiddenOut_d0,
        hiddenOut_q0,
        hiddenOut_we0,
        hiddenOut_address1,
        hiddenOut_ce1,
        hiddenOut_d1,
        hiddenOut_q1,
        hiddenOut_we1,
        ap_clk,
        ap_rst,
        o_0_i_i_ap_vld,
        hiddenOut_full_n,
        hiddenOut_write,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [5:0] o_0_i_i;
output  [9:0] inputData_address0;
output   inputData_ce0;
output  [31:0] inputData_d0;
input  [31:0] inputData_q0;
output   inputData_we0;
output  [4:0] hiddenOut_address0;
output   hiddenOut_ce0;
output  [31:0] hiddenOut_d0;
input  [31:0] hiddenOut_q0;
output   hiddenOut_we0;
output  [4:0] hiddenOut_address1;
output   hiddenOut_ce1;
output  [31:0] hiddenOut_d1;
input  [31:0] hiddenOut_q1;
output   hiddenOut_we1;
input   ap_clk;
input   ap_rst;
input   o_0_i_i_ap_vld;
input   hiddenOut_full_n;
output   hiddenOut_write;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    aesl_mux_load_32_785_U0_ap_start;
wire    aesl_mux_load_32_785_U0_ap_done;
wire    aesl_mux_load_32_785_U0_ap_continue;
wire    aesl_mux_load_32_785_U0_ap_idle;
wire    aesl_mux_load_32_785_U0_ap_ready;
wire   [31:0] aesl_mux_load_32_785_U0_p_channel;
wire    aesl_mux_load_32_785_U0_p_channel_ap_vld;
wire   [5:0] aesl_mux_load_32_785_U0_o_0_i_i_channel_din;
wire    aesl_mux_load_32_785_U0_o_0_i_i_channel_write;
wire    ap_channel_done_p_channel;
wire    p_channel_full_n;
wire    hn_loop_proc_U0_ap_start;
wire    hn_loop_proc_U0_ap_done;
wire    hn_loop_proc_U0_ap_continue;
wire    hn_loop_proc_U0_ap_idle;
wire    hn_loop_proc_U0_ap_ready;
wire    hn_loop_proc_U0_o_0_i_i_read;
wire   [9:0] hn_loop_proc_U0_inputData_address0;
wire    hn_loop_proc_U0_inputData_ce0;
wire   [5:0] hn_loop_proc_U0_o_0_i_i_out_din;
wire    hn_loop_proc_U0_o_0_i_i_out_write;
wire   [31:0] hn_loop_proc_U0_ap_return;
wire    ap_channel_done_sum_0_i_i_loc1_chann;
wire    sum_0_i_i_loc1_chann_full_n;
wire    p_nn_hls_src_digitRe_U0_ap_start;
wire    p_nn_hls_src_digitRe_U0_ap_done;
wire    p_nn_hls_src_digitRe_U0_ap_continue;
wire    p_nn_hls_src_digitRe_U0_ap_idle;
wire    p_nn_hls_src_digitRe_U0_ap_ready;
wire   [4:0] p_nn_hls_src_digitRe_U0_hiddenOut_address0;
wire    p_nn_hls_src_digitRe_U0_hiddenOut_ce0;
wire    p_nn_hls_src_digitRe_U0_hiddenOut_we0;
wire   [31:0] p_nn_hls_src_digitRe_U0_hiddenOut_d0;
wire    p_nn_hls_src_digitRe_U0_o_0_i_i_read;
wire    p_nn_hls_src_digitRe_U0_hiddenOut_full_n;
wire    p_nn_hls_src_digitRe_U0_hiddenOut_write;
wire    ap_sync_continue;
wire   [31:0] p_channel_dout;
wire    p_channel_empty_n;
wire    o_0_i_i_channel_full_n;
wire   [5:0] o_0_i_i_channel_dout;
wire    o_0_i_i_channel_empty_n;
wire    o_0_i_i_channel1_full_n;
wire   [5:0] o_0_i_i_channel1_dout;
wire    o_0_i_i_channel1_empty_n;
wire   [31:0] sum_0_i_i_loc1_chann_dout;
wire    sum_0_i_i_loc1_chann_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready;
wire    ap_sync_aesl_mux_load_32_785_U0_ap_ready;
reg   [1:0] aesl_mux_load_32_785_U0_ap_ready_count;
reg    ap_sync_reg_hn_loop_proc_U0_ap_ready;
wire    ap_sync_hn_loop_proc_U0_ap_ready;
reg   [1:0] hn_loop_proc_U0_ap_ready_count;
wire    aesl_mux_load_32_785_U0_start_full_n;
wire    aesl_mux_load_32_785_U0_start_write;
wire    hn_loop_proc_U0_start_full_n;
wire    hn_loop_proc_U0_start_write;
wire    p_nn_hls_src_digitRe_U0_start_full_n;
wire    p_nn_hls_src_digitRe_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready = 1'b0;
#0 aesl_mux_load_32_785_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_hn_loop_proc_U0_ap_ready = 1'b0;
#0 hn_loop_proc_U0_ap_ready_count = 2'd0;
end

aesl_mux_load_32_785 aesl_mux_load_32_785_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(aesl_mux_load_32_785_U0_ap_start),
    .ap_done(aesl_mux_load_32_785_U0_ap_done),
    .ap_continue(aesl_mux_load_32_785_U0_ap_continue),
    .ap_idle(aesl_mux_load_32_785_U0_ap_idle),
    .ap_ready(aesl_mux_load_32_785_U0_ap_ready),
    .p_channel(aesl_mux_load_32_785_U0_p_channel),
    .p_channel_ap_vld(aesl_mux_load_32_785_U0_p_channel_ap_vld),
    .o_0_i_i(o_0_i_i),
    .o_0_i_i_channel_din(aesl_mux_load_32_785_U0_o_0_i_i_channel_din),
    .o_0_i_i_channel_full_n(o_0_i_i_channel_full_n),
    .o_0_i_i_channel_write(aesl_mux_load_32_785_U0_o_0_i_i_channel_write)
);

hn_loop_proc hn_loop_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(hn_loop_proc_U0_ap_start),
    .ap_done(hn_loop_proc_U0_ap_done),
    .ap_continue(hn_loop_proc_U0_ap_continue),
    .ap_idle(hn_loop_proc_U0_ap_idle),
    .ap_ready(hn_loop_proc_U0_ap_ready),
    .empty(p_channel_dout),
    .o_0_i_i_dout(o_0_i_i_channel_dout),
    .o_0_i_i_empty_n(o_0_i_i_channel_empty_n),
    .o_0_i_i_read(hn_loop_proc_U0_o_0_i_i_read),
    .inputData_address0(hn_loop_proc_U0_inputData_address0),
    .inputData_ce0(hn_loop_proc_U0_inputData_ce0),
    .inputData_q0(inputData_q0),
    .o_0_i_i_out_din(hn_loop_proc_U0_o_0_i_i_out_din),
    .o_0_i_i_out_full_n(o_0_i_i_channel1_full_n),
    .o_0_i_i_out_write(hn_loop_proc_U0_o_0_i_i_out_write),
    .ap_return(hn_loop_proc_U0_ap_return)
);

p_nn_hls_src_digitRe p_nn_hls_src_digitRe_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(p_nn_hls_src_digitRe_U0_ap_start),
    .ap_done(p_nn_hls_src_digitRe_U0_ap_done),
    .ap_continue(p_nn_hls_src_digitRe_U0_ap_continue),
    .ap_idle(p_nn_hls_src_digitRe_U0_ap_idle),
    .ap_ready(p_nn_hls_src_digitRe_U0_ap_ready),
    .p_read(sum_0_i_i_loc1_chann_dout),
    .hiddenOut_address0(p_nn_hls_src_digitRe_U0_hiddenOut_address0),
    .hiddenOut_ce0(p_nn_hls_src_digitRe_U0_hiddenOut_ce0),
    .hiddenOut_we0(p_nn_hls_src_digitRe_U0_hiddenOut_we0),
    .hiddenOut_d0(p_nn_hls_src_digitRe_U0_hiddenOut_d0),
    .o_0_i_i_dout(o_0_i_i_channel1_dout),
    .o_0_i_i_empty_n(o_0_i_i_channel1_empty_n),
    .o_0_i_i_read(p_nn_hls_src_digitRe_U0_o_0_i_i_read)
);

fifo_w32_d2_A p_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(aesl_mux_load_32_785_U0_p_channel),
    .if_full_n(p_channel_full_n),
    .if_write(aesl_mux_load_32_785_U0_ap_done),
    .if_dout(p_channel_dout),
    .if_empty_n(p_channel_empty_n),
    .if_read(hn_loop_proc_U0_ap_ready)
);

fifo_w6_d1_A o_0_i_i_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(aesl_mux_load_32_785_U0_o_0_i_i_channel_din),
    .if_full_n(o_0_i_i_channel_full_n),
    .if_write(aesl_mux_load_32_785_U0_o_0_i_i_channel_write),
    .if_dout(o_0_i_i_channel_dout),
    .if_empty_n(o_0_i_i_channel_empty_n),
    .if_read(hn_loop_proc_U0_o_0_i_i_read)
);

fifo_w6_d1_A o_0_i_i_channel1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(hn_loop_proc_U0_o_0_i_i_out_din),
    .if_full_n(o_0_i_i_channel1_full_n),
    .if_write(hn_loop_proc_U0_o_0_i_i_out_write),
    .if_dout(o_0_i_i_channel1_dout),
    .if_empty_n(o_0_i_i_channel1_empty_n),
    .if_read(p_nn_hls_src_digitRe_U0_o_0_i_i_read)
);

fifo_w32_d2_A sum_0_i_i_loc1_chann_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(hn_loop_proc_U0_ap_return),
    .if_full_n(sum_0_i_i_loc1_chann_full_n),
    .if_write(hn_loop_proc_U0_ap_done),
    .if_dout(sum_0_i_i_loc1_chann_dout),
    .if_empty_n(sum_0_i_i_loc1_chann_empty_n),
    .if_read(p_nn_hls_src_digitRe_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready <= ap_sync_aesl_mux_load_32_785_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_hn_loop_proc_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_hn_loop_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_hn_loop_proc_U0_ap_ready <= ap_sync_hn_loop_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == aesl_mux_load_32_785_U0_ap_ready) & (1'b1 == ap_sync_ready))) begin
        aesl_mux_load_32_785_U0_ap_ready_count <= (aesl_mux_load_32_785_U0_ap_ready_count - 2'd1);
    end else if (((aesl_mux_load_32_785_U0_ap_ready == 1'b1) & (1'b0 == ap_sync_ready))) begin
        aesl_mux_load_32_785_U0_ap_ready_count <= (aesl_mux_load_32_785_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sync_ready) & (1'b0 == hn_loop_proc_U0_ap_ready))) begin
        hn_loop_proc_U0_ap_ready_count <= (hn_loop_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b0 == ap_sync_ready) & (1'b1 == hn_loop_proc_U0_ap_ready))) begin
        hn_loop_proc_U0_ap_ready_count <= (hn_loop_proc_U0_ap_ready_count + 2'd1);
    end
end

assign aesl_mux_load_32_785_U0_ap_continue = p_channel_full_n;

assign aesl_mux_load_32_785_U0_ap_start = (ap_start & (ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready ^ 1'b1));

assign aesl_mux_load_32_785_U0_start_full_n = 1'b0;

assign aesl_mux_load_32_785_U0_start_write = 1'b0;

assign ap_channel_done_p_channel = aesl_mux_load_32_785_U0_ap_done;

assign ap_channel_done_sum_0_i_i_loc1_chann = hn_loop_proc_U0_ap_done;

assign ap_done = p_nn_hls_src_digitRe_U0_ap_done;

assign ap_idle = (aesl_mux_load_32_785_U0_ap_idle & hn_loop_proc_U0_ap_idle & p_nn_hls_src_digitRe_U0_ap_idle & (p_channel_empty_n ^ 1'b1) & (sum_0_i_i_loc1_chann_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

assign ap_sync_aesl_mux_load_32_785_U0_ap_ready = (aesl_mux_load_32_785_U0_ap_ready | ap_sync_reg_aesl_mux_load_32_785_U0_ap_ready);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = p_nn_hls_src_digitRe_U0_ap_done;

assign ap_sync_hn_loop_proc_U0_ap_ready = (hn_loop_proc_U0_ap_ready | ap_sync_reg_hn_loop_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_aesl_mux_load_32_785_U0_ap_ready & ap_sync_hn_loop_proc_U0_ap_ready);

assign hiddenOut_address0 = p_nn_hls_src_digitRe_U0_hiddenOut_address0;

assign hiddenOut_address1 = 5'd0;

assign hiddenOut_ce0 = p_nn_hls_src_digitRe_U0_hiddenOut_ce0;

assign hiddenOut_ce1 = 1'b0;

assign hiddenOut_d0 = p_nn_hls_src_digitRe_U0_hiddenOut_d0;

assign hiddenOut_d1 = 32'd0;

assign hiddenOut_we0 = p_nn_hls_src_digitRe_U0_hiddenOut_we0;

assign hiddenOut_we1 = 1'b0;

assign hiddenOut_write = p_nn_hls_src_digitRe_U0_hiddenOut_write;

assign hn_loop_proc_U0_ap_continue = sum_0_i_i_loc1_chann_full_n;

assign hn_loop_proc_U0_ap_start = (p_channel_empty_n & ap_start & (ap_sync_reg_hn_loop_proc_U0_ap_ready ^ 1'b1));

assign hn_loop_proc_U0_start_full_n = 1'b0;

assign hn_loop_proc_U0_start_write = 1'b0;

assign inputData_address0 = hn_loop_proc_U0_inputData_address0;

assign inputData_ce0 = hn_loop_proc_U0_inputData_ce0;

assign inputData_d0 = 32'd0;

assign inputData_we0 = 1'b0;

assign p_nn_hls_src_digitRe_U0_ap_continue = ap_continue;

assign p_nn_hls_src_digitRe_U0_ap_start = sum_0_i_i_loc1_chann_empty_n;

assign p_nn_hls_src_digitRe_U0_hiddenOut_full_n = hiddenOut_full_n;

assign p_nn_hls_src_digitRe_U0_hiddenOut_write = 1'b0;

assign p_nn_hls_src_digitRe_U0_start_full_n = 1'b0;

assign p_nn_hls_src_digitRe_U0_start_write = 1'b0;

endmodule //dataflow_in_loop_ih_s
