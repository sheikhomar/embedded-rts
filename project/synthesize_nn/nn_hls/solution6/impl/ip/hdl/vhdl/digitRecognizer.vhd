-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitRecognizer is
generic (
    C_S_AXI_DIGREC_IO_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_DIGREC_IO_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_digrec_io_AWVALID : IN STD_LOGIC;
    s_axi_digrec_io_AWREADY : OUT STD_LOGIC;
    s_axi_digrec_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_ADDR_WIDTH-1 downto 0);
    s_axi_digrec_io_WVALID : IN STD_LOGIC;
    s_axi_digrec_io_WREADY : OUT STD_LOGIC;
    s_axi_digrec_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_DATA_WIDTH-1 downto 0);
    s_axi_digrec_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_digrec_io_ARVALID : IN STD_LOGIC;
    s_axi_digrec_io_ARREADY : OUT STD_LOGIC;
    s_axi_digrec_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_ADDR_WIDTH-1 downto 0);
    s_axi_digrec_io_RVALID : OUT STD_LOGIC;
    s_axi_digrec_io_RREADY : IN STD_LOGIC;
    s_axi_digrec_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_DATA_WIDTH-1 downto 0);
    s_axi_digrec_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_digrec_io_BVALID : OUT STD_LOGIC;
    s_axi_digrec_io_BREADY : IN STD_LOGIC;
    s_axi_digrec_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of digitRecognizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digitRecognizer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.394800,HLS_SYN_LAT=176474,HLS_SYN_TPT=176098,HLS_SYN_MEM=72,HLS_SYN_DSP=15,HLS_SYN_FF=13138,HLS_SYN_LUT=7817}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal inputData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenOut_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenOut_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenOut_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenOut_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ih_loop_proc_U0_ap_start : STD_LOGIC;
    signal ih_loop_proc_U0_ap_done : STD_LOGIC;
    signal ih_loop_proc_U0_ap_continue : STD_LOGIC;
    signal ih_loop_proc_U0_ap_idle : STD_LOGIC;
    signal ih_loop_proc_U0_ap_ready : STD_LOGIC;
    signal ih_loop_proc_U0_hiddenOut_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ih_loop_proc_U0_hiddenOut_ce0 : STD_LOGIC;
    signal ih_loop_proc_U0_hiddenOut_we0 : STD_LOGIC;
    signal ih_loop_proc_U0_hiddenOut_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ih_loop_proc_U0_inputData_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ih_loop_proc_U0_inputData_ce0 : STD_LOGIC;
    signal ap_channel_done_hiddenOut : STD_LOGIC;
    signal ih_loop_proc_U0_hiddenOut_full_n : STD_LOGIC;
    signal ho_loop_proc_U0_ap_start : STD_LOGIC;
    signal ho_loop_proc_U0_ap_done : STD_LOGIC;
    signal ho_loop_proc_U0_ap_continue : STD_LOGIC;
    signal ho_loop_proc_U0_ap_idle : STD_LOGIC;
    signal ho_loop_proc_U0_ap_ready : STD_LOGIC;
    signal ho_loop_proc_U0_hiddenOut_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ho_loop_proc_U0_hiddenOut_ce0 : STD_LOGIC;
    signal ho_loop_proc_U0_hiddenOut_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ho_loop_proc_U0_hiddenOut_ce1 : STD_LOGIC;
    signal ho_loop_proc_U0_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ho_loop_proc_U0_output_r_ce0 : STD_LOGIC;
    signal ho_loop_proc_U0_output_r_we0 : STD_LOGIC;
    signal ho_loop_proc_U0_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal hiddenOut_i_full_n : STD_LOGIC;
    signal hiddenOut_t_empty_n : STD_LOGIC;
    signal hiddenOut_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenOut_t_we1 : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ih_loop_proc_U0_start_full_n : STD_LOGIC;
    signal ih_loop_proc_U0_start_write : STD_LOGIC;
    signal ho_loop_proc_U0_start_full_n : STD_LOGIC;
    signal ho_loop_proc_U0_start_write : STD_LOGIC;

    component ih_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hiddenOut_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hiddenOut_ce0 : OUT STD_LOGIC;
        hiddenOut_we0 : OUT STD_LOGIC;
        hiddenOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputData_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inputData_ce0 : OUT STD_LOGIC;
        inputData_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ho_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hiddenOut_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hiddenOut_ce0 : OUT STD_LOGIC;
        hiddenOut_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        hiddenOut_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hiddenOut_ce1 : OUT STD_LOGIC;
        hiddenOut_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_hMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component digitRecognizer_digrec_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputData_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        inputData_ce0 : IN STD_LOGIC;
        inputData_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    digitRecognizer_digrec_io_s_axi_U : component digitRecognizer_digrec_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIGREC_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIGREC_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_digrec_io_AWVALID,
        AWREADY => s_axi_digrec_io_AWREADY,
        AWADDR => s_axi_digrec_io_AWADDR,
        WVALID => s_axi_digrec_io_WVALID,
        WREADY => s_axi_digrec_io_WREADY,
        WDATA => s_axi_digrec_io_WDATA,
        WSTRB => s_axi_digrec_io_WSTRB,
        ARVALID => s_axi_digrec_io_ARVALID,
        ARREADY => s_axi_digrec_io_ARREADY,
        ARADDR => s_axi_digrec_io_ARADDR,
        RVALID => s_axi_digrec_io_RVALID,
        RREADY => s_axi_digrec_io_RREADY,
        RDATA => s_axi_digrec_io_RDATA,
        RRESP => s_axi_digrec_io_RRESP,
        BVALID => s_axi_digrec_io_BVALID,
        BREADY => s_axi_digrec_io_BREADY,
        BRESP => s_axi_digrec_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputData_address0 => ih_loop_proc_U0_inputData_address0,
        inputData_ce0 => ih_loop_proc_U0_inputData_ce0,
        inputData_q0 => inputData_q0,
        output_r_address0 => ho_loop_proc_U0_output_r_address0,
        output_r_ce0 => ho_loop_proc_U0_output_r_ce0,
        output_r_we0 => ho_loop_proc_U0_output_r_we0,
        output_r_d0 => ho_loop_proc_U0_output_r_d0);

    hiddenOut_U : component digitRecognizer_hMgi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => ih_loop_proc_U0_hiddenOut_address0,
        i_ce0 => ih_loop_proc_U0_hiddenOut_ce0,
        i_we0 => ih_loop_proc_U0_hiddenOut_we0,
        i_d0 => ih_loop_proc_U0_hiddenOut_d0,
        i_q0 => hiddenOut_i_q0,
        i_address1 => ap_const_lv5_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => hiddenOut_i_q1,
        t_address0 => ho_loop_proc_U0_hiddenOut_address0,
        t_ce0 => ho_loop_proc_U0_hiddenOut_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => hiddenOut_t_q0,
        t_address1 => ho_loop_proc_U0_hiddenOut_address1,
        t_ce1 => ho_loop_proc_U0_hiddenOut_ce1,
        t_q1 => hiddenOut_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => hiddenOut_i_full_n,
        i_write => ih_loop_proc_U0_ap_done,
        t_empty_n => hiddenOut_t_empty_n,
        t_read => ho_loop_proc_U0_ap_ready);

    ih_loop_proc_U0 : component ih_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ih_loop_proc_U0_ap_start,
        ap_done => ih_loop_proc_U0_ap_done,
        ap_continue => ih_loop_proc_U0_ap_continue,
        ap_idle => ih_loop_proc_U0_ap_idle,
        ap_ready => ih_loop_proc_U0_ap_ready,
        hiddenOut_address0 => ih_loop_proc_U0_hiddenOut_address0,
        hiddenOut_ce0 => ih_loop_proc_U0_hiddenOut_ce0,
        hiddenOut_we0 => ih_loop_proc_U0_hiddenOut_we0,
        hiddenOut_d0 => ih_loop_proc_U0_hiddenOut_d0,
        inputData_address0 => ih_loop_proc_U0_inputData_address0,
        inputData_ce0 => ih_loop_proc_U0_inputData_ce0,
        inputData_q0 => inputData_q0);

    ho_loop_proc_U0 : component ho_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ho_loop_proc_U0_ap_start,
        ap_done => ho_loop_proc_U0_ap_done,
        ap_continue => ho_loop_proc_U0_ap_continue,
        ap_idle => ho_loop_proc_U0_ap_idle,
        ap_ready => ho_loop_proc_U0_ap_ready,
        hiddenOut_address0 => ho_loop_proc_U0_hiddenOut_address0,
        hiddenOut_ce0 => ho_loop_proc_U0_hiddenOut_ce0,
        hiddenOut_q0 => hiddenOut_t_q0,
        hiddenOut_address1 => ho_loop_proc_U0_hiddenOut_address1,
        hiddenOut_ce1 => ho_loop_proc_U0_hiddenOut_ce1,
        hiddenOut_q1 => hiddenOut_t_q1,
        output_r_address0 => ho_loop_proc_U0_output_r_address0,
        output_r_ce0 => ho_loop_proc_U0_output_r_ce0,
        output_r_we0 => ho_loop_proc_U0_output_r_we0,
        output_r_d0 => ho_loop_proc_U0_output_r_d0);




    ap_channel_done_hiddenOut <= ih_loop_proc_U0_ap_done;
    ap_done <= ho_loop_proc_U0_ap_done;
    ap_idle <= (ih_loop_proc_U0_ap_idle and ho_loop_proc_U0_ap_idle and (hiddenOut_t_empty_n xor ap_const_logic_1));
    ap_ready <= ih_loop_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= ho_loop_proc_U0_ap_done;
    ap_sync_ready <= ih_loop_proc_U0_ap_ready;
    hiddenOut_t_d1 <= ap_const_lv32_0;
    hiddenOut_t_we1 <= ap_const_logic_0;
    ho_loop_proc_U0_ap_continue <= ap_const_logic_1;
    ho_loop_proc_U0_ap_start <= hiddenOut_t_empty_n;
    ho_loop_proc_U0_start_full_n <= ap_const_logic_0;
    ho_loop_proc_U0_start_write <= ap_const_logic_0;
    ih_loop_proc_U0_ap_continue <= hiddenOut_i_full_n;
    ih_loop_proc_U0_ap_start <= ap_start;
    ih_loop_proc_U0_hiddenOut_full_n <= hiddenOut_i_full_n;
    ih_loop_proc_U0_start_full_n <= ap_const_logic_0;
    ih_loop_proc_U0_start_write <= ap_const_logic_0;
end behav;
