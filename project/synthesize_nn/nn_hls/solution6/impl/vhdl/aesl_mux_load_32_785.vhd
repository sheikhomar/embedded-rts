-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aesl_mux_load_32_785 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_channel : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_channel_ap_vld : OUT STD_LOGIC;
    o_0_i_i : IN STD_LOGIC_VECTOR (5 downto 0);
    o_0_i_i_channel_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    o_0_i_i_channel_full_n : IN STD_LOGIC;
    o_0_i_i_channel_write : OUT STD_LOGIC );
end;


architecture behav of aesl_mux_load_32_785 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_BC9773A2 : STD_LOGIC_VECTOR (31 downto 0) := "10111100100101110111001110100010";
    constant ap_const_lv32_BB09C61C : STD_LOGIC_VECTOR (31 downto 0) := "10111011000010011100011000011100";
    constant ap_const_lv32_BC1E3E8B : STD_LOGIC_VECTOR (31 downto 0) := "10111100000111100011111010001011";
    constant ap_const_lv32_3CD8F96F : STD_LOGIC_VECTOR (31 downto 0) := "00111100110110001111100101101111";
    constant ap_const_lv32_BC054E5B : STD_LOGIC_VECTOR (31 downto 0) := "10111100000001010100111001011011";
    constant ap_const_lv32_BD1D8E6E : STD_LOGIC_VECTOR (31 downto 0) := "10111101000111011000111001101110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv32_BD18AFEA : STD_LOGIC_VECTOR (31 downto 0) := "10111101000110001010111111101010";
    constant ap_const_lv32_3C3D705E : STD_LOGIC_VECTOR (31 downto 0) := "00111100001111010111000001011110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_BCF466A7 : STD_LOGIC_VECTOR (31 downto 0) := "10111100111101000110011010100111";
    constant ap_const_lv32_BC3D0B1D : STD_LOGIC_VECTOR (31 downto 0) := "10111100001111010000101100011101";
    constant ap_const_lv32_3BF01162 : STD_LOGIC_VECTOR (31 downto 0) := "00111011111100000001000101100010";
    constant ap_const_lv32_3C341E64 : STD_LOGIC_VECTOR (31 downto 0) := "00111100001101000001111001100100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv32_B9C72B15 : STD_LOGIC_VECTOR (31 downto 0) := "10111001110001110010101100010101";
    constant ap_const_lv32_BC5E9340 : STD_LOGIC_VECTOR (31 downto 0) := "10111100010111101001001101000000";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_BC4FE4F4 : STD_LOGIC_VECTOR (31 downto 0) := "10111100010011111110010011110100";
    constant ap_const_lv32_BC50FB52 : STD_LOGIC_VECTOR (31 downto 0) := "10111100010100001111101101010010";
    constant ap_const_lv32_3C02D9C6 : STD_LOGIC_VECTOR (31 downto 0) := "00111100000000101101100111000110";
    constant ap_const_lv32_BB03CE97 : STD_LOGIC_VECTOR (31 downto 0) := "10111011000000111100111010010111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_3C1B92EF : STD_LOGIC_VECTOR (31 downto 0) := "00111100000110111001001011101111";
    constant ap_const_lv32_BC9E0E79 : STD_LOGIC_VECTOR (31 downto 0) := "10111100100111100000111001111001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv32_BB5C9F6A : STD_LOGIC_VECTOR (31 downto 0) := "10111011010111001001111101101010";
    constant ap_const_lv32_B9B9474F : STD_LOGIC_VECTOR (31 downto 0) := "10111001101110010100011101001111";
    constant ap_const_lv32_BBE1906C : STD_LOGIC_VECTOR (31 downto 0) := "10111011111000011001000001101100";
    constant ap_const_lv32_3BFFB00D : STD_LOGIC_VECTOR (31 downto 0) := "00111011111111111011000000001101";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_3C49A23F : STD_LOGIC_VECTOR (31 downto 0) := "00111100010010011010001000111111";
    constant ap_const_lv32_BC1300B5 : STD_LOGIC_VECTOR (31 downto 0) := "10111100000100110000000010110101";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_BBA99C2F : STD_LOGIC_VECTOR (31 downto 0) := "10111011101010011001110000101111";
    constant ap_const_lv32_B97C1C9C : STD_LOGIC_VECTOR (31 downto 0) := "10111001011111000001110010011100";
    constant ap_const_lv32_3C455D18 : STD_LOGIC_VECTOR (31 downto 0) := "00111100010001010101110100011000";
    constant ap_const_lv32_3D0B1F08 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000010110001111100001000";
    constant ap_const_lv32_BBDCFC20 : STD_LOGIC_VECTOR (31 downto 0) := "10111011110111001111110000100000";
    constant ap_const_lv32_BA898AC8 : STD_LOGIC_VECTOR (31 downto 0) := "10111010100010011000101011001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_0_i_i_channel_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_180_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_i_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_i_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_i_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_i_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_i_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_49_i_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_i_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_i_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_i_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_i_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_i_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_i_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_i_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_i_fu_372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_i_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_64_i_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_i_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_i_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_i_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_i_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_i_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_i_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_i_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_i_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_i_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_79_i_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_i_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_i_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_i_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_i_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_i_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_i_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_i_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_i_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_i_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_i_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_i_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_i_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_i_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_i_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_i_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_i_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_i_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_i_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_i_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_i_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_37_i_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_i_fu_221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_15_fu_214_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_fu_240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_i_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_i_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_i_fu_269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_i_fu_251_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_i_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_i_fu_311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_i_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_i_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i_fu_322_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_i_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_i_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_i_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_i_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_i_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_i_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_i_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_i_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_i_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_i_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_i_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_i_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_i_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_i_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_i_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_i_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_i_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_i_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_i_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_i_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_i_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_i_fu_540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_i_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_i_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_i_fu_592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_i_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_i_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_i_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_i_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_i_fu_629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_i_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (o_0_i_i_channel_full_n = ap_const_logic_1))) then
                tmp_100_i_reg_809 <= tmp_100_i_fu_577_p2;
                tmp_104_i_reg_815 <= tmp_104_i_fu_582_p2;
                tmp_105_i_reg_820 <= tmp_105_i_fu_587_p2;
                    tmp_93_i_reg_788(26 downto 0) <= tmp_93_i_fu_554_p3(26 downto 0);    tmp_93_i_reg_788(31) <= tmp_93_i_fu_554_p3(31);
                tmp_94_i_reg_793 <= tmp_94_i_fu_562_p2;
                tmp_95_i_reg_798 <= tmp_95_i_fu_567_p2;
                tmp_99_i_reg_804 <= tmp_99_i_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                tmp_34_i_reg_685 <= tmp_34_i_fu_190_p2;
                tmp_35_i_reg_690 <= tmp_35_i_fu_196_p2;
                tmp_39_i_reg_696 <= tmp_39_i_fu_202_p2;
                tmp_40_i_reg_701 <= tmp_40_i_fu_208_p2;
                tmp_i_reg_680 <= tmp_i_fu_184_p2;
                tmp_reg_649 <= tmp_fu_180_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_48_i_reg_707(26 downto 0) <= tmp_48_i_fu_283_p3(26 downto 0);    tmp_48_i_reg_707(31) <= tmp_48_i_fu_283_p3(31);
                tmp_49_i_reg_712 <= tmp_49_i_fu_291_p2;
                tmp_50_i_reg_717 <= tmp_50_i_fu_296_p2;
                tmp_54_i_reg_723 <= tmp_54_i_fu_301_p2;
                tmp_55_i_reg_728 <= tmp_55_i_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_63_i_reg_734(26 downto 0) <= tmp_63_i_fu_372_p3(26 downto 0);    tmp_63_i_reg_734(31) <= tmp_63_i_fu_372_p3(31);
                tmp_64_i_reg_739 <= tmp_64_i_fu_380_p2;
                tmp_65_i_reg_744 <= tmp_65_i_fu_385_p2;
                tmp_69_i_reg_750 <= tmp_69_i_fu_390_p2;
                tmp_70_i_reg_755 <= tmp_70_i_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_78_i_reg_761(26 downto 0) <= tmp_78_i_fu_461_p3(26 downto 0);    tmp_78_i_reg_761(31) <= tmp_78_i_fu_461_p3(31);
                tmp_79_i_reg_766 <= tmp_79_i_fu_469_p2;
                tmp_80_i_reg_771 <= tmp_80_i_fu_474_p2;
                tmp_84_i_reg_777 <= tmp_84_i_fu_479_p2;
                tmp_85_i_reg_782 <= tmp_85_i_fu_484_p2;
            end if;
        end if;
    end process;
    tmp_48_i_reg_707(30 downto 27) <= "0111";
    tmp_63_i_reg_734(30 downto 27) <= "0111";
    tmp_78_i_reg_761(30 downto 27) <= "0111";
    tmp_93_i_reg_788(30 downto 27) <= "0111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, o_0_i_i_channel_full_n, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (o_0_i_i_channel_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    o_0_i_i_channel_blk_n_assign_proc : process(o_0_i_i_channel_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            o_0_i_i_channel_blk_n <= o_0_i_i_channel_full_n;
        else 
            o_0_i_i_channel_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_0_i_i_channel_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_649),6));

    o_0_i_i_channel_write_assign_proc : process(o_0_i_i_channel_full_n, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (o_0_i_i_channel_full_n = ap_const_logic_1))) then 
            o_0_i_i_channel_write <= ap_const_logic_1;
        else 
            o_0_i_i_channel_write <= ap_const_logic_0;
        end if; 
    end process;

    p_channel <= 
        tmp_106_i_fu_629_p3 when (tmp_107_i_fu_636_p2(0) = '1') else 
        tmp_103_i_fu_621_p3;

    p_channel_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_channel_ap_vld <= ap_const_logic_1;
        else 
            p_channel_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_i_fu_577_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_1C) else "0";
    tmp_101_i_fu_610_p3 <= 
        ap_const_lv32_3C455D18 when (tmp_100_i_reg_809(0) = '1') else 
        ap_const_lv32_3D0B1F08;
    tmp_102_i_fu_617_p2 <= (tmp_100_i_reg_809 or tmp_99_i_reg_804);
    tmp_103_i_fu_621_p3 <= 
        tmp_101_i_fu_610_p3 when (tmp_102_i_fu_617_p2(0) = '1') else 
        tmp_98_i_fu_603_p3;
    tmp_104_i_fu_582_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_1D) else "0";
    tmp_105_i_fu_587_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_1E) else "0";
    tmp_106_i_fu_629_p3 <= 
        ap_const_lv32_BBDCFC20 when (tmp_105_i_reg_820(0) = '1') else 
        ap_const_lv32_BA898AC8;
    tmp_107_i_fu_636_p2 <= (tmp_105_i_reg_820 or tmp_104_i_reg_815);
    tmp_34_i_fu_190_p2 <= "1" when (tmp_fu_180_p1 = ap_const_lv5_1) else "0";
    tmp_35_i_fu_196_p2 <= "1" when (tmp_fu_180_p1 = ap_const_lv5_2) else "0";
    tmp_36_i_fu_221_p3 <= 
        ap_const_lv32_BC1E3E8B when (tmp_35_i_reg_690(0) = '1') else 
        ap_const_lv32_3CD8F96F;
    tmp_37_i_fu_228_p2 <= (tmp_35_i_reg_690 or tmp_34_i_reg_685);
    tmp_38_i_fu_232_p3 <= 
        tmp_36_i_fu_221_p3 when (tmp_37_i_fu_228_p2(0) = '1') else 
        tmp_i_15_fu_214_p3;
    tmp_39_i_fu_202_p2 <= "1" when (tmp_fu_180_p1 = ap_const_lv5_3) else "0";
    tmp_40_i_fu_208_p2 <= "1" when (tmp_fu_180_p1 = ap_const_lv5_4) else "0";
    tmp_41_i_fu_240_p3 <= 
        ap_const_lv32_BC054E5B when (tmp_40_i_reg_701(0) = '1') else 
        ap_const_lv32_BD1D8E6E;
    tmp_42_i_fu_247_p2 <= (tmp_40_i_reg_701 or tmp_39_i_reg_696);
    tmp_43_i_fu_251_p3 <= 
        tmp_41_i_fu_240_p3 when (tmp_42_i_fu_247_p2(0) = '1') else 
        tmp_38_i_fu_232_p3;
    tmp_44_i_fu_259_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_5) else "0";
    tmp_45_i_fu_264_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_6) else "0";
    tmp_46_i_fu_269_p3 <= 
        ap_const_lv32_BD18AFEA when (tmp_45_i_fu_264_p2(0) = '1') else 
        ap_const_lv32_3C3D705E;
    tmp_47_i_fu_277_p2 <= (tmp_45_i_fu_264_p2 or tmp_44_i_fu_259_p2);
    tmp_48_i_fu_283_p3 <= 
        tmp_46_i_fu_269_p3 when (tmp_47_i_fu_277_p2(0) = '1') else 
        tmp_43_i_fu_251_p3;
    tmp_49_i_fu_291_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_7) else "0";
    tmp_50_i_fu_296_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_8) else "0";
    tmp_51_i_fu_311_p3 <= 
        ap_const_lv32_BCF466A7 when (tmp_50_i_reg_717(0) = '1') else 
        ap_const_lv32_BC3D0B1D;
    tmp_52_i_fu_318_p2 <= (tmp_50_i_reg_717 or tmp_49_i_reg_712);
    tmp_53_i_fu_322_p3 <= 
        tmp_51_i_fu_311_p3 when (tmp_52_i_fu_318_p2(0) = '1') else 
        tmp_48_i_reg_707;
    tmp_54_i_fu_301_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_9) else "0";
    tmp_55_i_fu_306_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_A) else "0";
    tmp_56_i_fu_329_p3 <= 
        ap_const_lv32_3BF01162 when (tmp_55_i_reg_728(0) = '1') else 
        ap_const_lv32_3C341E64;
    tmp_57_i_fu_336_p2 <= (tmp_55_i_reg_728 or tmp_54_i_reg_723);
    tmp_58_i_fu_340_p3 <= 
        tmp_56_i_fu_329_p3 when (tmp_57_i_fu_336_p2(0) = '1') else 
        tmp_53_i_fu_322_p3;
    tmp_59_i_fu_348_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_B) else "0";
    tmp_60_i_fu_353_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_C) else "0";
    tmp_61_i_fu_358_p3 <= 
        ap_const_lv32_B9C72B15 when (tmp_60_i_fu_353_p2(0) = '1') else 
        ap_const_lv32_BC5E9340;
    tmp_62_i_fu_366_p2 <= (tmp_60_i_fu_353_p2 or tmp_59_i_fu_348_p2);
    tmp_63_i_fu_372_p3 <= 
        tmp_61_i_fu_358_p3 when (tmp_62_i_fu_366_p2(0) = '1') else 
        tmp_58_i_fu_340_p3;
    tmp_64_i_fu_380_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_D) else "0";
    tmp_65_i_fu_385_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_E) else "0";
    tmp_66_i_fu_400_p3 <= 
        ap_const_lv32_BC4FE4F4 when (tmp_65_i_reg_744(0) = '1') else 
        ap_const_lv32_BC50FB52;
    tmp_67_i_fu_407_p2 <= (tmp_65_i_reg_744 or tmp_64_i_reg_739);
    tmp_68_i_fu_411_p3 <= 
        tmp_66_i_fu_400_p3 when (tmp_67_i_fu_407_p2(0) = '1') else 
        tmp_63_i_reg_734;
    tmp_69_i_fu_390_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_F) else "0";
    tmp_70_i_fu_395_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_10) else "0";
    tmp_71_i_fu_418_p3 <= 
        ap_const_lv32_3C02D9C6 when (tmp_70_i_reg_755(0) = '1') else 
        ap_const_lv32_BB03CE97;
    tmp_72_i_fu_425_p2 <= (tmp_70_i_reg_755 or tmp_69_i_reg_750);
    tmp_73_i_fu_429_p3 <= 
        tmp_71_i_fu_418_p3 when (tmp_72_i_fu_425_p2(0) = '1') else 
        tmp_68_i_fu_411_p3;
    tmp_74_i_fu_437_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_11) else "0";
    tmp_75_i_fu_442_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_12) else "0";
    tmp_76_i_fu_447_p3 <= 
        ap_const_lv32_3C1B92EF when (tmp_75_i_fu_442_p2(0) = '1') else 
        ap_const_lv32_BC9E0E79;
    tmp_77_i_fu_455_p2 <= (tmp_75_i_fu_442_p2 or tmp_74_i_fu_437_p2);
    tmp_78_i_fu_461_p3 <= 
        tmp_76_i_fu_447_p3 when (tmp_77_i_fu_455_p2(0) = '1') else 
        tmp_73_i_fu_429_p3;
    tmp_79_i_fu_469_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_13) else "0";
    tmp_80_i_fu_474_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_14) else "0";
    tmp_81_i_fu_493_p3 <= 
        ap_const_lv32_BB5C9F6A when (tmp_80_i_reg_771(0) = '1') else 
        ap_const_lv32_B9B9474F;
    tmp_82_i_fu_500_p2 <= (tmp_80_i_reg_771 or tmp_79_i_reg_766);
    tmp_83_i_fu_504_p3 <= 
        tmp_81_i_fu_493_p3 when (tmp_82_i_fu_500_p2(0) = '1') else 
        tmp_78_i_reg_761;
    tmp_84_i_fu_479_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_15) else "0";
    tmp_85_i_fu_484_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_16) else "0";
    tmp_86_i_fu_511_p3 <= 
        ap_const_lv32_BBE1906C when (tmp_85_i_reg_782(0) = '1') else 
        ap_const_lv32_3BFFB00D;
    tmp_87_i_fu_518_p2 <= (tmp_85_i_reg_782 or tmp_84_i_reg_777);
    tmp_88_i_fu_522_p3 <= 
        tmp_86_i_fu_511_p3 when (tmp_87_i_fu_518_p2(0) = '1') else 
        tmp_83_i_fu_504_p3;
    tmp_89_i_fu_530_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_17) else "0";
    tmp_90_i_fu_535_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_18) else "0";
    tmp_91_i_fu_540_p3 <= 
        ap_const_lv32_3C49A23F when (tmp_90_i_fu_535_p2(0) = '1') else 
        ap_const_lv32_BC1300B5;
    tmp_92_i_fu_548_p2 <= (tmp_90_i_fu_535_p2 or tmp_89_i_fu_530_p2);
    tmp_93_i_fu_554_p3 <= 
        tmp_91_i_fu_540_p3 when (tmp_92_i_fu_548_p2(0) = '1') else 
        tmp_88_i_fu_522_p3;
    tmp_94_i_fu_562_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_19) else "0";
    tmp_95_i_fu_567_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_1A) else "0";
    tmp_96_i_fu_592_p3 <= 
        ap_const_lv32_BBA99C2F when (tmp_95_i_reg_798(0) = '1') else 
        ap_const_lv32_B97C1C9C;
    tmp_97_i_fu_599_p2 <= (tmp_95_i_reg_798 or tmp_94_i_reg_793);
    tmp_98_i_fu_603_p3 <= 
        tmp_96_i_fu_592_p3 when (tmp_97_i_fu_599_p2(0) = '1') else 
        tmp_93_i_reg_788;
    tmp_99_i_fu_572_p2 <= "1" when (tmp_reg_649 = ap_const_lv5_1B) else "0";
    tmp_fu_180_p1 <= o_0_i_i(5 - 1 downto 0);
    tmp_i_15_fu_214_p3 <= 
        ap_const_lv32_BC9773A2 when (tmp_i_reg_680(0) = '1') else 
        ap_const_lv32_BB09C61C;
    tmp_i_fu_184_p2 <= "1" when (tmp_fu_180_p1 = ap_const_lv5_0) else "0";
end behav;
