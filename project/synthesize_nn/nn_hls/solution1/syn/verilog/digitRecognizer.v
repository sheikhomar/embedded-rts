// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="digitRecognizer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.576000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=65,HLS_SYN_LUT=67}" *)

module digitRecognizer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputData_address0,
        inputData_ce0,
        inputData_we0,
        inputData_d0,
        inputData_q0,
        inputData_address1,
        inputData_ce1,
        inputData_we1,
        inputData_d1,
        inputData_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] inputData_address0;
output   inputData_ce0;
output   inputData_we0;
output  [63:0] inputData_d0;
input  [63:0] inputData_q0;
output  [9:0] inputData_address1;
output   inputData_ce1;
output   inputData_we1;
output  [63:0] inputData_d1;
input  [63:0] inputData_q1;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [63:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] hiddenToOutputWeight_address0;
reg    hiddenToOutputWeight_ce0;
wire   [1:0] hiddenToOutputWeight_q0;
wire   [3:0] o_fu_74_p2;
reg   [3:0] o_reg_120;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_68_p2;
reg   [3:0] o_1_reg_56;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_2_cast_fu_102_p1;
wire   [31:0] tmp_fu_107_p1;
wire   [8:0] tmp_1_fu_84_p3;
wire   [9:0] tmp_cast_fu_80_p1;
wire   [9:0] p_shl_cast_fu_92_p1;
wire   [9:0] tmp_2_fu_96_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

digitRecognizer_hbkb #(
    .DataWidth( 2 ),
    .AddressRange( 330 ),
    .AddressWidth( 9 ))
hiddenToOutputWeight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hiddenToOutputWeight_address0),
    .ce0(hiddenToOutputWeight_ce0),
    .q0(hiddenToOutputWeight_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        o_1_reg_56 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        o_1_reg_56 <= o_reg_120;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_reg_120 <= o_fu_74_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_68_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_68_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hiddenToOutputWeight_ce0 = 1'b1;
    end else begin
        hiddenToOutputWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_68_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign exitcond1_fu_68_p2 = ((o_1_reg_56 == 4'd10) ? 1'b1 : 1'b0);

assign hiddenToOutputWeight_address0 = tmp_2_cast_fu_102_p1;

assign inputData_address0 = 10'd0;

assign inputData_address1 = 10'd0;

assign inputData_ce0 = 1'b0;

assign inputData_ce1 = 1'b0;

assign inputData_d0 = 64'd0;

assign inputData_d1 = 64'd0;

assign inputData_we0 = 1'b0;

assign inputData_we1 = 1'b0;

assign o_fu_74_p2 = (o_1_reg_56 + 4'd1);

assign output_r_address0 = tmp_fu_107_p1;

assign output_r_d0 = $signed(hiddenToOutputWeight_q0);

assign p_shl_cast_fu_92_p1 = tmp_1_fu_84_p3;

assign tmp_1_fu_84_p3 = {{o_1_reg_56}, {5'd0}};

assign tmp_2_cast_fu_102_p1 = tmp_2_fu_96_p2;

assign tmp_2_fu_96_p2 = (tmp_cast_fu_80_p1 + p_shl_cast_fu_92_p1);

assign tmp_cast_fu_80_p1 = o_1_reg_56;

assign tmp_fu_107_p1 = o_1_reg_56;

endmodule //digitRecognizer
