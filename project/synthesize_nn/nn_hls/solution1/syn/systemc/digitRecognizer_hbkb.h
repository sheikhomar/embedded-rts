// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __digitRecognizer_hbkb_H__
#define __digitRecognizer_hbkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct digitRecognizer_hbkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 2;
  static const unsigned AddressRange = 330;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(digitRecognizer_hbkb_ram) {
        for (unsigned i = 0; i < 70 ; i = i + 1) {
            ram[i] = "0b00";
        }
        ram[70] = "0b11";
        for (unsigned i = 71; i < 78 ; i = i + 1) {
            ram[i] = "0b00";
        }
        ram[78] = "0b01";
        for (unsigned i = 79; i < 137 ; i = i + 1) {
            ram[i] = "0b00";
        }
        ram[137] = "0b11";
        for (unsigned i = 138; i < 152 ; i = i + 1) {
            ram[i] = "0b00";
        }
        ram[152] = "0b11";
        for (unsigned i = 153; i < 174 ; i = i + 1) {
            ram[i] = "0b00";
        }
        ram[174] = "0b11";
        for (unsigned i = 175; i < 200 ; i = i + 1) {
            ram[i] = "0b00";
        }
        ram[200] = "0b11";
        for (unsigned i = 201; i < 330 ; i = i + 1) {
            ram[i] = "0b00";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(digitRecognizer_hbkb) {


static const unsigned DataWidth = 2;
static const unsigned AddressRange = 330;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


digitRecognizer_hbkb_ram* meminst;


SC_CTOR(digitRecognizer_hbkb) {
meminst = new digitRecognizer_hbkb_ram("digitRecognizer_hbkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~digitRecognizer_hbkb() {
    delete meminst;
}


};//endmodule
#endif
