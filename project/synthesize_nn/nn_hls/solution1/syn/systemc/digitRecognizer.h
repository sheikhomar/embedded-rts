// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _digitRecognizer_HH_
#define _digitRecognizer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "digitRecognizer_hbkb.h"

namespace ap_rtl {

struct digitRecognizer : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > inputData_address0;
    sc_out< sc_logic > inputData_ce0;
    sc_out< sc_logic > inputData_we0;
    sc_out< sc_lv<64> > inputData_d0;
    sc_in< sc_lv<64> > inputData_q0;
    sc_out< sc_lv<10> > inputData_address1;
    sc_out< sc_logic > inputData_ce1;
    sc_out< sc_logic > inputData_we1;
    sc_out< sc_lv<64> > inputData_d1;
    sc_in< sc_lv<64> > inputData_q1;
    sc_out< sc_lv<4> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<64> > output_r_d0;


    // Module declarations
    digitRecognizer(sc_module_name name);
    SC_HAS_PROCESS(digitRecognizer);

    ~digitRecognizer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    digitRecognizer_hbkb* hiddenToOutputWeight_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > hiddenToOutputWeight_address0;
    sc_signal< sc_logic > hiddenToOutputWeight_ce0;
    sc_signal< sc_lv<2> > hiddenToOutputWeight_q0;
    sc_signal< sc_lv<4> > o_fu_74_p2;
    sc_signal< sc_lv<4> > o_reg_120;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond1_fu_68_p2;
    sc_signal< sc_lv<4> > o_1_reg_56;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_2_cast_fu_102_p1;
    sc_signal< sc_lv<32> > tmp_fu_107_p1;
    sc_signal< sc_lv<9> > tmp_1_fu_84_p3;
    sc_signal< sc_lv<10> > tmp_cast_fu_80_p1;
    sc_signal< sc_lv<10> > p_shl_cast_fu_92_p1;
    sc_signal< sc_lv<10> > tmp_2_fu_96_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_68_p2();
    void thread_hiddenToOutputWeight_address0();
    void thread_hiddenToOutputWeight_ce0();
    void thread_inputData_address0();
    void thread_inputData_address1();
    void thread_inputData_ce0();
    void thread_inputData_ce1();
    void thread_inputData_d0();
    void thread_inputData_d1();
    void thread_inputData_we0();
    void thread_inputData_we1();
    void thread_o_fu_74_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl_cast_fu_92_p1();
    void thread_tmp_1_fu_84_p3();
    void thread_tmp_2_cast_fu_102_p1();
    void thread_tmp_2_fu_96_p2();
    void thread_tmp_cast_fu_80_p1();
    void thread_tmp_fu_107_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
