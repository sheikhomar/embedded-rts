// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "digitRecognizer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic digitRecognizer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic digitRecognizer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> digitRecognizer::ap_ST_fsm_state1 = "1";
const sc_lv<3> digitRecognizer::ap_ST_fsm_state2 = "10";
const sc_lv<3> digitRecognizer::ap_ST_fsm_state3 = "100";
const sc_lv<32> digitRecognizer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> digitRecognizer::ap_const_lv32_1 = "1";
const sc_lv<32> digitRecognizer::ap_const_lv32_2 = "10";
const sc_lv<4> digitRecognizer::ap_const_lv4_0 = "0000";
const sc_lv<4> digitRecognizer::ap_const_lv4_A = "1010";
const sc_lv<4> digitRecognizer::ap_const_lv4_1 = "1";
const sc_lv<5> digitRecognizer::ap_const_lv5_0 = "00000";
const sc_lv<1> digitRecognizer::ap_const_lv1_1 = "1";
const sc_lv<10> digitRecognizer::ap_const_lv10_0 = "0000000000";
const sc_lv<64> digitRecognizer::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool digitRecognizer::ap_const_boolean_1 = true;

digitRecognizer::digitRecognizer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hiddenToOutputWeight_U = new digitRecognizer_hbkb("hiddenToOutputWeight_U");
    hiddenToOutputWeight_U->clk(ap_clk);
    hiddenToOutputWeight_U->reset(ap_rst);
    hiddenToOutputWeight_U->address0(hiddenToOutputWeight_address0);
    hiddenToOutputWeight_U->ce0(hiddenToOutputWeight_ce0);
    hiddenToOutputWeight_U->q0(hiddenToOutputWeight_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_68_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_68_p2 );

    SC_METHOD(thread_exitcond1_fu_68_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( o_1_reg_56 );

    SC_METHOD(thread_hiddenToOutputWeight_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_cast_fu_102_p1 );

    SC_METHOD(thread_hiddenToOutputWeight_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_inputData_address0);

    SC_METHOD(thread_inputData_address1);

    SC_METHOD(thread_inputData_ce0);

    SC_METHOD(thread_inputData_ce1);

    SC_METHOD(thread_inputData_d0);

    SC_METHOD(thread_inputData_d1);

    SC_METHOD(thread_inputData_we0);

    SC_METHOD(thread_inputData_we1);

    SC_METHOD(thread_o_fu_74_p2);
    sensitive << ( o_1_reg_56 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_107_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( hiddenToOutputWeight_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_shl_cast_fu_92_p1);
    sensitive << ( tmp_1_fu_84_p3 );

    SC_METHOD(thread_tmp_1_fu_84_p3);
    sensitive << ( o_1_reg_56 );

    SC_METHOD(thread_tmp_2_cast_fu_102_p1);
    sensitive << ( tmp_2_fu_96_p2 );

    SC_METHOD(thread_tmp_2_fu_96_p2);
    sensitive << ( tmp_cast_fu_80_p1 );
    sensitive << ( p_shl_cast_fu_92_p1 );

    SC_METHOD(thread_tmp_cast_fu_80_p1);
    sensitive << ( o_1_reg_56 );

    SC_METHOD(thread_tmp_fu_107_p1);
    sensitive << ( o_1_reg_56 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_68_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "digitRecognizer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inputData_address0, "(port)inputData_address0");
    sc_trace(mVcdFile, inputData_ce0, "(port)inputData_ce0");
    sc_trace(mVcdFile, inputData_we0, "(port)inputData_we0");
    sc_trace(mVcdFile, inputData_d0, "(port)inputData_d0");
    sc_trace(mVcdFile, inputData_q0, "(port)inputData_q0");
    sc_trace(mVcdFile, inputData_address1, "(port)inputData_address1");
    sc_trace(mVcdFile, inputData_ce1, "(port)inputData_ce1");
    sc_trace(mVcdFile, inputData_we1, "(port)inputData_we1");
    sc_trace(mVcdFile, inputData_d1, "(port)inputData_d1");
    sc_trace(mVcdFile, inputData_q1, "(port)inputData_q1");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, hiddenToOutputWeight_address0, "hiddenToOutputWeight_address0");
    sc_trace(mVcdFile, hiddenToOutputWeight_ce0, "hiddenToOutputWeight_ce0");
    sc_trace(mVcdFile, hiddenToOutputWeight_q0, "hiddenToOutputWeight_q0");
    sc_trace(mVcdFile, o_fu_74_p2, "o_fu_74_p2");
    sc_trace(mVcdFile, o_reg_120, "o_reg_120");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond1_fu_68_p2, "exitcond1_fu_68_p2");
    sc_trace(mVcdFile, o_1_reg_56, "o_1_reg_56");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_cast_fu_102_p1, "tmp_2_cast_fu_102_p1");
    sc_trace(mVcdFile, tmp_fu_107_p1, "tmp_fu_107_p1");
    sc_trace(mVcdFile, tmp_1_fu_84_p3, "tmp_1_fu_84_p3");
    sc_trace(mVcdFile, tmp_cast_fu_80_p1, "tmp_cast_fu_80_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_92_p1, "p_shl_cast_fu_92_p1");
    sc_trace(mVcdFile, tmp_2_fu_96_p2, "tmp_2_fu_96_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("digitRecognizer.hdltvin.dat");
    mHdltvoutHandle.open("digitRecognizer.hdltvout.dat");
}

digitRecognizer::~digitRecognizer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete hiddenToOutputWeight_U;
}

void digitRecognizer::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        o_1_reg_56 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        o_1_reg_56 = o_reg_120.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        o_reg_120 = o_fu_74_p2.read();
    }
}

void digitRecognizer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void digitRecognizer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void digitRecognizer::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void digitRecognizer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_68_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void digitRecognizer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void digitRecognizer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_68_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void digitRecognizer::thread_exitcond1_fu_68_p2() {
    exitcond1_fu_68_p2 = (!o_1_reg_56.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(o_1_reg_56.read() == ap_const_lv4_A);
}

void digitRecognizer::thread_hiddenToOutputWeight_address0() {
    hiddenToOutputWeight_address0 =  (sc_lv<9>) (tmp_2_cast_fu_102_p1.read());
}

void digitRecognizer::thread_hiddenToOutputWeight_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        hiddenToOutputWeight_ce0 = ap_const_logic_1;
    } else {
        hiddenToOutputWeight_ce0 = ap_const_logic_0;
    }
}

void digitRecognizer::thread_inputData_address0() {
    inputData_address0 = ap_const_lv10_0;
}

void digitRecognizer::thread_inputData_address1() {
    inputData_address1 = ap_const_lv10_0;
}

void digitRecognizer::thread_inputData_ce0() {
    inputData_ce0 = ap_const_logic_0;
}

void digitRecognizer::thread_inputData_ce1() {
    inputData_ce1 = ap_const_logic_0;
}

void digitRecognizer::thread_inputData_d0() {
    inputData_d0 = ap_const_lv64_0;
}

void digitRecognizer::thread_inputData_d1() {
    inputData_d1 = ap_const_lv64_0;
}

void digitRecognizer::thread_inputData_we0() {
    inputData_we0 = ap_const_logic_0;
}

void digitRecognizer::thread_inputData_we1() {
    inputData_we1 = ap_const_logic_0;
}

void digitRecognizer::thread_o_fu_74_p2() {
    o_fu_74_p2 = (!o_1_reg_56.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(o_1_reg_56.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void digitRecognizer::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<4>) (tmp_fu_107_p1.read());
}

void digitRecognizer::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void digitRecognizer::thread_output_r_d0() {
    output_r_d0 = esl_sext<64,2>(hiddenToOutputWeight_q0.read());
}

void digitRecognizer::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void digitRecognizer::thread_p_shl_cast_fu_92_p1() {
    p_shl_cast_fu_92_p1 = esl_zext<10,9>(tmp_1_fu_84_p3.read());
}

void digitRecognizer::thread_tmp_1_fu_84_p3() {
    tmp_1_fu_84_p3 = esl_concat<4,5>(o_1_reg_56.read(), ap_const_lv5_0);
}

void digitRecognizer::thread_tmp_2_cast_fu_102_p1() {
    tmp_2_cast_fu_102_p1 = esl_zext<32,10>(tmp_2_fu_96_p2.read());
}

void digitRecognizer::thread_tmp_2_fu_96_p2() {
    tmp_2_fu_96_p2 = (!tmp_cast_fu_80_p1.read().is_01() || !p_shl_cast_fu_92_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_cast_fu_80_p1.read()) + sc_biguint<10>(p_shl_cast_fu_92_p1.read()));
}

void digitRecognizer::thread_tmp_cast_fu_80_p1() {
    tmp_cast_fu_80_p1 = esl_zext<10,4>(o_1_reg_56.read());
}

void digitRecognizer::thread_tmp_fu_107_p1() {
    tmp_fu_107_p1 = esl_zext<32,4>(o_1_reg_56.read());
}

void digitRecognizer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_68_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void digitRecognizer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_address0\" :  \"" << inputData_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_ce0\" :  \"" << inputData_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_we0\" :  \"" << inputData_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_d0\" :  \"" << inputData_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputData_q0\" :  \"" << inputData_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_address1\" :  \"" << inputData_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_ce1\" :  \"" << inputData_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_we1\" :  \"" << inputData_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputData_d1\" :  \"" << inputData_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputData_q1\" :  \"" << inputData_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_address0\" :  \"" << output_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ce0\" :  \"" << output_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_we0\" :  \"" << output_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_d0\" :  \"" << output_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

