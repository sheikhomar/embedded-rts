-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitRecognizer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputData_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputData_ce0 : OUT STD_LOGIC;
    inputData_we0 : OUT STD_LOGIC;
    inputData_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inputData_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    inputData_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputData_ce1 : OUT STD_LOGIC;
    inputData_we1 : OUT STD_LOGIC;
    inputData_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inputData_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of digitRecognizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digitRecognizer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.576000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=65,HLS_SYN_LUT=67}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hiddenToOutputWeight_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal hiddenToOutputWeight_ce0 : STD_LOGIC;
    signal hiddenToOutputWeight_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal o_fu_74_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal o_reg_120 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_1_reg_56 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_cast_fu_102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_84_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_80_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_92_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_96_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component digitRecognizer_hbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    hiddenToOutputWeight_U : component digitRecognizer_hbkb
    generic map (
        DataWidth => 2,
        AddressRange => 330,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hiddenToOutputWeight_address0,
        ce0 => hiddenToOutputWeight_ce0,
        q0 => hiddenToOutputWeight_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    o_1_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                o_1_reg_56 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                o_1_reg_56 <= o_reg_120;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                o_reg_120 <= o_fu_74_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_68_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_68_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_68_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_68_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_68_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_68_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_68_p2 <= "1" when (o_1_reg_56 = ap_const_lv4_A) else "0";
    hiddenToOutputWeight_address0 <= tmp_2_cast_fu_102_p1(9 - 1 downto 0);

    hiddenToOutputWeight_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hiddenToOutputWeight_ce0 <= ap_const_logic_1;
        else 
            hiddenToOutputWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputData_address0 <= ap_const_lv10_0;
    inputData_address1 <= ap_const_lv10_0;
    inputData_ce0 <= ap_const_logic_0;
    inputData_ce1 <= ap_const_logic_0;
    inputData_d0 <= ap_const_lv64_0;
    inputData_d1 <= ap_const_lv64_0;
    inputData_we0 <= ap_const_logic_0;
    inputData_we1 <= ap_const_logic_0;
    o_fu_74_p2 <= std_logic_vector(unsigned(o_1_reg_56) + unsigned(ap_const_lv4_1));
    output_r_address0 <= tmp_fu_107_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(hiddenToOutputWeight_q0),64));


    output_r_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_84_p3),10));
    tmp_1_fu_84_p3 <= (o_1_reg_56 & ap_const_lv5_0);
    tmp_2_cast_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_96_p2),32));
    tmp_2_fu_96_p2 <= std_logic_vector(unsigned(tmp_cast_fu_80_p1) + unsigned(p_shl_cast_fu_92_p1));
    tmp_cast_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_1_reg_56),10));
    tmp_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_1_reg_56),32));
end behav;
