-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitRecognizer is
generic (
    C_S_AXI_DIGREC_IO_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_DIGREC_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_digrec_io_AWVALID : IN STD_LOGIC;
    s_axi_digrec_io_AWREADY : OUT STD_LOGIC;
    s_axi_digrec_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_ADDR_WIDTH-1 downto 0);
    s_axi_digrec_io_WVALID : IN STD_LOGIC;
    s_axi_digrec_io_WREADY : OUT STD_LOGIC;
    s_axi_digrec_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_DATA_WIDTH-1 downto 0);
    s_axi_digrec_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_digrec_io_ARVALID : IN STD_LOGIC;
    s_axi_digrec_io_ARREADY : OUT STD_LOGIC;
    s_axi_digrec_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_ADDR_WIDTH-1 downto 0);
    s_axi_digrec_io_RVALID : OUT STD_LOGIC;
    s_axi_digrec_io_RREADY : IN STD_LOGIC;
    s_axi_digrec_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIGREC_IO_DATA_WIDTH-1 downto 0);
    s_axi_digrec_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_digrec_io_BVALID : OUT STD_LOGIC;
    s_axi_digrec_io_BREADY : IN STD_LOGIC;
    s_axi_digrec_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of digitRecognizer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digitRecognizer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.789000,HLS_SYN_LAT=178268,HLS_SYN_TPT=none,HLS_SYN_MEM=70,HLS_SYN_DSP=5,HLS_SYN_FF=1396,HLS_SYN_LUT=1689}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv15_311 : STD_LOGIC_VECTOR (14 downto 0) := "000001100010001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv10_311 : STD_LOGIC_VECTOR (9 downto 0) := "1100010001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputData_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputData_ce0 : STD_LOGIC;
    signal inputData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal inputToHiddenWeights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal inputToHiddenWeights_ce0 : STD_LOGIC;
    signal inputToHiddenWeights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenToOutputWeight_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal hiddenToOutputWeight_ce0 : STD_LOGIC;
    signal hiddenToOutputWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum1_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_245 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum3_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal exitcond2_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state26_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_state33_pp1_stage5_iter1 : BOOLEAN;
    signal ap_block_pp1_stage5_flag00011001 : BOOLEAN;
    signal exitcond_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_exitcond2_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_reg_pp1_iter1_exitcond_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_299_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_487 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal o_2_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal o_2_reg_495 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_2_fu_353_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_529 : STD_LOGIC_VECTOR (9 downto 0);
    signal inputToHiddenWeights_2_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal inputData_load_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_544 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal notrhs_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_3_fu_413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal o_3_reg_562 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_5_fu_435_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_567 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal i_3_fu_481_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_601 : STD_LOGIC_VECTOR (5 downto 0);
    signal hiddenToOutputWeight_2_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state22_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state29_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_flag00011001 : BOOLEAN;
    signal hiddenOut_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hiddenOut_load_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_state10_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_block_state27_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_pp1_stage6_flag00011011 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_pp1_stage5_flag00011011 : BOOLEAN;
    signal hiddenOut_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal hiddenOut_ce0 : STD_LOGIC;
    signal hiddenOut_we0 : STD_LOGIC;
    signal hiddenOut_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_reg_188 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal phi_mul_reg_200 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_phi_fu_216_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal o_1_reg_233 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_1_phi_fu_249_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal phi_mul_cast_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6_flag00000000 : BOOLEAN;
    signal ap_block_pp1_stage6_flag00000000 : BOOLEAN;
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_pp1_stage2_flag00000000 : BOOLEAN;
    signal tmp_5_cast_fu_327_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_16_fu_331_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum2_fu_342_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum1_to_int_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_373_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_423_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_cast_fu_419_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_431_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_456_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_460_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_470_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal ap_block_state8_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage1_flag00011011 : BOOLEAN;
    signal ap_block_state23_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state30_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage2_flag00011001 : BOOLEAN;
    signal ap_block_state24_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state31_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_pp1_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage3_flag00011001 : BOOLEAN;
    signal ap_block_state25_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state32_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp1_stage4_flag00011001 : BOOLEAN;
    signal ap_block_pp1_stage6_flag00011001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component digitRecognizer_feOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_ffYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_fg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component digitRecognizer_ibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_hcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_hdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digitRecognizer_digrec_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputData_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        inputData_ce0 : IN STD_LOGIC;
        inputData_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inputToHiddenWeights_U : component digitRecognizer_ibkb
    generic map (
        DataWidth => 32,
        AddressRange => 25120,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => inputToHiddenWeights_address0,
        ce0 => inputToHiddenWeights_ce0,
        q0 => inputToHiddenWeights_q0);

    hiddenToOutputWeight_U : component digitRecognizer_hcud
    generic map (
        DataWidth => 32,
        AddressRange => 330,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hiddenToOutputWeight_address0,
        ce0 => hiddenToOutputWeight_ce0,
        q0 => hiddenToOutputWeight_q0);

    digitRecognizer_digrec_io_s_axi_U : component digitRecognizer_digrec_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIGREC_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIGREC_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_digrec_io_AWVALID,
        AWREADY => s_axi_digrec_io_AWREADY,
        AWADDR => s_axi_digrec_io_AWADDR,
        WVALID => s_axi_digrec_io_WVALID,
        WREADY => s_axi_digrec_io_WREADY,
        WDATA => s_axi_digrec_io_WDATA,
        WSTRB => s_axi_digrec_io_WSTRB,
        ARVALID => s_axi_digrec_io_ARVALID,
        ARREADY => s_axi_digrec_io_ARREADY,
        ARADDR => s_axi_digrec_io_ARADDR,
        RVALID => s_axi_digrec_io_RVALID,
        RREADY => s_axi_digrec_io_RREADY,
        RDATA => s_axi_digrec_io_RDATA,
        RRESP => s_axi_digrec_io_RRESP,
        BVALID => s_axi_digrec_io_BVALID,
        BREADY => s_axi_digrec_io_BREADY,
        BRESP => s_axi_digrec_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputData_address0 => inputData_address0,
        inputData_ce0 => inputData_ce0,
        inputData_q0 => inputData_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => sum3_reg_256);

    hiddenOut_U : component digitRecognizer_hdEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hiddenOut_address0,
        ce0 => hiddenOut_ce0,
        we0 => hiddenOut_we0,
        d0 => hiddenOut_d0,
        q0 => hiddenOut_q0);

    digitRecognizer_feOg_U0 : component digitRecognizer_feOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_267_p0,
        din1 => reg_283,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    digitRecognizer_ffYi_U1 : component digitRecognizer_ffYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_273_p0,
        din1 => grp_fu_273_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_273_p2);

    digitRecognizer_fg8j_U2 : component digitRecognizer_fg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum1_reg_223,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_14_fu_277_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 xor ap_const_logic_1);
                elsif ((((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (((ap_block_pp1_stage6_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state21 xor ap_const_logic_1);
                elsif ((((ap_block_pp1_stage6_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_587) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then 
                i_1_reg_245 <= i_3_reg_601;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_1_reg_245 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_515 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                i_reg_212 <= i_2_reg_529;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_212 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    o_1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_305_p2 = ap_const_lv1_1))) then 
                o_1_reg_233 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                o_1_reg_233 <= o_3_reg_562;
            end if; 
        end if;
    end process;

    o_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                o_reg_188 <= o_2_reg_495;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                o_reg_188 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_mul_reg_200 <= next_mul_reg_487;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_200 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    sum1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond2_reg_515))) then 
                sum1_reg_223 <= grp_fu_267_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum1_reg_223 <= inputToHiddenWeights_q0;
            end if; 
        end if;
    end process;

    sum3_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_reg_587))) then 
                sum3_reg_256 <= grp_fu_267_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum3_reg_256 <= hiddenToOutputWeight_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond2_reg_515 <= exitcond2_reg_515;
                exitcond2_reg_515 <= exitcond2_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_reg_587 <= exitcond_reg_587;
                exitcond_reg_587 <= exitcond_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_reg_587) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0))) then
                hiddenOut_load_reg_611 <= hiddenOut_q0;
                hiddenToOutputWeight_2_reg_606 <= hiddenToOutputWeight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_fu_321_p2))) then
                i_2_reg_529 <= i_2_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_fu_450_p2))) then
                i_3_reg_601 <= i_3_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_515 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                inputData_load_reg_539 <= inputData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_515 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                inputToHiddenWeights_2_reg_534 <= inputToHiddenWeights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_487 <= next_mul_fu_299_p2;
                o_2_reg_495 <= o_2_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                notlhs_reg_544 <= notlhs_fu_377_p2;
                notrhs_reg_549 <= notrhs_fu_383_p2;
                tmp_14_reg_554 <= tmp_14_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                o_3_reg_562 <= o_3_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (exitcond2_reg_515 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_587)))) then
                reg_283 <= grp_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    tmp_1_reg_577(3 downto 0) <= tmp_1_fu_446_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond1_fu_407_p2))) then
                tmp_5_reg_567 <= tmp_5_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_reg_505(5 downto 0) <= tmp_fu_317_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_505(31 downto 6) <= "00000000000000000000000000";
    tmp_1_reg_577(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage5, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, exitcond3_fu_305_p2, exitcond2_fu_321_p2, ap_CS_fsm_state19, exitcond1_fu_407_p2, exitcond_fu_450_p2, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp1_stage0_flag00011011, ap_block_pp1_stage6_flag00011011, ap_block_pp1_stage5_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011, ap_block_pp1_stage1_flag00011011, ap_block_pp1_stage2_flag00011011, ap_block_pp1_stage3_flag00011011, ap_block_pp1_stage4_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_305_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_fu_321_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_fu_321_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if (((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_fu_407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_450_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_450_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_block_pp1_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_block_pp1_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_block_pp1_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if (((ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_block_pp1_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(15);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(16);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(19);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(21);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond2_fu_321_p2)
    begin
        if ((exitcond2_fu_321_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond_fu_450_p2)
    begin
        if ((exitcond_fu_450_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19, exitcond1_fu_407_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_fu_407_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19, exitcond1_fu_407_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_fu_407_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_407_p2 <= "1" when (o_1_reg_233 = ap_const_lv4_A) else "0";
    exitcond2_fu_321_p2 <= "1" when (i_phi_fu_216_p4 = ap_const_lv10_311) else "0";
    exitcond3_fu_305_p2 <= "1" when (o_reg_188 = ap_const_lv6_20) else "0";
    exitcond_fu_450_p2 <= "1" when (i_1_phi_fu_249_p4 = ap_const_lv6_21) else "0";

    grp_fu_267_p0_assign_proc : process(sum1_reg_223, sum3_reg_256, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp1_stage6, ap_block_pp0_stage6_flag00000000, ap_block_pp1_stage6_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_block_pp1_stage6_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_267_p0 <= sum3_reg_256;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_267_p0 <= sum1_reg_223;
        else 
            grp_fu_267_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_273_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, inputToHiddenWeights_2_reg_534, hiddenToOutputWeight_2_reg_606, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00000000, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_273_p0 <= hiddenToOutputWeight_2_reg_606;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_273_p0 <= inputToHiddenWeights_2_reg_534;
        else 
            grp_fu_273_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_273_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, inputData_load_reg_539, hiddenOut_load_reg_611, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00000000, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_block_pp1_stage2_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_273_p1 <= hiddenOut_load_reg_611;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_273_p1 <= inputData_load_reg_539;
        else 
            grp_fu_273_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hiddenOut_address0_assign_proc : process(ap_enable_reg_pp1_iter0, tmp_reg_505, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state18, ap_block_pp1_stage0_flag00000000, tmp_4_cast_fu_476_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            hiddenOut_address0 <= tmp_4_cast_fu_476_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hiddenOut_address0 <= tmp_reg_505(5 - 1 downto 0);
        else 
            hiddenOut_address0 <= "XXXXX";
        end if; 
    end process;


    hiddenOut_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            hiddenOut_ce0 <= ap_const_logic_1;
        else 
            hiddenOut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hiddenOut_d0 <= 
        ap_const_lv32_0 when (tmp_15_fu_393_p2(0) = '1') else 
        sum1_reg_223;

    hiddenOut_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hiddenOut_we0 <= ap_const_logic_1;
        else 
            hiddenOut_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hiddenToOutputWeight_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00000000, tmp_18_cast_fu_441_p1, tmp_20_cast_fu_465_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            hiddenToOutputWeight_address0 <= tmp_20_cast_fu_465_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hiddenToOutputWeight_address0 <= tmp_18_cast_fu_441_p1(9 - 1 downto 0);
        else 
            hiddenToOutputWeight_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    hiddenToOutputWeight_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_state19, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)))) then 
            hiddenToOutputWeight_ce0 <= ap_const_logic_1;
        else 
            hiddenToOutputWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    i_1_phi_fu_249_p4_assign_proc : process(i_1_reg_245, exitcond_reg_587, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage0, i_3_reg_601, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_587) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_phi_fu_249_p4 <= i_3_reg_601;
        else 
            i_1_phi_fu_249_p4 <= i_1_reg_245;
        end if; 
    end process;

    i_2_fu_353_p2 <= std_logic_vector(unsigned(i_phi_fu_216_p4) + unsigned(ap_const_lv10_1));
    i_3_fu_481_p2 <= std_logic_vector(unsigned(i_1_phi_fu_249_p4) + unsigned(ap_const_lv6_1));

    i_phi_fu_216_p4_assign_proc : process(i_reg_212, exitcond2_reg_515, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, i_2_reg_529, ap_block_pp0_stage0_flag00000000)
    begin
        if (((exitcond2_reg_515 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_phi_fu_216_p4 <= i_2_reg_529;
        else 
            i_phi_fu_216_p4 <= i_reg_212;
        end if; 
    end process;

    inputData_address0 <= sum2_cast_fu_348_p1(10 - 1 downto 0);

    inputData_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            inputData_ce0 <= ap_const_logic_1;
        else 
            inputData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inputToHiddenWeights_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, phi_mul_cast_fu_294_p1, tmp_19_cast_fu_337_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            inputToHiddenWeights_address0 <= tmp_19_cast_fu_337_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inputToHiddenWeights_address0 <= phi_mul_cast_fu_294_p1(15 - 1 downto 0);
        else 
            inputToHiddenWeights_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    inputToHiddenWeights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            inputToHiddenWeights_ce0 <= ap_const_logic_1;
        else 
            inputToHiddenWeights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_299_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(ap_const_lv15_311));
    notlhs_fu_377_p2 <= "0" when (tmp_2_fu_363_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_383_p2 <= "1" when (tmp_12_fu_373_p1 = ap_const_lv23_0) else "0";
    o_2_fu_311_p2 <= std_logic_vector(unsigned(o_reg_188) + unsigned(ap_const_lv6_1));
    o_3_fu_413_p2 <= std_logic_vector(unsigned(o_1_reg_233) + unsigned(ap_const_lv4_1));
    output_r_address0 <= tmp_1_reg_577(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_423_p3),10));
    phi_mul_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_200),32));
    sum1_to_int_fu_359_p1 <= sum1_reg_223;
    sum2_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_342_p2),32));
    sum2_fu_342_p2 <= std_logic_vector(unsigned(i_phi_fu_216_p4) + unsigned(ap_const_lv10_3FF));
    tmp_12_fu_373_p1 <= sum1_to_int_fu_359_p1(23 - 1 downto 0);
    tmp_13_fu_389_p2 <= (notrhs_reg_549 or notlhs_reg_544);
    tmp_15_fu_393_p2 <= (tmp_13_fu_389_p2 and tmp_14_reg_554);
    tmp_16_fu_331_p2 <= std_logic_vector(unsigned(phi_mul_reg_200) + unsigned(tmp_5_cast_fu_327_p1));
    tmp_17_fu_460_p2 <= std_logic_vector(unsigned(tmp_5_reg_567) + unsigned(tmp_cast_fu_456_p1));
    tmp_18_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_435_p2),32));
    tmp_19_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_331_p2),32));
    tmp_1_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_1_reg_233),10));
    tmp_1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_1_reg_233),32));
    tmp_20_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_460_p2),32));
    tmp_2_fu_363_p4 <= sum1_to_int_fu_359_p1(30 downto 23);
    tmp_4_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_470_p2),32));
    tmp_4_fu_470_p2 <= std_logic_vector(unsigned(i_1_phi_fu_249_p4) + unsigned(ap_const_lv6_3F));
    tmp_5_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_phi_fu_216_p4),15));
    tmp_5_fu_435_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_419_p1) + unsigned(p_shl_cast_fu_431_p1));
    tmp_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_phi_fu_249_p4),10));
    tmp_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_188),32));
    tmp_s_fu_423_p3 <= (o_1_reg_233 & ap_const_lv5_0);
end behav;
