// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="digitRecognizer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.789000,HLS_SYN_LAT=178268,HLS_SYN_TPT=none,HLS_SYN_MEM=70,HLS_SYN_DSP=5,HLS_SYN_FF=1396,HLS_SYN_LUT=1689}" *)

module digitRecognizer (
        ap_clk,
        ap_rst_n,
        s_axi_digrec_io_AWVALID,
        s_axi_digrec_io_AWREADY,
        s_axi_digrec_io_AWADDR,
        s_axi_digrec_io_WVALID,
        s_axi_digrec_io_WREADY,
        s_axi_digrec_io_WDATA,
        s_axi_digrec_io_WSTRB,
        s_axi_digrec_io_ARVALID,
        s_axi_digrec_io_ARREADY,
        s_axi_digrec_io_ARADDR,
        s_axi_digrec_io_RVALID,
        s_axi_digrec_io_RREADY,
        s_axi_digrec_io_RDATA,
        s_axi_digrec_io_RRESP,
        s_axi_digrec_io_BVALID,
        s_axi_digrec_io_BREADY,
        s_axi_digrec_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_pp0_stage0 = 22'd8;
parameter    ap_ST_fsm_pp0_stage1 = 22'd16;
parameter    ap_ST_fsm_pp0_stage2 = 22'd32;
parameter    ap_ST_fsm_pp0_stage3 = 22'd64;
parameter    ap_ST_fsm_pp0_stage4 = 22'd128;
parameter    ap_ST_fsm_pp0_stage5 = 22'd256;
parameter    ap_ST_fsm_pp0_stage6 = 22'd512;
parameter    ap_ST_fsm_state17 = 22'd1024;
parameter    ap_ST_fsm_state18 = 22'd2048;
parameter    ap_ST_fsm_state19 = 22'd4096;
parameter    ap_ST_fsm_state20 = 22'd8192;
parameter    ap_ST_fsm_pp1_stage0 = 22'd16384;
parameter    ap_ST_fsm_pp1_stage1 = 22'd32768;
parameter    ap_ST_fsm_pp1_stage2 = 22'd65536;
parameter    ap_ST_fsm_pp1_stage3 = 22'd131072;
parameter    ap_ST_fsm_pp1_stage4 = 22'd262144;
parameter    ap_ST_fsm_pp1_stage5 = 22'd524288;
parameter    ap_ST_fsm_pp1_stage6 = 22'd1048576;
parameter    ap_ST_fsm_state34 = 22'd2097152;
parameter    C_S_AXI_DIGREC_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_DIGREC_IO_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIGREC_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_digrec_io_AWVALID;
output   s_axi_digrec_io_AWREADY;
input  [C_S_AXI_DIGREC_IO_ADDR_WIDTH - 1:0] s_axi_digrec_io_AWADDR;
input   s_axi_digrec_io_WVALID;
output   s_axi_digrec_io_WREADY;
input  [C_S_AXI_DIGREC_IO_DATA_WIDTH - 1:0] s_axi_digrec_io_WDATA;
input  [C_S_AXI_DIGREC_IO_WSTRB_WIDTH - 1:0] s_axi_digrec_io_WSTRB;
input   s_axi_digrec_io_ARVALID;
output   s_axi_digrec_io_ARREADY;
input  [C_S_AXI_DIGREC_IO_ADDR_WIDTH - 1:0] s_axi_digrec_io_ARADDR;
output   s_axi_digrec_io_RVALID;
input   s_axi_digrec_io_RREADY;
output  [C_S_AXI_DIGREC_IO_DATA_WIDTH - 1:0] s_axi_digrec_io_RDATA;
output  [1:0] s_axi_digrec_io_RRESP;
output   s_axi_digrec_io_BVALID;
input   s_axi_digrec_io_BREADY;
output  [1:0] s_axi_digrec_io_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [9:0] inputData_address0;
reg    inputData_ce0;
wire   [31:0] inputData_q0;
wire   [3:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [14:0] inputToHiddenWeights_address0;
reg    inputToHiddenWeights_ce0;
wire   [31:0] inputToHiddenWeights_q0;
reg   [8:0] hiddenToOutputWeight_address0;
reg    hiddenToOutputWeight_ce0;
wire   [31:0] hiddenToOutputWeight_q0;
reg   [9:0] i_reg_212;
reg   [31:0] sum1_reg_223;
reg   [5:0] i_1_reg_245;
reg   [31:0] sum3_reg_256;
wire   [31:0] grp_fu_273_p2;
reg   [31:0] reg_283;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_flag00011001;
reg   [0:0] exitcond2_reg_515;
wire    ap_CS_fsm_pp1_stage5;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state26_pp1_stage5_iter0;
wire    ap_block_state33_pp1_stage5_iter1;
wire    ap_block_pp1_stage5_flag00011001;
reg   [0:0] exitcond_reg_587;
wire   [31:0] grp_fu_267_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] ap_reg_pp0_iter1_exitcond2_reg_515;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] ap_reg_pp1_iter1_exitcond_reg_587;
wire   [14:0] next_mul_fu_299_p2;
reg   [14:0] next_mul_reg_487;
wire    ap_CS_fsm_state2;
wire   [5:0] o_2_fu_311_p2;
reg   [5:0] o_2_reg_495;
wire   [0:0] exitcond3_fu_305_p2;
wire   [31:0] tmp_fu_317_p1;
reg   [31:0] tmp_reg_505;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_321_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
wire   [9:0] i_2_fu_353_p2;
reg   [9:0] i_2_reg_529;
reg   [31:0] inputToHiddenWeights_2_reg_534;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
reg   [31:0] inputData_load_reg_539;
wire   [0:0] notlhs_fu_377_p2;
reg   [0:0] notlhs_reg_544;
wire    ap_CS_fsm_state17;
wire   [0:0] notrhs_fu_383_p2;
reg   [0:0] notrhs_reg_549;
wire   [0:0] tmp_14_fu_277_p2;
reg   [0:0] tmp_14_reg_554;
wire   [3:0] o_3_fu_413_p2;
reg   [3:0] o_3_reg_562;
wire    ap_CS_fsm_state19;
wire   [9:0] tmp_5_fu_435_p2;
reg   [9:0] tmp_5_reg_567;
wire   [0:0] exitcond1_fu_407_p2;
wire   [31:0] tmp_1_fu_446_p1;
reg   [31:0] tmp_1_reg_577;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond_fu_450_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_flag00011001;
wire   [5:0] i_3_fu_481_p2;
reg   [5:0] i_3_reg_601;
reg   [31:0] hiddenToOutputWeight_2_reg_606;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state22_pp1_stage1_iter0;
wire    ap_block_state29_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_flag00011001;
wire   [31:0] hiddenOut_q0;
reg   [31:0] hiddenOut_load_reg_611;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_state10_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state21;
wire    ap_block_state27_pp1_stage6_iter0;
wire    ap_block_pp1_stage6_flag00011011;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage5_flag00011011;
reg   [4:0] hiddenOut_address0;
reg    hiddenOut_ce0;
reg    hiddenOut_we0;
wire   [31:0] hiddenOut_d0;
reg   [5:0] o_reg_188;
wire    ap_CS_fsm_state18;
reg   [14:0] phi_mul_reg_200;
reg   [9:0] i_phi_fu_216_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [3:0] o_1_reg_233;
wire    ap_CS_fsm_state34;
reg   [5:0] i_1_phi_fu_249_p4;
wire    ap_block_pp1_stage0_flag00000000;
wire   [31:0] phi_mul_cast_fu_294_p1;
wire   [31:0] tmp_19_cast_fu_337_p1;
wire   [31:0] sum2_cast_fu_348_p1;
wire   [31:0] tmp_18_cast_fu_441_p1;
wire   [31:0] tmp_20_cast_fu_465_p1;
wire   [31:0] tmp_4_cast_fu_476_p1;
reg   [31:0] grp_fu_267_p0;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_block_pp1_stage6_flag00000000;
reg   [31:0] grp_fu_273_p0;
reg   [31:0] grp_fu_273_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_flag00000000;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2_flag00000000;
wire   [14:0] tmp_5_cast_fu_327_p1;
wire   [14:0] tmp_16_fu_331_p2;
wire   [9:0] sum2_fu_342_p2;
wire   [31:0] sum1_to_int_fu_359_p1;
wire   [7:0] tmp_2_fu_363_p4;
wire   [22:0] tmp_12_fu_373_p1;
wire   [0:0] tmp_13_fu_389_p2;
wire   [0:0] tmp_15_fu_393_p2;
wire   [8:0] tmp_s_fu_423_p3;
wire   [9:0] tmp_1_cast_fu_419_p1;
wire   [9:0] p_shl_cast_fu_431_p1;
wire   [9:0] tmp_cast_fu_456_p1;
wire   [9:0] tmp_17_fu_460_p2;
wire   [5:0] tmp_4_fu_470_p2;
reg   [21:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_block_pp0_stage2_flag00011001;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage3_flag00011001;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_block_pp1_stage1_flag00011011;
wire    ap_block_state23_pp1_stage2_iter0;
wire    ap_block_state30_pp1_stage2_iter1;
wire    ap_block_pp1_stage2_flag00011011;
wire    ap_block_pp1_stage2_flag00011001;
wire    ap_block_state24_pp1_stage3_iter0;
wire    ap_block_state31_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_flag00011011;
wire    ap_block_pp1_stage3_flag00011001;
wire    ap_block_state25_pp1_stage4_iter0;
wire    ap_block_state32_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_flag00011011;
wire    ap_block_pp1_stage4_flag00011001;
wire    ap_block_pp1_stage6_flag00011001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

digitRecognizer_ibkb #(
    .DataWidth( 32 ),
    .AddressRange( 25120 ),
    .AddressWidth( 15 ))
inputToHiddenWeights_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputToHiddenWeights_address0),
    .ce0(inputToHiddenWeights_ce0),
    .q0(inputToHiddenWeights_q0)
);

digitRecognizer_hcud #(
    .DataWidth( 32 ),
    .AddressRange( 330 ),
    .AddressWidth( 9 ))
hiddenToOutputWeight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hiddenToOutputWeight_address0),
    .ce0(hiddenToOutputWeight_ce0),
    .q0(hiddenToOutputWeight_q0)
);

digitRecognizer_digrec_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIGREC_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIGREC_IO_DATA_WIDTH ))
digitRecognizer_digrec_io_s_axi_U(
    .AWVALID(s_axi_digrec_io_AWVALID),
    .AWREADY(s_axi_digrec_io_AWREADY),
    .AWADDR(s_axi_digrec_io_AWADDR),
    .WVALID(s_axi_digrec_io_WVALID),
    .WREADY(s_axi_digrec_io_WREADY),
    .WDATA(s_axi_digrec_io_WDATA),
    .WSTRB(s_axi_digrec_io_WSTRB),
    .ARVALID(s_axi_digrec_io_ARVALID),
    .ARREADY(s_axi_digrec_io_ARREADY),
    .ARADDR(s_axi_digrec_io_ARADDR),
    .RVALID(s_axi_digrec_io_RVALID),
    .RREADY(s_axi_digrec_io_RREADY),
    .RDATA(s_axi_digrec_io_RDATA),
    .RRESP(s_axi_digrec_io_RRESP),
    .BVALID(s_axi_digrec_io_BVALID),
    .BREADY(s_axi_digrec_io_BREADY),
    .BRESP(s_axi_digrec_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputData_address0(inputData_address0),
    .inputData_ce0(inputData_ce0),
    .inputData_q0(inputData_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(sum3_reg_256)
);

digitRecognizer_hdEe #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
hiddenOut_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hiddenOut_address0),
    .ce0(hiddenOut_ce0),
    .we0(hiddenOut_we0),
    .d0(hiddenOut_d0),
    .q0(hiddenOut_q0)
);

digitRecognizer_feOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
digitRecognizer_feOg_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_267_p0),
    .din1(reg_283),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

digitRecognizer_ffYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
digitRecognizer_ffYi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_273_p0),
    .din1(grp_fu_273_p1),
    .ce(1'b1),
    .dout(grp_fu_273_p2)
);

digitRecognizer_fg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
digitRecognizer_fg8j_U2(
    .din0(sum1_reg_223),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_14_fu_277_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (((ap_block_pp0_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 ^ 1'b1);
        end else if ((((ap_block_pp0_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state21))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state21) & (((ap_block_pp1_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (ap_block_pp1_stage5_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state21 ^ 1'b1);
        end else if ((((ap_block_pp1_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (ap_block_pp1_stage5_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_reg_587) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        i_1_reg_245 <= i_3_reg_601;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_1_reg_245 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_515 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_reg_212 <= i_2_reg_529;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_212 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_305_p2 == 1'd1))) begin
        o_1_reg_233 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        o_1_reg_233 <= o_3_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        o_reg_188 <= o_2_reg_495;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        o_reg_188 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_mul_reg_200 <= next_mul_reg_487;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_200 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond2_reg_515))) begin
        sum1_reg_223 <= grp_fu_267_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum1_reg_223 <= inputToHiddenWeights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage5) & (ap_block_pp1_stage5_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == ap_reg_pp1_iter1_exitcond_reg_587))) begin
        sum3_reg_256 <= grp_fu_267_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sum3_reg_256 <= hiddenToOutputWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond2_reg_515 <= exitcond2_reg_515;
        exitcond2_reg_515 <= exitcond2_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_exitcond_reg_587 <= exitcond_reg_587;
        exitcond_reg_587 <= exitcond_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_reg_587) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_block_pp1_stage1_flag00011001 == 1'b0))) begin
        hiddenOut_load_reg_611 <= hiddenOut_q0;
        hiddenToOutputWeight_2_reg_606 <= hiddenToOutputWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond2_fu_321_p2))) begin
        i_2_reg_529 <= i_2_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_fu_450_p2))) begin
        i_3_reg_601 <= i_3_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_515 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        inputData_load_reg_539 <= inputData_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_515 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        inputToHiddenWeights_2_reg_534 <= inputToHiddenWeights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_487 <= next_mul_fu_299_p2;
        o_2_reg_495 <= o_2_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        notlhs_reg_544 <= notlhs_fu_377_p2;
        notrhs_reg_549 <= notrhs_fu_383_p2;
        tmp_14_reg_554 <= tmp_14_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        o_3_reg_562 <= o_3_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (exitcond2_reg_515 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage5_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_587)))) begin
        reg_283 <= grp_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_1_reg_577[3 : 0] <= tmp_1_fu_446_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == exitcond1_fu_407_p2))) begin
        tmp_5_reg_567 <= tmp_5_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_505[5 : 0] <= tmp_fu_317_p1[5 : 0];
    end
end

always @ (*) begin
    if ((exitcond2_fu_321_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_450_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_fu_407_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_fu_407_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_block_pp1_stage6_flag00000000 == 1'b0))) begin
        grp_fu_267_p0 = sum3_reg_256;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0))) begin
        grp_fu_267_p0 = sum1_reg_223;
    end else begin
        grp_fu_267_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00000000 == 1'b0))) begin
        grp_fu_273_p0 = hiddenToOutputWeight_2_reg_606;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        grp_fu_273_p0 = inputToHiddenWeights_2_reg_534;
    end else begin
        grp_fu_273_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_block_pp1_stage2_flag00000000 == 1'b0))) begin
        grp_fu_273_p1 = hiddenOut_load_reg_611;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        grp_fu_273_p1 = inputData_load_reg_539;
    end else begin
        grp_fu_273_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        hiddenOut_address0 = tmp_4_cast_fu_476_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hiddenOut_address0 = tmp_reg_505;
    end else begin
        hiddenOut_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state18))) begin
        hiddenOut_ce0 = 1'b1;
    end else begin
        hiddenOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hiddenOut_we0 = 1'b1;
    end else begin
        hiddenOut_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        hiddenToOutputWeight_address0 = tmp_20_cast_fu_465_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        hiddenToOutputWeight_address0 = tmp_18_cast_fu_441_p1;
    end else begin
        hiddenToOutputWeight_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0)))) begin
        hiddenToOutputWeight_ce0 = 1'b1;
    end else begin
        hiddenToOutputWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_587) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        i_1_phi_fu_249_p4 = i_3_reg_601;
    end else begin
        i_1_phi_fu_249_p4 = i_1_reg_245;
    end
end

always @ (*) begin
    if (((exitcond2_reg_515 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_216_p4 = i_2_reg_529;
    end else begin
        i_phi_fu_216_p4 = i_reg_212;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        inputData_ce0 = 1'b1;
    end else begin
        inputData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        inputToHiddenWeights_address0 = tmp_19_cast_fu_337_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inputToHiddenWeights_address0 = phi_mul_cast_fu_294_p1;
    end else begin
        inputToHiddenWeights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        inputToHiddenWeights_ce0 = 1'b1;
    end else begin
        inputToHiddenWeights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond2_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond2_fu_321_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (((ap_block_pp0_stage5_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_fu_407_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (((ap_block_pp1_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_fu_450_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_fu_450_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((ap_block_pp1_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((ap_block_pp1_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((ap_block_pp1_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((ap_block_pp1_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if (((ap_block_pp1_stage5_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp1_stage5) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else if (((1'b1 == ap_CS_fsm_pp1_stage5) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((ap_block_pp1_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd21];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_407_p2 = ((o_1_reg_233 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_321_p2 = ((i_phi_fu_216_p4 == 10'd785) ? 1'b1 : 1'b0);

assign exitcond3_fu_305_p2 = ((o_reg_188 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_450_p2 = ((i_1_phi_fu_249_p4 == 6'd33) ? 1'b1 : 1'b0);

assign hiddenOut_d0 = ((tmp_15_fu_393_p2[0:0] === 1'b1) ? 32'd0 : sum1_reg_223);

assign i_2_fu_353_p2 = (i_phi_fu_216_p4 + 10'd1);

assign i_3_fu_481_p2 = (i_1_phi_fu_249_p4 + 6'd1);

assign inputData_address0 = sum2_cast_fu_348_p1;

assign next_mul_fu_299_p2 = (phi_mul_reg_200 + 15'd785);

assign notlhs_fu_377_p2 = ((tmp_2_fu_363_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_383_p2 = ((tmp_12_fu_373_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_2_fu_311_p2 = (o_reg_188 + 6'd1);

assign o_3_fu_413_p2 = (o_1_reg_233 + 4'd1);

assign output_r_address0 = tmp_1_reg_577;

assign p_shl_cast_fu_431_p1 = tmp_s_fu_423_p3;

assign phi_mul_cast_fu_294_p1 = phi_mul_reg_200;

assign sum1_to_int_fu_359_p1 = sum1_reg_223;

assign sum2_cast_fu_348_p1 = sum2_fu_342_p2;

assign sum2_fu_342_p2 = ($signed(i_phi_fu_216_p4) + $signed(10'd1023));

assign tmp_12_fu_373_p1 = sum1_to_int_fu_359_p1[22:0];

assign tmp_13_fu_389_p2 = (notrhs_reg_549 | notlhs_reg_544);

assign tmp_15_fu_393_p2 = (tmp_13_fu_389_p2 & tmp_14_reg_554);

assign tmp_16_fu_331_p2 = (phi_mul_reg_200 + tmp_5_cast_fu_327_p1);

assign tmp_17_fu_460_p2 = (tmp_5_reg_567 + tmp_cast_fu_456_p1);

assign tmp_18_cast_fu_441_p1 = tmp_5_fu_435_p2;

assign tmp_19_cast_fu_337_p1 = tmp_16_fu_331_p2;

assign tmp_1_cast_fu_419_p1 = o_1_reg_233;

assign tmp_1_fu_446_p1 = o_1_reg_233;

assign tmp_20_cast_fu_465_p1 = tmp_17_fu_460_p2;

assign tmp_2_fu_363_p4 = {{sum1_to_int_fu_359_p1[30:23]}};

assign tmp_4_cast_fu_476_p1 = tmp_4_fu_470_p2;

assign tmp_4_fu_470_p2 = ($signed(i_1_phi_fu_249_p4) + $signed(6'd63));

assign tmp_5_cast_fu_327_p1 = i_phi_fu_216_p4;

assign tmp_5_fu_435_p2 = (tmp_1_cast_fu_419_p1 + p_shl_cast_fu_431_p1);

assign tmp_cast_fu_456_p1 = i_1_phi_fu_249_p4;

assign tmp_fu_317_p1 = o_reg_188;

assign tmp_s_fu_423_p3 = {{o_1_reg_233}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_505[31:6] <= 26'b00000000000000000000000000;
    tmp_1_reg_577[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //digitRecognizer
