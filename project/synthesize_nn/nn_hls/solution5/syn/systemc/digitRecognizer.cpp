// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "digitRecognizer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int digitRecognizer::C_S_AXI_DATA_WIDTH = "100000";
const int digitRecognizer::C_S_AXI_WSTRB_WIDTH = "100";
const int digitRecognizer::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic digitRecognizer::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> digitRecognizer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic digitRecognizer::ap_const_logic_0 = sc_dt::Log_0;

digitRecognizer::digitRecognizer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    digitRecognizer_digrec_io_s_axi_U = new digitRecognizer_digrec_io_s_axi<C_S_AXI_DIGREC_IO_ADDR_WIDTH,C_S_AXI_DIGREC_IO_DATA_WIDTH>("digitRecognizer_digrec_io_s_axi_U");
    digitRecognizer_digrec_io_s_axi_U->AWVALID(s_axi_digrec_io_AWVALID);
    digitRecognizer_digrec_io_s_axi_U->AWREADY(s_axi_digrec_io_AWREADY);
    digitRecognizer_digrec_io_s_axi_U->AWADDR(s_axi_digrec_io_AWADDR);
    digitRecognizer_digrec_io_s_axi_U->WVALID(s_axi_digrec_io_WVALID);
    digitRecognizer_digrec_io_s_axi_U->WREADY(s_axi_digrec_io_WREADY);
    digitRecognizer_digrec_io_s_axi_U->WDATA(s_axi_digrec_io_WDATA);
    digitRecognizer_digrec_io_s_axi_U->WSTRB(s_axi_digrec_io_WSTRB);
    digitRecognizer_digrec_io_s_axi_U->ARVALID(s_axi_digrec_io_ARVALID);
    digitRecognizer_digrec_io_s_axi_U->ARREADY(s_axi_digrec_io_ARREADY);
    digitRecognizer_digrec_io_s_axi_U->ARADDR(s_axi_digrec_io_ARADDR);
    digitRecognizer_digrec_io_s_axi_U->RVALID(s_axi_digrec_io_RVALID);
    digitRecognizer_digrec_io_s_axi_U->RREADY(s_axi_digrec_io_RREADY);
    digitRecognizer_digrec_io_s_axi_U->RDATA(s_axi_digrec_io_RDATA);
    digitRecognizer_digrec_io_s_axi_U->RRESP(s_axi_digrec_io_RRESP);
    digitRecognizer_digrec_io_s_axi_U->BVALID(s_axi_digrec_io_BVALID);
    digitRecognizer_digrec_io_s_axi_U->BREADY(s_axi_digrec_io_BREADY);
    digitRecognizer_digrec_io_s_axi_U->BRESP(s_axi_digrec_io_BRESP);
    digitRecognizer_digrec_io_s_axi_U->ACLK(ap_clk);
    digitRecognizer_digrec_io_s_axi_U->ARESET(ap_rst_n_inv);
    digitRecognizer_digrec_io_s_axi_U->ACLK_EN(ap_var_for_const0);
    digitRecognizer_digrec_io_s_axi_U->ap_start(ap_start);
    digitRecognizer_digrec_io_s_axi_U->interrupt(interrupt);
    digitRecognizer_digrec_io_s_axi_U->ap_ready(ap_ready);
    digitRecognizer_digrec_io_s_axi_U->ap_done(ap_done);
    digitRecognizer_digrec_io_s_axi_U->ap_idle(ap_idle);
    digitRecognizer_digrec_io_s_axi_U->inputData_address0(Loop_ih_loop_proc_U0_inputData_address0);
    digitRecognizer_digrec_io_s_axi_U->inputData_ce0(Loop_ih_loop_proc_U0_inputData_ce0);
    digitRecognizer_digrec_io_s_axi_U->inputData_q0(inputData_q0);
    digitRecognizer_digrec_io_s_axi_U->output_r_address0(Loop_ho_loop_proc_U0_output_r_address0);
    digitRecognizer_digrec_io_s_axi_U->output_r_ce0(Loop_ho_loop_proc_U0_output_r_ce0);
    digitRecognizer_digrec_io_s_axi_U->output_r_we0(Loop_ho_loop_proc_U0_output_r_we0);
    digitRecognizer_digrec_io_s_axi_U->output_r_d0(Loop_ho_loop_proc_U0_output_r_d0);
    hiddenOut_U = new digitRecognizer_hg8j("hiddenOut_U");
    hiddenOut_U->clk(ap_clk);
    hiddenOut_U->reset(ap_rst_n_inv);
    hiddenOut_U->i_address0(Loop_ih_loop_proc_U0_hiddenOut_address0);
    hiddenOut_U->i_ce0(Loop_ih_loop_proc_U0_hiddenOut_ce0);
    hiddenOut_U->i_we0(Loop_ih_loop_proc_U0_hiddenOut_we0);
    hiddenOut_U->i_d0(Loop_ih_loop_proc_U0_hiddenOut_d0);
    hiddenOut_U->i_q0(hiddenOut_i_q0);
    hiddenOut_U->t_address0(Loop_ho_loop_proc_U0_hiddenOut_address0);
    hiddenOut_U->t_ce0(Loop_ho_loop_proc_U0_hiddenOut_ce0);
    hiddenOut_U->t_we0(ap_var_for_const1);
    hiddenOut_U->t_d0(ap_var_for_const2);
    hiddenOut_U->t_q0(hiddenOut_t_q0);
    hiddenOut_U->i_ce(ap_var_for_const0);
    hiddenOut_U->t_ce(ap_var_for_const0);
    hiddenOut_U->i_full_n(hiddenOut_i_full_n);
    hiddenOut_U->i_write(Loop_ih_loop_proc_U0_ap_done);
    hiddenOut_U->t_empty_n(hiddenOut_t_empty_n);
    hiddenOut_U->t_read(Loop_ho_loop_proc_U0_ap_ready);
    Loop_ih_loop_proc_U0 = new Loop_ih_loop_proc("Loop_ih_loop_proc_U0");
    Loop_ih_loop_proc_U0->ap_clk(ap_clk);
    Loop_ih_loop_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_ih_loop_proc_U0->ap_start(Loop_ih_loop_proc_U0_ap_start);
    Loop_ih_loop_proc_U0->ap_done(Loop_ih_loop_proc_U0_ap_done);
    Loop_ih_loop_proc_U0->ap_continue(Loop_ih_loop_proc_U0_ap_continue);
    Loop_ih_loop_proc_U0->ap_idle(Loop_ih_loop_proc_U0_ap_idle);
    Loop_ih_loop_proc_U0->ap_ready(Loop_ih_loop_proc_U0_ap_ready);
    Loop_ih_loop_proc_U0->hiddenOut_address0(Loop_ih_loop_proc_U0_hiddenOut_address0);
    Loop_ih_loop_proc_U0->hiddenOut_ce0(Loop_ih_loop_proc_U0_hiddenOut_ce0);
    Loop_ih_loop_proc_U0->hiddenOut_we0(Loop_ih_loop_proc_U0_hiddenOut_we0);
    Loop_ih_loop_proc_U0->hiddenOut_d0(Loop_ih_loop_proc_U0_hiddenOut_d0);
    Loop_ih_loop_proc_U0->inputData_address0(Loop_ih_loop_proc_U0_inputData_address0);
    Loop_ih_loop_proc_U0->inputData_ce0(Loop_ih_loop_proc_U0_inputData_ce0);
    Loop_ih_loop_proc_U0->inputData_q0(inputData_q0);
    Loop_ho_loop_proc_U0 = new Loop_ho_loop_proc("Loop_ho_loop_proc_U0");
    Loop_ho_loop_proc_U0->ap_clk(ap_clk);
    Loop_ho_loop_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_ho_loop_proc_U0->ap_start(Loop_ho_loop_proc_U0_ap_start);
    Loop_ho_loop_proc_U0->ap_done(Loop_ho_loop_proc_U0_ap_done);
    Loop_ho_loop_proc_U0->ap_continue(Loop_ho_loop_proc_U0_ap_continue);
    Loop_ho_loop_proc_U0->ap_idle(Loop_ho_loop_proc_U0_ap_idle);
    Loop_ho_loop_proc_U0->ap_ready(Loop_ho_loop_proc_U0_ap_ready);
    Loop_ho_loop_proc_U0->output_r_address0(Loop_ho_loop_proc_U0_output_r_address0);
    Loop_ho_loop_proc_U0->output_r_ce0(Loop_ho_loop_proc_U0_output_r_ce0);
    Loop_ho_loop_proc_U0->output_r_we0(Loop_ho_loop_proc_U0_output_r_we0);
    Loop_ho_loop_proc_U0->output_r_d0(Loop_ho_loop_proc_U0_output_r_d0);
    Loop_ho_loop_proc_U0->hiddenOut_address0(Loop_ho_loop_proc_U0_hiddenOut_address0);
    Loop_ho_loop_proc_U0->hiddenOut_ce0(Loop_ho_loop_proc_U0_hiddenOut_ce0);
    Loop_ho_loop_proc_U0->hiddenOut_q0(hiddenOut_t_q0);

    SC_METHOD(thread_Loop_ho_loop_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_ho_loop_proc_U0_ap_start);
    sensitive << ( hiddenOut_t_empty_n );

    SC_METHOD(thread_Loop_ho_loop_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_ho_loop_proc_U0_start_write);

    SC_METHOD(thread_Loop_ih_loop_proc_U0_ap_continue);
    sensitive << ( hiddenOut_i_full_n );

    SC_METHOD(thread_Loop_ih_loop_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Loop_ih_loop_proc_U0_hiddenOut_full_n);
    sensitive << ( hiddenOut_i_full_n );

    SC_METHOD(thread_Loop_ih_loop_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_ih_loop_proc_U0_start_write);

    SC_METHOD(thread_ap_channel_done_hiddenOut);
    sensitive << ( Loop_ih_loop_proc_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_ho_loop_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_ih_loop_proc_U0_ap_idle );
    sensitive << ( Loop_ho_loop_proc_U0_ap_idle );
    sensitive << ( hiddenOut_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_ih_loop_proc_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Loop_ho_loop_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Loop_ih_loop_proc_U0_ap_ready );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "digitRecognizer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_digrec_io_AWVALID, "(port)s_axi_digrec_io_AWVALID");
    sc_trace(mVcdFile, s_axi_digrec_io_AWREADY, "(port)s_axi_digrec_io_AWREADY");
    sc_trace(mVcdFile, s_axi_digrec_io_AWADDR, "(port)s_axi_digrec_io_AWADDR");
    sc_trace(mVcdFile, s_axi_digrec_io_WVALID, "(port)s_axi_digrec_io_WVALID");
    sc_trace(mVcdFile, s_axi_digrec_io_WREADY, "(port)s_axi_digrec_io_WREADY");
    sc_trace(mVcdFile, s_axi_digrec_io_WDATA, "(port)s_axi_digrec_io_WDATA");
    sc_trace(mVcdFile, s_axi_digrec_io_WSTRB, "(port)s_axi_digrec_io_WSTRB");
    sc_trace(mVcdFile, s_axi_digrec_io_ARVALID, "(port)s_axi_digrec_io_ARVALID");
    sc_trace(mVcdFile, s_axi_digrec_io_ARREADY, "(port)s_axi_digrec_io_ARREADY");
    sc_trace(mVcdFile, s_axi_digrec_io_ARADDR, "(port)s_axi_digrec_io_ARADDR");
    sc_trace(mVcdFile, s_axi_digrec_io_RVALID, "(port)s_axi_digrec_io_RVALID");
    sc_trace(mVcdFile, s_axi_digrec_io_RREADY, "(port)s_axi_digrec_io_RREADY");
    sc_trace(mVcdFile, s_axi_digrec_io_RDATA, "(port)s_axi_digrec_io_RDATA");
    sc_trace(mVcdFile, s_axi_digrec_io_RRESP, "(port)s_axi_digrec_io_RRESP");
    sc_trace(mVcdFile, s_axi_digrec_io_BVALID, "(port)s_axi_digrec_io_BVALID");
    sc_trace(mVcdFile, s_axi_digrec_io_BREADY, "(port)s_axi_digrec_io_BREADY");
    sc_trace(mVcdFile, s_axi_digrec_io_BRESP, "(port)s_axi_digrec_io_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, inputData_q0, "inputData_q0");
    sc_trace(mVcdFile, hiddenOut_i_q0, "hiddenOut_i_q0");
    sc_trace(mVcdFile, hiddenOut_t_q0, "hiddenOut_t_q0");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_ap_start, "Loop_ih_loop_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_ap_done, "Loop_ih_loop_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_ap_continue, "Loop_ih_loop_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_ap_idle, "Loop_ih_loop_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_ap_ready, "Loop_ih_loop_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_hiddenOut_address0, "Loop_ih_loop_proc_U0_hiddenOut_address0");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_hiddenOut_ce0, "Loop_ih_loop_proc_U0_hiddenOut_ce0");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_hiddenOut_we0, "Loop_ih_loop_proc_U0_hiddenOut_we0");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_hiddenOut_d0, "Loop_ih_loop_proc_U0_hiddenOut_d0");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_inputData_address0, "Loop_ih_loop_proc_U0_inputData_address0");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_inputData_ce0, "Loop_ih_loop_proc_U0_inputData_ce0");
    sc_trace(mVcdFile, ap_channel_done_hiddenOut, "ap_channel_done_hiddenOut");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_hiddenOut_full_n, "Loop_ih_loop_proc_U0_hiddenOut_full_n");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_ap_start, "Loop_ho_loop_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_ap_done, "Loop_ho_loop_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_ap_continue, "Loop_ho_loop_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_ap_idle, "Loop_ho_loop_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_ap_ready, "Loop_ho_loop_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_output_r_address0, "Loop_ho_loop_proc_U0_output_r_address0");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_output_r_ce0, "Loop_ho_loop_proc_U0_output_r_ce0");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_output_r_we0, "Loop_ho_loop_proc_U0_output_r_we0");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_output_r_d0, "Loop_ho_loop_proc_U0_output_r_d0");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_hiddenOut_address0, "Loop_ho_loop_proc_U0_hiddenOut_address0");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_hiddenOut_ce0, "Loop_ho_loop_proc_U0_hiddenOut_ce0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, hiddenOut_i_full_n, "hiddenOut_i_full_n");
    sc_trace(mVcdFile, hiddenOut_t_empty_n, "hiddenOut_t_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_start_full_n, "Loop_ih_loop_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_ih_loop_proc_U0_start_write, "Loop_ih_loop_proc_U0_start_write");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_start_full_n, "Loop_ho_loop_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_ho_loop_proc_U0_start_write, "Loop_ho_loop_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("digitRecognizer.hdltvin.dat");
    mHdltvoutHandle.open("digitRecognizer.hdltvout.dat");
}

digitRecognizer::~digitRecognizer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete digitRecognizer_digrec_io_s_axi_U;
    delete hiddenOut_U;
    delete Loop_ih_loop_proc_U0;
    delete Loop_ho_loop_proc_U0;
}

void digitRecognizer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void digitRecognizer::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void digitRecognizer::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void digitRecognizer::thread_Loop_ho_loop_proc_U0_ap_continue() {
    Loop_ho_loop_proc_U0_ap_continue = ap_const_logic_1;
}

void digitRecognizer::thread_Loop_ho_loop_proc_U0_ap_start() {
    Loop_ho_loop_proc_U0_ap_start = hiddenOut_t_empty_n.read();
}

void digitRecognizer::thread_Loop_ho_loop_proc_U0_start_full_n() {
    Loop_ho_loop_proc_U0_start_full_n = ap_const_logic_0;
}

void digitRecognizer::thread_Loop_ho_loop_proc_U0_start_write() {
    Loop_ho_loop_proc_U0_start_write = ap_const_logic_0;
}

void digitRecognizer::thread_Loop_ih_loop_proc_U0_ap_continue() {
    Loop_ih_loop_proc_U0_ap_continue = hiddenOut_i_full_n.read();
}

void digitRecognizer::thread_Loop_ih_loop_proc_U0_ap_start() {
    Loop_ih_loop_proc_U0_ap_start = ap_start.read();
}

void digitRecognizer::thread_Loop_ih_loop_proc_U0_hiddenOut_full_n() {
    Loop_ih_loop_proc_U0_hiddenOut_full_n = hiddenOut_i_full_n.read();
}

void digitRecognizer::thread_Loop_ih_loop_proc_U0_start_full_n() {
    Loop_ih_loop_proc_U0_start_full_n = ap_const_logic_0;
}

void digitRecognizer::thread_Loop_ih_loop_proc_U0_start_write() {
    Loop_ih_loop_proc_U0_start_write = ap_const_logic_0;
}

void digitRecognizer::thread_ap_channel_done_hiddenOut() {
    ap_channel_done_hiddenOut = Loop_ih_loop_proc_U0_ap_done.read();
}

void digitRecognizer::thread_ap_done() {
    ap_done = Loop_ho_loop_proc_U0_ap_done.read();
}

void digitRecognizer::thread_ap_idle() {
    ap_idle = (Loop_ih_loop_proc_U0_ap_idle.read() & Loop_ho_loop_proc_U0_ap_idle.read() & (hiddenOut_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void digitRecognizer::thread_ap_ready() {
    ap_ready = Loop_ih_loop_proc_U0_ap_ready.read();
}

void digitRecognizer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void digitRecognizer::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void digitRecognizer::thread_ap_sync_done() {
    ap_sync_done = Loop_ho_loop_proc_U0_ap_done.read();
}

void digitRecognizer::thread_ap_sync_ready() {
    ap_sync_ready = Loop_ih_loop_proc_U0_ap_ready.read();
}

void digitRecognizer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_digrec_io_AWVALID\" :  \"" << s_axi_digrec_io_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_digrec_io_AWREADY\" :  \"" << s_axi_digrec_io_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_AWADDR\" :  \"" << s_axi_digrec_io_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_WVALID\" :  \"" << s_axi_digrec_io_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_WREADY\" :  \"" << s_axi_digrec_io_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_WDATA\" :  \"" << s_axi_digrec_io_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_WSTRB\" :  \"" << s_axi_digrec_io_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_ARVALID\" :  \"" << s_axi_digrec_io_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_ARREADY\" :  \"" << s_axi_digrec_io_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_ARADDR\" :  \"" << s_axi_digrec_io_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_RVALID\" :  \"" << s_axi_digrec_io_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_RREADY\" :  \"" << s_axi_digrec_io_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_RDATA\" :  \"" << s_axi_digrec_io_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_RRESP\" :  \"" << s_axi_digrec_io_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_BVALID\" :  \"" << s_axi_digrec_io_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_digrec_io_BREADY\" :  \"" << s_axi_digrec_io_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_digrec_io_BRESP\" :  \"" << s_axi_digrec_io_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

