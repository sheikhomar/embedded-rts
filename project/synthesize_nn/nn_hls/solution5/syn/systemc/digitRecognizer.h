// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _digitRecognizer_HH_
#define _digitRecognizer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_ih_loop_proc.h"
#include "Loop_ho_loop_proc.h"
#include "digitRecognizer_hg8j.h"
#include "digitRecognizer_digrec_io_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_DIGREC_IO_ADDR_WIDTH = 14,
         unsigned int C_S_AXI_DIGREC_IO_DATA_WIDTH = 32>
struct digitRecognizer : public sc_module {
    // Port declarations 20
    sc_in< sc_logic > s_axi_digrec_io_AWVALID;
    sc_out< sc_logic > s_axi_digrec_io_AWREADY;
    sc_in< sc_uint<C_S_AXI_DIGREC_IO_ADDR_WIDTH> > s_axi_digrec_io_AWADDR;
    sc_in< sc_logic > s_axi_digrec_io_WVALID;
    sc_out< sc_logic > s_axi_digrec_io_WREADY;
    sc_in< sc_uint<C_S_AXI_DIGREC_IO_DATA_WIDTH> > s_axi_digrec_io_WDATA;
    sc_in< sc_uint<C_S_AXI_DIGREC_IO_DATA_WIDTH/8> > s_axi_digrec_io_WSTRB;
    sc_in< sc_logic > s_axi_digrec_io_ARVALID;
    sc_out< sc_logic > s_axi_digrec_io_ARREADY;
    sc_in< sc_uint<C_S_AXI_DIGREC_IO_ADDR_WIDTH> > s_axi_digrec_io_ARADDR;
    sc_out< sc_logic > s_axi_digrec_io_RVALID;
    sc_in< sc_logic > s_axi_digrec_io_RREADY;
    sc_out< sc_uint<C_S_AXI_DIGREC_IO_DATA_WIDTH> > s_axi_digrec_io_RDATA;
    sc_out< sc_lv<2> > s_axi_digrec_io_RRESP;
    sc_out< sc_logic > s_axi_digrec_io_BVALID;
    sc_in< sc_logic > s_axi_digrec_io_BREADY;
    sc_out< sc_lv<2> > s_axi_digrec_io_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_logic > ap_var_for_const1;


    // Module declarations
    digitRecognizer(sc_module_name name);
    SC_HAS_PROCESS(digitRecognizer);

    ~digitRecognizer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    digitRecognizer_digrec_io_s_axi<C_S_AXI_DIGREC_IO_ADDR_WIDTH,C_S_AXI_DIGREC_IO_DATA_WIDTH>* digitRecognizer_digrec_io_s_axi_U;
    digitRecognizer_hg8j* hiddenOut_U;
    Loop_ih_loop_proc* Loop_ih_loop_proc_U0;
    Loop_ho_loop_proc* Loop_ho_loop_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > inputData_q0;
    sc_signal< sc_lv<32> > hiddenOut_i_q0;
    sc_signal< sc_lv<32> > hiddenOut_t_q0;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_ap_ready;
    sc_signal< sc_lv<5> > Loop_ih_loop_proc_U0_hiddenOut_address0;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_hiddenOut_ce0;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_hiddenOut_we0;
    sc_signal< sc_lv<32> > Loop_ih_loop_proc_U0_hiddenOut_d0;
    sc_signal< sc_lv<10> > Loop_ih_loop_proc_U0_inputData_address0;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_inputData_ce0;
    sc_signal< sc_logic > ap_channel_done_hiddenOut;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_hiddenOut_full_n;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_ap_ready;
    sc_signal< sc_lv<4> > Loop_ho_loop_proc_U0_output_r_address0;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_output_r_ce0;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_output_r_we0;
    sc_signal< sc_lv<32> > Loop_ho_loop_proc_U0_output_r_d0;
    sc_signal< sc_lv<5> > Loop_ho_loop_proc_U0_hiddenOut_address0;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_hiddenOut_ce0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > hiddenOut_i_full_n;
    sc_signal< sc_logic > hiddenOut_t_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_ih_loop_proc_U0_start_write;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_ho_loop_proc_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_Loop_ho_loop_proc_U0_ap_continue();
    void thread_Loop_ho_loop_proc_U0_ap_start();
    void thread_Loop_ho_loop_proc_U0_start_full_n();
    void thread_Loop_ho_loop_proc_U0_start_write();
    void thread_Loop_ih_loop_proc_U0_ap_continue();
    void thread_Loop_ih_loop_proc_U0_ap_start();
    void thread_Loop_ih_loop_proc_U0_hiddenOut_full_n();
    void thread_Loop_ih_loop_proc_U0_start_full_n();
    void thread_Loop_ih_loop_proc_U0_start_write();
    void thread_ap_channel_done_hiddenOut();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
