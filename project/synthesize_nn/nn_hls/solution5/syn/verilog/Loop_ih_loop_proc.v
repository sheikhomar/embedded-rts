// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_ih_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        hiddenOut_address0,
        hiddenOut_ce0,
        hiddenOut_we0,
        hiddenOut_d0,
        inputData_address0,
        inputData_ce0,
        inputData_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_pp0_stage0 = 12'd8;
parameter    ap_ST_fsm_pp0_stage1 = 12'd16;
parameter    ap_ST_fsm_pp0_stage2 = 12'd32;
parameter    ap_ST_fsm_pp0_stage3 = 12'd64;
parameter    ap_ST_fsm_pp0_stage4 = 12'd128;
parameter    ap_ST_fsm_pp0_stage5 = 12'd256;
parameter    ap_ST_fsm_pp0_stage6 = 12'd512;
parameter    ap_ST_fsm_state17 = 12'd1024;
parameter    ap_ST_fsm_state18 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [4:0] hiddenOut_address0;
output   hiddenOut_ce0;
output   hiddenOut_we0;
output  [31:0] hiddenOut_d0;
output  [9:0] inputData_address0;
output   inputData_ce0;
input  [31:0] inputData_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg hiddenOut_ce0;
reg hiddenOut_we0;
reg inputData_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] inputToHiddenWeights_address0;
reg    inputToHiddenWeights_ce0;
wire   [31:0] inputToHiddenWeights_q0;
reg   [9:0] i_0_i_i_reg_134;
reg   [31:0] sum_0_i_i_reg_145;
wire   [14:0] next_mul_fu_175_p2;
reg   [14:0] next_mul_reg_283;
wire    ap_CS_fsm_state2;
wire   [5:0] o_fu_187_p2;
reg   [5:0] o_reg_291;
wire   [0:0] exitcond3_i_i_fu_181_p2;
wire   [31:0] tmp_i_fu_193_p1;
reg   [31:0] tmp_i_reg_301;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_i_i_fu_197_p2;
reg   [0:0] exitcond2_i_i_reg_311;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond2_i_i_reg_311;
wire   [9:0] i_fu_229_p2;
reg   [9:0] i_reg_325;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] inputToHiddenWeights_2_reg_330;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
reg   [31:0] inputData_load_reg_335;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] tmp_7_i_reg_340;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state9_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_flag00011001;
wire   [31:0] grp_fu_155_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] notlhs_fu_253_p2;
reg   [0:0] notlhs_reg_350;
wire    ap_CS_fsm_state17;
wire   [0:0] notrhs_fu_259_p2;
reg   [0:0] notrhs_reg_355;
wire   [0:0] tmp_5_fu_164_p2;
reg   [0:0] tmp_5_reg_360;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_state10_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage5_flag00011011;
reg   [5:0] o_0_i_i_reg_110;
reg    ap_block_state1;
wire    ap_CS_fsm_state18;
reg   [14:0] phi_mul_reg_122;
reg   [9:0] i_0_i_i_phi_fu_138_p4;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] phi_mul_cast_fu_170_p1;
wire   [31:0] tmp_8_cast_fu_213_p1;
wire   [31:0] sum_cast_fu_224_p1;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_flag00000000;
wire   [14:0] tmp_5_i_cast_fu_203_p1;
wire   [14:0] tmp_8_fu_207_p2;
wire   [9:0] sum_fu_218_p2;
wire   [31:0] sum_0_i_i_to_int_fu_235_p1;
wire   [7:0] tmp_1_fu_239_p4;
wire   [22:0] tmp_2_fu_249_p1;
wire   [0:0] tmp_4_fu_265_p2;
wire   [0:0] tmp_6_fu_269_p2;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Loop_ih_loop_procbkb #(
    .DataWidth( 32 ),
    .AddressRange( 25120 ),
    .AddressWidth( 15 ))
inputToHiddenWeights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inputToHiddenWeights_address0),
    .ce0(inputToHiddenWeights_ce0),
    .q0(inputToHiddenWeights_q0)
);

digitRecognizer_fcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
digitRecognizer_fcud_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_i_i_reg_145),
    .din1(tmp_7_i_reg_340),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

digitRecognizer_fdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
digitRecognizer_fdEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inputToHiddenWeights_2_reg_330),
    .din1(inputData_load_reg_335),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

digitRecognizer_feOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
digitRecognizer_feOg_U2(
    .din0(sum_0_i_i_reg_145),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_5_fu_164_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_i_i_fu_181_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (((ap_block_pp0_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 ^ 1'b1);
        end else if ((((ap_block_pp0_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond2_i_i_reg_311) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_0_i_i_reg_134 <= i_reg_325;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_i_reg_134 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        o_0_i_i_reg_110 <= o_reg_291;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        o_0_i_i_reg_110 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_mul_reg_122 <= next_mul_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        phi_mul_reg_122 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond2_i_i_reg_311))) begin
        sum_0_i_i_reg_145 <= grp_fu_155_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_0_i_i_reg_145 <= inputToHiddenWeights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond2_i_i_reg_311 <= exitcond2_i_i_reg_311;
        exitcond2_i_i_reg_311 <= exitcond2_i_i_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond2_i_i_fu_197_p2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_reg_325 <= i_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond2_i_i_reg_311))) begin
        inputData_load_reg_335 <= inputData_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond2_i_i_reg_311))) begin
        inputToHiddenWeights_2_reg_330 <= inputToHiddenWeights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_283 <= next_mul_fu_175_p2;
        o_reg_291 <= o_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        notlhs_reg_350 <= notlhs_fu_253_p2;
        notrhs_reg_355 <= notrhs_fu_259_p2;
        tmp_5_reg_360 <= tmp_5_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond2_i_i_reg_311) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        tmp_7_i_reg_340 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_i_reg_301[5 : 0] <= tmp_i_fu_193_p1[5 : 0];
    end
end

always @ (*) begin
    if ((exitcond2_i_i_fu_197_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_i_i_fu_181_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_i_i_fu_181_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hiddenOut_ce0 = 1'b1;
    end else begin
        hiddenOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hiddenOut_we0 = 1'b1;
    end else begin
        hiddenOut_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond2_i_i_reg_311) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_0_i_i_phi_fu_138_p4 = i_reg_325;
    end else begin
        i_0_i_i_phi_fu_138_p4 = i_0_i_i_reg_134;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        inputData_ce0 = 1'b1;
    end else begin
        inputData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        inputToHiddenWeights_address0 = tmp_8_cast_fu_213_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inputToHiddenWeights_address0 = phi_mul_cast_fu_170_p1;
    end else begin
        inputToHiddenWeights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        inputToHiddenWeights_ce0 = 1'b1;
    end else begin
        inputToHiddenWeights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_i_i_fu_181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond2_i_i_fu_197_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond2_i_i_fu_197_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (((ap_block_pp0_stage5_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond2_i_i_fu_197_p2 = ((i_0_i_i_phi_fu_138_p4 == 10'd785) ? 1'b1 : 1'b0);

assign exitcond3_i_i_fu_181_p2 = ((o_0_i_i_reg_110 == 6'd32) ? 1'b1 : 1'b0);

assign hiddenOut_address0 = tmp_i_reg_301;

assign hiddenOut_d0 = ((tmp_6_fu_269_p2[0:0] === 1'b1) ? 32'd0 : sum_0_i_i_reg_145);

assign i_fu_229_p2 = (i_0_i_i_phi_fu_138_p4 + 10'd1);

assign inputData_address0 = sum_cast_fu_224_p1;

assign next_mul_fu_175_p2 = (phi_mul_reg_122 + 15'd785);

assign notlhs_fu_253_p2 = ((tmp_1_fu_239_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_259_p2 = ((tmp_2_fu_249_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_fu_187_p2 = (o_0_i_i_reg_110 + 6'd1);

assign phi_mul_cast_fu_170_p1 = phi_mul_reg_122;

assign sum_0_i_i_to_int_fu_235_p1 = sum_0_i_i_reg_145;

assign sum_cast_fu_224_p1 = sum_fu_218_p2;

assign sum_fu_218_p2 = ($signed(i_0_i_i_phi_fu_138_p4) + $signed(10'd1023));

assign tmp_1_fu_239_p4 = {{sum_0_i_i_to_int_fu_235_p1[30:23]}};

assign tmp_2_fu_249_p1 = sum_0_i_i_to_int_fu_235_p1[22:0];

assign tmp_4_fu_265_p2 = (notrhs_reg_355 | notlhs_reg_350);

assign tmp_5_i_cast_fu_203_p1 = i_0_i_i_phi_fu_138_p4;

assign tmp_6_fu_269_p2 = (tmp_4_fu_265_p2 & tmp_5_reg_360);

assign tmp_8_cast_fu_213_p1 = tmp_8_fu_207_p2;

assign tmp_8_fu_207_p2 = (phi_mul_reg_122 + tmp_5_i_cast_fu_203_p1);

assign tmp_i_fu_193_p1 = o_0_i_i_reg_110;

always @ (posedge ap_clk) begin
    tmp_i_reg_301[31:6] <= 26'b00000000000000000000000000;
end

endmodule //Loop_ih_loop_proc
