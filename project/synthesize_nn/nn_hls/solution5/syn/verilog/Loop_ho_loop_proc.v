// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_ho_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        hiddenOut_address0,
        hiddenOut_ce0,
        hiddenOut_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_pp0_stage0 = 11'd8;
parameter    ap_ST_fsm_pp0_stage1 = 11'd16;
parameter    ap_ST_fsm_pp0_stage2 = 11'd32;
parameter    ap_ST_fsm_pp0_stage3 = 11'd64;
parameter    ap_ST_fsm_pp0_stage4 = 11'd128;
parameter    ap_ST_fsm_pp0_stage5 = 11'd256;
parameter    ap_ST_fsm_pp0_stage6 = 11'd512;
parameter    ap_ST_fsm_state17 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [4:0] hiddenOut_address0;
output   hiddenOut_ce0;
input  [31:0] hiddenOut_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ce0;
reg output_r_we0;
reg hiddenOut_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] hiddenToOutputWeight_address0;
reg    hiddenToOutputWeight_ce0;
wire   [31:0] hiddenToOutputWeight_q0;
reg   [5:0] i_1_reg_110;
reg   [31:0] sum1_reg_121;
wire   [3:0] o_fu_147_p2;
reg   [3:0] o_reg_224;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_9_fu_169_p2;
reg   [9:0] tmp_9_reg_229;
wire   [0:0] exitcond1_fu_141_p2;
wire   [31:0] tmp_1_fu_180_p1;
reg   [31:0] tmp_1_reg_239;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_184_p2;
reg   [0:0] exitcond_reg_249;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_249;
wire   [5:0] i_fu_215_p2;
reg   [5:0] i_reg_263;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] hiddenToOutputWeight_2_reg_268;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
reg   [31:0] hiddenOut_load_reg_273;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] tmp_8_reg_278;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state9_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_flag00011001;
wire   [31:0] grp_fu_132_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_state10_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage5_flag00011011;
reg   [3:0] o_1_reg_98;
wire    ap_CS_fsm_state17;
reg    ap_block_state1;
reg   [5:0] i_1_phi_fu_114_p4;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] tmp_9_cast_fu_175_p1;
wire   [31:0] tmp_10_cast_fu_199_p1;
wire   [31:0] tmp_4_cast_fu_210_p1;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_flag00000000;
wire   [8:0] tmp_fu_157_p3;
wire   [9:0] tmp_1_cast_fu_153_p1;
wire   [9:0] p_shl_cast_fu_165_p1;
wire   [9:0] tmp_cast_fu_190_p1;
wire   [9:0] tmp_s_fu_194_p2;
wire   [5:0] tmp_4_fu_204_p2;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Loop_ho_loop_procfYi #(
    .DataWidth( 32 ),
    .AddressRange( 330 ),
    .AddressWidth( 9 ))
hiddenToOutputWeight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hiddenToOutputWeight_address0),
    .ce0(hiddenToOutputWeight_ce0),
    .q0(hiddenToOutputWeight_q0)
);

digitRecognizer_fcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
digitRecognizer_fcud_x_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum1_reg_121),
    .din1(tmp_8_reg_278),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

digitRecognizer_fdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
digitRecognizer_fdEe_x_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(hiddenToOutputWeight_2_reg_268),
    .din1(hiddenOut_load_reg_273),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_141_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (((ap_block_pp0_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 ^ 1'b1);
        end else if ((((ap_block_pp0_stage6_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_249) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_1_reg_110 <= i_reg_263;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_110 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        o_1_reg_98 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        o_1_reg_98 <= o_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_249))) begin
        sum1_reg_121 <= grp_fu_132_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum1_reg_121 <= hiddenToOutputWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_249 <= exitcond_reg_249;
        exitcond_reg_249 <= exitcond_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_249))) begin
        hiddenOut_load_reg_273 <= hiddenOut_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_249))) begin
        hiddenToOutputWeight_2_reg_268 <= hiddenToOutputWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_fu_184_p2) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_reg_263 <= i_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_reg_224 <= o_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_reg_239[3 : 0] <= tmp_1_fu_180_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_reg_249) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        tmp_8_reg_278 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_141_p2 == 1'd0))) begin
        tmp_9_reg_229 <= tmp_9_fu_169_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_184_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_141_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_141_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        hiddenOut_ce0 = 1'b1;
    end else begin
        hiddenOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        hiddenToOutputWeight_address0 = tmp_10_cast_fu_199_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hiddenToOutputWeight_address0 = tmp_9_cast_fu_175_p1;
    end else begin
        hiddenToOutputWeight_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        hiddenToOutputWeight_ce0 = 1'b1;
    end else begin
        hiddenToOutputWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_249) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_1_phi_fu_114_p4 = i_reg_263;
    end else begin
        i_1_phi_fu_114_p4 = i_1_reg_110;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_141_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (((ap_block_pp0_stage5_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_fu_141_p2 = ((o_1_reg_98 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_184_p2 = ((i_1_phi_fu_114_p4 == 6'd33) ? 1'b1 : 1'b0);

assign hiddenOut_address0 = tmp_4_cast_fu_210_p1;

assign i_fu_215_p2 = (i_1_phi_fu_114_p4 + 6'd1);

assign o_fu_147_p2 = (o_1_reg_98 + 4'd1);

assign output_r_address0 = tmp_1_reg_239;

assign output_r_d0 = sum1_reg_121;

assign p_shl_cast_fu_165_p1 = tmp_fu_157_p3;

assign tmp_10_cast_fu_199_p1 = tmp_s_fu_194_p2;

assign tmp_1_cast_fu_153_p1 = o_1_reg_98;

assign tmp_1_fu_180_p1 = o_1_reg_98;

assign tmp_4_cast_fu_210_p1 = tmp_4_fu_204_p2;

assign tmp_4_fu_204_p2 = ($signed(i_1_phi_fu_114_p4) + $signed(6'd63));

assign tmp_9_cast_fu_175_p1 = tmp_9_fu_169_p2;

assign tmp_9_fu_169_p2 = (tmp_1_cast_fu_153_p1 + p_shl_cast_fu_165_p1);

assign tmp_cast_fu_190_p1 = i_1_phi_fu_114_p4;

assign tmp_fu_157_p3 = {{o_1_reg_98}, {5'd0}};

assign tmp_s_fu_194_p2 = (tmp_9_reg_229 + tmp_cast_fu_190_p1);

always @ (posedge ap_clk) begin
    tmp_1_reg_239[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //Loop_ho_loop_proc
